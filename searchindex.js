Search.setIndex({"alltitles": {"1. Data augmentation": [[341, "data-augmentation"]], "1. Get started with FastMRI": [[339, "get-started-with-fastmri"]], "2. Equivariant denoiser or plug-and-play": [[341, "equivariant-denoiser-or-plug-and-play"]], "2. Train an accelerated MRI problem with neural networks": [[339, "train-an-accelerated-mri-problem-with-neural-networks"]], "3. Equivariant imaging": [[341, "equivariant-imaging"]], "3. Load raw FastMRI data": [[339, "load-raw-fastmri-data"]], "3D convolutions": [[333, "d-convolutions"]], "3D diffraction PSF": [[333, null]], "3D wavelet denoising": [[345, null]], "4. Train using raw data": [[339, "train-using-raw-data"]], "5. Explore 3D MRI": [[339, "explore-3d-mri"]], "6. Explore dynamic MRI": [[339, "explore-dynamic-mri"]], "A tour of blur operators": [[326, null]], "A tour of forward sensing operators": [[336, null]], "ADMMIteration": [[155, null]], "ADMUNet": [[77, null]], "API": [[0, null]], "Advanced": [[321, null], [344, "advanced"]], "Advanced Transformations": [[417, "id2"]], "Advanced transforms": [[9, "advanced-transforms"], [417, "advanced-transforms"]], "Adversarial Learning": [[2, "adversarial-learning"], [324, null], [344, "adversarial-learning"], [413, "adversarial-learning"]], "Adversarial Losses Overview": [[413, "id5"]], "Adversarial Networks": [[4, "adversarial-networks"], [402, null]], "Adversarial Training": [[8, "adversarial-training"]], "AdversarialOptimizer": [[278, null]], "AdversarialTrainer": [[279, null]], "Affine": [[288, null]], "AmplitudeLoss": [[115, null]], "AmplitudeLossDistance": [[116, null]], "Apply matched filtering to recover the signal and plot the results": [[331, "apply-matched-filtering-to-recover-the-signal-and-plot-the-results"]], "Apply transformation on dataset": [[330, "apply-transformation-on-dataset"]], "Artifact Removal": [[4, "artifact-removal"], [403, null]], "Artifact2ArtifactLoss": [[32, null]], "Artifact2ArtifactSplittingMaskGenerator": [[236, null]], "ArtifactRemoval": [[78, null]], "AutoEncoder": [[79, null]], "AverageMeter": [[296, null]], "BM3D": [[80, null]], "Base Class": [[5, "base-class"]], "Base Classes": [[4, "base-classes"], [6, "base-classes"]], "Base class": [[2, "base-class"], [3, "base-class"], [9, "base-class"]], "BaseDEQ": [[292, null]], "BaseLossScheduler": [[33, null]], "BaseMaskGenerator": [[237, null]], "BaseOptim": [[117, null]], "BaseSDE": [[258, null]], "BaseSDESolver": [[259, null]], "BaseUnfold": [[293, null]], "Basics": [[342, null], [344, "basics"]], "Benefits of using a decomposable forward operator.": [[335, "benefits-of-using-a-decomposable-forward-operator"]], "BernoulliSplittingMaskGenerator": [[238, null]], "Blur": [[175, null], [336, "blur"]], "Blur generators": [[326, "blur-generators"]], "BlurFFT": [[176, null]], "Bregman": [[5, "bregman"], [118, null], [407, "bregman"]], "Bregman potentials": [[407, "id6"]], "BregmanL2": [[119, null]], "Bregman_ICNN": [[120, null]], "Build Sampler class": [[361, "build-sampler-class"]], "Building your custom MCMC sampling algorithm.": [[361, null]], "Building your diffusion posterior sampling method using SDEs": [[364, null]], "BurgEntropy": [[121, null]], "CBSD68": [[13, null]], "CMRxReconSliceDataset": [[14, null]], "CPABDiffeomorphism": [[280, null]], "CPIteration": [[156, null]], "CSGM / AmbientGAN training": [[323, "csgm-ambientgan-training"]], "CSGMGenerator": [[81, null]], "Check learned noise level": [[377, "check-learned-noise-level"]], "Classical Denoisers": [[4, "classical-denoisers"]], "Classical denoisers": [[404, "classical-denoisers"]], "Combining Physics": [[400, "combining-physics"]], "Community": [[389, null]], "Complex denoisers": [[404, "complex-denoisers"]], "Compressed Sensing": [[336, "compressed-sensing"]], "CompressedSensing": [[177, null]], "CompressiveSpectralImaging": [[178, null]], "Computation times": [[322, null], [325, null], [343, null], [349, null], [353, null], [360, null], [368, null], [379, null], [380, null], [388, null], [394, null]], "Computed Tomography": [[336, "computed-tomography"]], "Conditional GAN": [[402, "conditional-gan"]], "Conditional GAN training": [[323, "conditional-gan-training"]], "Confocal microscope PSF": [[333, "confocal-microscope-psf"]], "ConfocalBlurGenerator3D": [[239, null]], "ConvDecoder": [[82, null]], "Convolution Basics": [[326, "convolution-basics"]], "Create a Monte Carlo sampler": [[362, "create-a-monte-carlo-sampler"]], "Create a dataloader": [[328, "create-a-dataloader"], [330, "create-a-dataloader"]], "Create forward model": [[331, "create-forward-model"]], "Create the MCMC sampler": [[366, "create-the-mcmc-sampler"]], "Create the Monte Carlo sampler": [[362, "create-the-monte-carlo-sampler"]], "Create the denoising operator and solve the problem.": [[345, "create-the-denoising-operator-and-solve-the-problem"]], "Create the preconditioned and standard ULA samplers": [[361, "create-the-preconditioned-and-standard-ula-samplers"]], "Creating a custom forward operator.": [[335, "creating-a-custom-forward-operator"]], "Creating a decomposable forward operator.": [[335, "creating-a-decomposable-forward-operator"]], "Creating a forward operator.": [[335, null]], "Creating your own dataset": [[328, null]], "Custom Unfolded Architectures": [[410, "custom-unfolded-architectures"]], "Custom Unfolded Blocks": [[10, "custom-unfolded-blocks"]], "Custom diffusion posterior samplers": [[7, "custom-diffusion-posterior-samplers"]], "DCGANDiscriminator": [[83, null]], "DCGANGenerator": [[84, null]], "DDRM": [[260, null]], "DEQ_builder": [[294, null]], "DIV2K": [[15, null]], "DPIR": [[122, null]], "DPIR method for PnP image deblurring.": [[354, null]], "DPS": [[261, null]], "DPS Algorithm": [[365, "dps-algorithm"]], "DPS approximation": [[365, "dps-approximation"]], "DPSDataFidelity": [[262, null]], "DRSIteration": [[157, null]], "DRUNet": [[85, null]], "Data Fidelity": [[5, "data-fidelity"], [407, "data-fidelity"]], "Data Fidelity Overview": [[407, "id7"]], "Data Transforms": [[1, "data-transforms"], [412, "data-transforms"]], "Data fidelity step": [[363, "data-fidelity-step"]], "DataFidelity": [[123, null]], "Datasets": [[412, null]], "Datasets Overview": [[412, "id5"], [412, "id6"]], "Decolorize": [[179, null], [336, "decolorize"]], "DecomposablePhysics": [[180, null]], "Deep Denoisers": [[4, "deep-denoisers"]], "Deep Equilibrium": [[10, "deep-equilibrium"], [410, "deep-equilibrium"]], "Deep Equilibrium (DEQ) algorithms for image deblurring": [[381, null]], "Deep Image Prior": [[4, "deep-image-prior"], [402, "deep-image-prior"]], "Deep denoisers": [[404, "deep-denoisers"], [404, "id2"]], "DeepImagePrior": [[86, null]], "DeepInverse: a PyTorch library for imaging with deep learning": [[392, null]], "Define a custom iterator for the PDNet learned primal-dual algorithm.": [[384, "define-a-custom-iterator-for-the-pdnet-learned-primal-dual-algorithm"]], "Define a custom optimization algorithm": [[355, "define-a-custom-optimization-algorithm"]], "Define a forward operator": [[332, "define-a-forward-operator"]], "Define a model": [[332, "define-a-model"]], "Define diffusion schedule": [[365, "define-diffusion-schedule"]], "Define forward operator and generate dataset": [[340, "define-forward-operator-and-generate-dataset"], [385, "define-forward-operator-and-generate-dataset"]], "Define forward operator and noise model": [[329, "define-forward-operator-and-noise-model"], [361, "define-forward-operator-and-noise-model"], [362, "define-forward-operator-and-noise-model"], [366, "define-forward-operator-and-noise-model"]], "Define loss": [[375, "define-loss"]], "Define model": [[369, "define-model"], [375, "define-model"]], "Define models": [[323, "define-models"]], "Define physics": [[369, "define-physics"]], "Define physics operator": [[327, "define-physics-operator"]], "Define the  DEQ algorithm.": [[381, "define-the-deq-algorithm"]], "Define the MMSE denoiser": [[362, "define-the-mmse-denoiser"]], "Define the PnP algorithm.": [[356, "define-the-pnp-algorithm"]], "Define the custom fStep and gStep modules": [[355, "define-the-custom-fstep-and-gstep-modules"]], "Define the deep image prior": [[329, "define-the-deep-image-prior"]], "Define the likelihood": [[366, "define-the-likelihood"]], "Define the model.": [[384, "define-the-model"]], "Define the prior": [[361, "define-the-prior"], [366, "define-the-prior"]], "Define the sampling iteration": [[361, "define-the-sampling-iteration"]], "Define the trainable prior and data fidelity terms.": [[384, "define-the-trainable-prior-and-data-fidelity-terms"]], "Define the training parameters.": [[381, "define-the-training-parameters"], [382, "define-the-training-parameters"], [383, "define-the-training-parameters"], [384, "define-the-training-parameters"], [386, "define-the-training-parameters"]], "Define the unfolded PnP algorithm.": [[386, "define-the-unfolded-pnp-algorithm"]], "Define the unfolded Proximal Gradient algorithm.": [[382, "define-the-unfolded-proximal-gradient-algorithm"], [383, "define-the-unfolded-proximal-gradient-algorithm"]], "Define the unfolded trainable model.": [[384, "define-the-unfolded-trainable-model"]], "Defining New Operators": [[398, null]], "Definition of forward operator and noise model": [[351, "definition-of-forward-operator-and-noise-model"]], "Demosaicing": [[181, null], [336, "demosaicing"]], "Denoiser": [[87, null]], "Denoisers": [[404, null]], "Denoisers Utilities": [[404, "denoisers-utilities"]], "Denoisers Utils": [[4, "denoisers-utils"]], "Denoising": [[182, null], [336, "denoising"], [350, "denoising"]], "Denoising Losses": [[413, "id2"]], "Denoising step": [[363, "denoising-step"], [365, "denoising-step"]], "DiffPIR": [[263, null]], "DiffUNet": [[88, null]], "Diffraction PSF generation": [[333, "diffraction-psf-generation"]], "Diffraction blur generators": [[326, "diffraction-blur-generators"]], "DiffractionBlurGenerator": [[240, null]], "DiffractionBlurGenerator3D": [[241, null]], "Diffusion and MCMC Algorithms": [[408, null]], "Diffusion model loading": [[365, "diffusion-model-loading"]], "Diffusion models": [[408, "diffusion-models"]], "Diffusion models with Stochastic Differential Equations for Image Generation and Posterior Sampling": [[7, "diffusion-models-with-stochastic-differential-equations-for-image-generation-and-posterior-sampling"]], "DiffusionSDE": [[264, null]], "DiffusionSampler": [[265, null]], "Discriminator Networks": [[402, "id2"]], "DiscriminatorLoss": [[56, null]], "DiscriminatorMetric": [[57, null]], "Display final estimated phase retrieval": [[337, "display-final-estimated-phase-retrieval"]], "Display probe overlap": [[337, "display-probe-overlap"]], "Distance": [[5, "distance"], [124, null]], "DnCNN": [[89, null]], "Downsampling": [[183, null]], "DownsamplingGenerator": [[242, null]], "Dynamic networks": [[404, "dynamic-networks"]], "DynamicMRI": [[184, null]], "EILoss": [[34, null]], "EPLL": [[125, null]], "EPLLDenoiser": [[90, null]], "ERGAS": [[64, null]], "ESRGANDiscriminator": [[91, null]], "EquispacedMaskGenerator": [[243, null]], "Equivariant denoisers": [[404, "equivariant-denoisers"]], "EquivariantDenoiser": [[92, null]], "Euclidean": [[289, null]], "EulerSolver": [[266, null]], "Evaluate the model on the problem and plot the results.": [[346, "evaluate-the-model-on-the-problem-and-plot-the-results"], [347, "evaluate-the-model-on-the-problem-and-plot-the-results"], [355, "evaluate-the-model-on-the-problem-and-plot-the-results"], [356, "evaluate-the-model-on-the-problem-and-plot-the-results"], [358, "evaluate-the-model-on-the-problem-and-plot-the-results"]], "Evaluate the model on the problem.": [[354, "evaluate-the-model-on-the-problem"], [357, "evaluate-the-model-on-the-problem"]], "Evaluate the reconstruction algorithm on the problem.": [[327, "evaluate-the-reconstruction-algorithm-on-the-problem"]], "Examples": [[344, null]], "Examples using AdversarialOptimizer:": [[278, "examples-using-adversarialoptimizer"]], "Examples using AdversarialTrainer:": [[279, "examples-using-adversarialtrainer"]], "Examples using Affine:": [[288, "examples-using-affine"]], "Examples using Artifact2ArtifactLoss:": [[32, "examples-using-artifact2artifactloss"]], "Examples using ArtifactRemoval:": [[78, "examples-using-artifactremoval"]], "Examples using BaseDEQ:": [[292, "examples-using-basedeq"]], "Examples using BaseMaskGenerator:": [[237, "examples-using-basemaskgenerator"]], "Examples using BaseOptim:": [[117, "examples-using-baseoptim"]], "Examples using BaseSDE:": [[258, "examples-using-basesde"]], "Examples using BaseSDESolver:": [[259, "examples-using-basesdesolver"]], "Examples using BaseUnfold:": [[293, "examples-using-baseunfold"]], "Examples using BernoulliSplittingMaskGenerator:": [[238, "examples-using-bernoullisplittingmaskgenerator"]], "Examples using Blur:": [[175, "examples-using-blur"]], "Examples using BlurFFT:": [[176, "examples-using-blurfft"]], "Examples using Bregman:": [[118, "examples-using-bregman"]], "Examples using BurgEntropy:": [[121, "examples-using-burgentropy"]], "Examples using CMRxReconSliceDataset:": [[14, "examples-using-cmrxreconslicedataset"]], "Examples using CPABDiffeomorphism:": [[280, "examples-using-cpabdiffeomorphism"]], "Examples using CPIteration:": [[156, "examples-using-cpiteration"]], "Examples using CSGMGenerator:": [[81, "examples-using-csgmgenerator"]], "Examples using CompressedSensing:": [[177, "examples-using-compressedsensing"]], "Examples using CompressiveSpectralImaging:": [[178, "examples-using-compressivespectralimaging"]], "Examples using ConfocalBlurGenerator3D:": [[239, "examples-using-confocalblurgenerator3d"]], "Examples using ConvDecoder:": [[82, "examples-using-convdecoder"]], "Examples using DCGANDiscriminator:": [[83, "examples-using-dcgandiscriminator"]], "Examples using DCGANGenerator:": [[84, "examples-using-dcgangenerator"]], "Examples using DDRM:": [[260, "examples-using-ddrm"]], "Examples using DEQ_builder:": [[294, "examples-using-deq-builder"]], "Examples using DPIR:": [[122, "examples-using-dpir"]], "Examples using DPS:": [[261, "examples-using-dps"]], "Examples using DPSDataFidelity:": [[262, "examples-using-dpsdatafidelity"]], "Examples using DRUNet:": [[85, "examples-using-drunet"]], "Examples using DataFidelity:": [[123, "examples-using-datafidelity"]], "Examples using Decolorize:": [[179, "examples-using-decolorize"]], "Examples using DecomposablePhysics:": [[180, "examples-using-decomposablephysics"]], "Examples using DeepImagePrior:": [[86, "examples-using-deepimageprior"]], "Examples using Demosaicing:": [[181, "examples-using-demosaicing"]], "Examples using Denoiser:": [[87, "examples-using-denoiser"]], "Examples using Denoising:": [[182, "examples-using-denoising"]], "Examples using DiffPIR:": [[263, "examples-using-diffpir"]], "Examples using DiffUNet:": [[88, "examples-using-diffunet"]], "Examples using DiffractionBlurGenerator3D:": [[241, "examples-using-diffractionblurgenerator3d"]], "Examples using DiffractionBlurGenerator:": [[240, "examples-using-diffractionblurgenerator"]], "Examples using DiffusionSDE:": [[264, "examples-using-diffusionsde"]], "Examples using DiffusionSampler:": [[265, "examples-using-diffusionsampler"]], "Examples using DiscriminatorLoss:": [[56, "examples-using-discriminatorloss"]], "Examples using DnCNN:": [[89, "examples-using-dncnn"]], "Examples using Downsampling:": [[183, "examples-using-downsampling"]], "Examples using DynamicMRI:": [[184, "examples-using-dynamicmri"]], "Examples using EILoss:": [[34, "examples-using-eiloss"]], "Examples using EPLL:": [[125, "examples-using-epll"]], "Examples using ERGAS:": [[64, "examples-using-ergas"]], "Examples using EquispacedMaskGenerator:": [[243, "examples-using-equispacedmaskgenerator"]], "Examples using EquivariantDenoiser:": [[92, "examples-using-equivariantdenoiser"]], "Examples using Euclidean:": [[289, "examples-using-euclidean"]], "Examples using EulerSolver:": [[266, "examples-using-eulersolver"]], "Examples using FNEJacobianSpectralNorm:": [[35, "examples-using-fnejacobianspectralnorm"]], "Examples using FastMRISliceDataset:": [[17, "examples-using-fastmrislicedataset"]], "Examples using GDIteration:": [[159, "examples-using-gditeration"]], "Examples using GSDRUNet:": [[93, "examples-using-gsdrunet"]], "Examples using GammaNoise:": [[185, "examples-using-gammanoise"]], "Examples using GaussianMaskGenerator:": [[245, "examples-using-gaussianmaskgenerator"]], "Examples using GaussianNoise:": [[186, "examples-using-gaussiannoise"]], "Examples using GaussianSplittingMaskGenerator:": [[246, "examples-using-gaussiansplittingmaskgenerator"]], "Examples using GeneratorLoss:": [[58, "examples-using-generatorloss"]], "Examples using GeneratorMixture:": [[247, "examples-using-generatormixture"]], "Examples using HDF5Dataset:": [[19, "examples-using-hdf5dataset"]], "Examples using Homography:": [[281, "examples-using-homography"]], "Examples using HyperSpectralUnmixing:": [[188, "examples-using-hyperspectralunmixing"]], "Examples using IndicatorL2:": [[127, "examples-using-indicatorl2"]], "Examples using Inpainting:": [[189, "examples-using-inpainting"]], "Examples using L1:": [[129, "examples-using-l1"]], "Examples using L2:": [[133, "examples-using-l2"]], "Examples using LinearPhysics:": [[190, "examples-using-linearphysics"]], "Examples using LogPoissonLikelihood:": [[135, "examples-using-logpoissonlikelihood"]], "Examples using LogPoissonNoise:": [[191, "examples-using-logpoissonnoise"]], "Examples using Loss:": [[39, "examples-using-loss"]], "Examples using MCLoss:": [[40, "examples-using-mcloss"]], "Examples using MOILoss:": [[42, "examples-using-moiloss"]], "Examples using MRI:": [[192, "examples-using-mri"]], "Examples using MRIMixin:": [[193, "examples-using-mrimixin"]], "Examples using MedianFilter:": [[95, "examples-using-medianfilter"]], "Examples using MoDL:": [[96, "examples-using-modl"]], "Examples using MonteCarlo:": [[268, "examples-using-montecarlo"]], "Examples using MotionBlurGenerator:": [[248, "examples-using-motionblurgenerator"]], "Examples using MultiCoilMRI:": [[194, "examples-using-multicoilmri"]], "Examples using NBUDataset:": [[23, "examples-using-nbudataset"]], "Examples using NCSNpp:": [[97, "examples-using-ncsnpp"]], "Examples using Neighbor2Neighbor:": [[43, "examples-using-neighbor2neighbor"]], "Examples using NoiseModel:": [[195, "examples-using-noisemodel"]], "Examples using NoisyDataFidelity:": [[269, "examples-using-noisydatafidelity"]], "Examples using OptimIterator:": [[138, "examples-using-optimiterator"]], "Examples using PDNet_DualBlock:": [[98, "examples-using-pdnet-dualblock"]], "Examples using PDNet_PrimalBlock:": [[99, "examples-using-pdnet-primalblock"]], "Examples using PGDIteration:": [[162, "examples-using-pgditeration"]], "Examples using PSFGenerator:": [[249, "examples-using-psfgenerator"]], "Examples using PanNet:": [[100, "examples-using-pannet"]], "Examples using PanTiltRotate:": [[290, "examples-using-pantiltrotate"]], "Examples using Pansharpen:": [[196, "examples-using-pansharpen"]], "Examples using PatchDataset:": [[24, "examples-using-patchdataset"]], "Examples using PatchGANDiscriminator:": [[101, "examples-using-patchgandiscriminator"]], "Examples using PatchNR:": [[139, "examples-using-patchnr"]], "Examples using PatchPrior:": [[140, "examples-using-patchprior"]], "Examples using Phase2PhaseLoss:": [[44, "examples-using-phase2phaseloss"]], "Examples using PhaseRetrieval:": [[197, "examples-using-phaseretrieval"]], "Examples using Physics:": [[198, "examples-using-physics"]], "Examples using PhysicsGenerator:": [[251, "examples-using-physicsgenerator"]], "Examples using PnP:": [[141, "examples-using-pnp"]], "Examples using PoissonGaussianNoise:": [[199, "examples-using-poissongaussiannoise"]], "Examples using PoissonLikelihood:": [[142, "examples-using-poissonlikelihood"]], "Examples using PoissonNoise:": [[200, "examples-using-poissonnoise"]], "Examples using PosteriorDiffusion:": [[270, "examples-using-posteriordiffusion"]], "Examples using Potential:": [[144, "examples-using-potential"]], "Examples using Prior:": [[145, "examples-using-prior"]], "Examples using ProductConvolutionBlurGenerator:": [[252, "examples-using-productconvolutionblurgenerator"]], "Examples using Ptychography:": [[201, "examples-using-ptychography"]], "Examples using R2RLoss:": [[45, "examples-using-r2rloss"]], "Examples using RED:": [[146, "examples-using-red"]], "Examples using RadioInterferometry:": [[203, "examples-using-radiointerferometry"]], "Examples using RandomMaskGenerator:": [[253, "examples-using-randommaskgenerator"]], "Examples using RandomPhaseRetrieval:": [[204, "examples-using-randomphaseretrieval"]], "Examples using Reconstructor:": [[102, "examples-using-reconstructor"]], "Examples using Reflect:": [[282, "examples-using-reflect"]], "Examples using Rotate:": [[283, "examples-using-rotate"]], "Examples using Scale:": [[284, "examples-using-scale"]], "Examples using ScorePrior:": [[147, "examples-using-scoreprior"]], "Examples using SequentialMRI:": [[205, "examples-using-sequentialmri"]], "Examples using Shift:": [[285, "examples-using-shift"]], "Examples using Similarity:": [[291, "examples-using-similarity"]], "Examples using SimpleFastMRISliceDataset:": [[26, "examples-using-simplefastmrislicedataset"]], "Examples using SinglePhotonLidar:": [[206, "examples-using-singlephotonlidar"]], "Examples using SinglePixelCamera:": [[207, "examples-using-singlepixelcamera"]], "Examples using SpaceVaryingBlur:": [[208, "examples-using-spacevaryingblur"]], "Examples using SpectralAngleMapper:": [[76, "examples-using-spectralanglemapper"]], "Examples using SplittingLoss:": [[48, "examples-using-splittingloss"]], "Examples using StackedLinearPhysics:": [[209, "examples-using-stackedlinearphysics"]], "Examples using StackedPhysics:": [[210, "examples-using-stackedphysics"]], "Examples using StackedPhysicsLoss:": [[49, "examples-using-stackedphysicsloss"]], "Examples using SupAdversarialDiscriminatorLoss:": [[59, "examples-using-supadversarialdiscriminatorloss"]], "Examples using SupAdversarialGeneratorLoss:": [[60, "examples-using-supadversarialgeneratorloss"]], "Examples using SupLoss:": [[51, "examples-using-suploss"]], "Examples using SureGaussianLoss:": [[52, "examples-using-suregaussianloss"]], "Examples using SurePGLoss:": [[53, "examples-using-surepgloss"]], "Examples using SurePoissonLoss:": [[54, "examples-using-surepoissonloss"]], "Examples using TVPrior:": [[149, "examples-using-tvprior"]], "Examples using TimeMixin:": [[213, "examples-using-timemixin"]], "Examples using Tomography:": [[214, "examples-using-tomography"]], "Examples using Trainer:": [[12, "examples-using-trainer"]], "Examples using Transform:": [[287, "examples-using-transform"]], "Examples using UAIRGeneratorLoss:": [[61, "examples-using-uairgeneratorloss"]], "Examples using ULA:": [[273, "examples-using-ula"]], "Examples using UNet:": [[110, "examples-using-unet"]], "Examples using UniformNoise:": [[216, "examples-using-uniformnoise"]], "Examples using UnsupAdversarialDiscriminatorLoss:": [[62, "examples-using-unsupadversarialdiscriminatorloss"]], "Examples using UnsupAdversarialGeneratorLoss:": [[63, "examples-using-unsupadversarialgeneratorloss"]], "Examples using Urban100HR:": [[27, "examples-using-urban100hr"]], "Examples using VarNet:": [[111, "examples-using-varnet"]], "Examples using VarianceExplodingDiffusion:": [[274, "examples-using-varianceexplodingdiffusion"]], "Examples using VariancePreservingDiffusion:": [[275, "examples-using-variancepreservingdiffusion"]], "Examples using WaveletDenoiser:": [[112, "examples-using-waveletdenoiser"]], "Examples using WaveletDictDenoiser:": [[113, "examples-using-waveletdictdenoiser"]], "Examples using WaveletPrior:": [[151, "examples-using-waveletprior"]], "Examples using ZeroFidelity:": [[153, "examples-using-zerofidelity"]], "Examples using build_probe:": [[255, "examples-using-build-probe"]], "Examples using correct_global_phase:": [[166, "examples-using-correct-global-phase"]], "Examples using dirac_like:": [[299, "examples-using-dirac-like"]], "Examples using fStep:": [[164, "examples-using-fstep"]], "Examples using gStep:": [[165, "examples-using-gstep"]], "Examples using gaussian_blur:": [[220, "examples-using-gaussian-blur"]], "Examples using generate_dataset:": [[28, "examples-using-generate-dataset"]], "Examples using generate_shifts:": [[256, "examples-using-generate-shifts"]], "Examples using get_data_home:": [[300, "examples-using-get-data-home"]], "Examples using get_degradation_url:": [[301, "examples-using-get-degradation-url"]], "Examples using get_freer_gpu:": [[302, "examples-using-get-freer-gpu"]], "Examples using get_image_url:": [[303, "examples-using-get-image-url"]], "Examples using load_dataset:": [[305, "examples-using-load-dataset"]], "Examples using load_degradation:": [[306, "examples-using-load-degradation"]], "Examples using load_url_image:": [[308, "examples-using-load-url-image"]], "Examples using optim_builder:": [[154, "examples-using-optim-builder"]], "Examples using plot:": [[310, "examples-using-plot"]], "Examples using plot_curves:": [[311, "examples-using-plot-curves"]], "Examples using plot_inset:": [[312, "examples-using-plot-inset"]], "Examples using plot_ortho3D:": [[313, "examples-using-plot-ortho3d"]], "Examples using plot_parameters:": [[314, "examples-using-plot-parameters"]], "Examples using plot_videos:": [[315, "examples-using-plot-videos"]], "Examples using save_videos:": [[318, "examples-using-save-videos"]], "Examples using spectral_methods:": [[167, "examples-using-spectral-methods"]], "Examples using test:": [[276, "examples-using-test"]], "Examples using train:": [[277, "examples-using-train"]], "Examples using unfolded_builder:": [[295, "examples-using-unfolded-builder"]], "Expected Patch Log Likelihood (EPLL) for Denoising and Inpainting": [[350, null]], "Exploring the total variation prior.": [[346, "exploring-the-total-variation-prior"]], "Exploring the wavelet prior.": [[347, "exploring-the-wavelet-prior"]], "Extension to multiple wavelet bases.": [[345, "extension-to-multiple-wavelet-bases"]], "FISTAIteration": [[158, null]], "FMD": [[16, null]], "FNEJacobianSpectralNorm": [[35, null]], "FastMRISliceDataset": [[17, null]], "Finding Help": [[391, null]], "FixedPoint": [[126, null]], "Flickr2kHR": [[18, null]], "Full Reference Metrics": [[3, "full-reference-metrics"], [414, "full-reference-metrics"], [414, "id3"]], "Functional": [[6, "functional"], [399, null]], "Functional Routines Overview": [[399, "id1"]], "Future events": [[389, "future-events"]], "GDIteration": [[159, null]], "GSDRUNet": [[93, null]], "GainGenerator": [[244, null]], "GammaNoise": [[185, null]], "GaussianMaskGenerator": [[245, null]], "GaussianMixtureModel": [[168, null]], "GaussianNoise": [[186, null]], "GaussianSplittingMaskGenerator": [[246, null]], "General setup": [[334, "general-setup"], [337, "general-setup"]], "Generate a dataset of blurred images": [[327, "generate-a-dataset-of-blurred-images"]], "Generate a dataset of blurred images and load it.": [[346, "generate-a-dataset-of-blurred-images-and-load-it"], [354, "generate-a-dataset-of-blurred-images-and-load-it"]], "Generate a dataset of compressed measurements and load it.": [[382, "generate-a-dataset-of-compressed-measurements-and-load-it"], [383, "generate-a-dataset-of-compressed-measurements-and-load-it"]], "Generate a dataset of degraded images and load it.": [[328, "generate-a-dataset-of-degraded-images-and-load-it"]], "Generate a dataset of knee images and load it.": [[371, "generate-a-dataset-of-knee-images-and-load-it"]], "Generate a dataset of low resolution images and load it.": [[381, "generate-a-dataset-of-low-resolution-images-and-load-it"], [386, "generate-a-dataset-of-low-resolution-images-and-load-it"]], "Generate a dataset of noisy images": [[373, "generate-a-dataset-of-noisy-images"], [374, "generate-a-dataset-of-noisy-images"], [376, "generate-a-dataset-of-noisy-images"], [377, "generate-a-dataset-of-noisy-images"]], "Generate a dataset of subsampled images and load it.": [[372, "generate-a-dataset-of-subsampled-images-and-load-it"]], "Generate an inpainting problem": [[347, "generate-an-inpainting-problem"]], "Generate an inverse problem": [[363, "generate-an-inverse-problem"]], "Generate and visualize probe and measurements": [[337, "generate-and-visualize-probe-and-measurements"]], "Generate dataset": [[323, "generate-dataset"]], "Generate the measurement": [[329, "generate-the-measurement"], [361, "generate-the-measurement"], [362, "generate-the-measurement"], [366, "generate-the-measurement"]], "Generate toy image": [[335, "generate-toy-image"]], "Generate toy signal and measurement": [[331, "generate-toy-signal-and-measurement"]], "Generating Datasets": [[1, "generating-datasets"], [412, "generating-datasets"]], "Generator Mixture": [[326, "generator-mixture"]], "GeneratorLoss": [[58, null]], "GeneratorMixture": [[247, null]], "Generators": [[6, "generators"]], "Gradient descent for phase retrieval": [[337, "gradient-descent-for-phase-retrieval"]], "Groundtruth image": [[320, "groundtruth-image"]], "HDF5Dataset": [[19, null]], "HQSIteration": [[160, null]], "Haze": [[187, null]], "HeunSolver": [[267, null]], "Homography": [[281, null]], "How to Contribute": [[390, null]], "HyperSpectralUnmixing": [[188, null]], "ICNN": [[94, null]], "IRadon": [[222, null]], "Image Datasets": [[1, "image-datasets"]], "Image deblurring with Total-Variation (TV) prior": [[346, null]], "Image deblurring with custom deep explicit prior.": [[327, null]], "Image inpainting with wavelet prior": [[347, null]], "Image reconstruction with a diffusion model": [[362, null]], "Image transformations for Equivariant Imaging": [[370, null]], "Image transforms for equivariance & augmentations": [[341, null]], "Imaging inverse problems with adversarial networks": [[323, null]], "Implementing DPS": [[365, null]], "Implementing DiffPIR": [[363, null]], "Implementing an Algorithm": [[406, "implementing-an-algorithm"]], "Import required packages": [[320, "import-required-packages"]], "IndicatorL2": [[127, null]], "IndicatorL2Distance": [[128, null]], "Inpainting": [[189, null], [336, "inpainting"], [350, "inpainting"]], "Installing dependencies": [[365, "installing-dependencies"]], "InterleavedEpochLossScheduler": [[36, null]], "InterleavedLossScheduler": [[37, null]], "Introduction": [[400, null], [405, null], [413, "introduction"], [414, "introduction"]], "Iterating the Dykstra-like algorithm.": [[345, "iterating-the-dykstra-like-algorithm"]], "Iterative Reconstruction (PnP, RED, etc.)": [[406, null]], "Iterators": [[5, "iterators"], [407, "iterators"]], "JacobianSpectralNorm": [[38, null]], "Kohler": [[20, null]], "L1": [[129, null]], "L12Prior": [[130, null]], "L1Distance": [[131, null]], "L1L2": [[65, null]], "L1Prior": [[132, null]], "L2": [[133, null]], "L2Distance": [[134, null]], "LPIPS": [[66, null]], "Learned Iterative Soft-Thresholding Algorithm (LISTA) for compressed sensing": [[382, null]], "Learned Primal-Dual algorithm for CT scan.": [[384, null]], "Learned iterative custom prior": [[383, null]], "LidcIdriSliceDataset": [[21, null]], "Linear operators": [[400, "linear-operators"]], "LinearPhysics": [[190, null]], "List of mathematical symbols": [[396, "id1"]], "Load base image datasets": [[328, "load-base-image-datasets"], [373, "load-base-image-datasets"], [374, "load-base-image-datasets"], [376, "load-base-image-datasets"], [377, "load-base-image-datasets"]], "Load base image datasets and degradation operators.": [[327, "load-base-image-datasets-and-degradation-operators"], [340, "load-base-image-datasets-and-degradation-operators"], [346, "load-base-image-datasets-and-degradation-operators"], [347, "load-base-image-datasets-and-degradation-operators"], [354, "load-base-image-datasets-and-degradation-operators"], [355, "load-base-image-datasets-and-degradation-operators"], [357, "load-base-image-datasets-and-degradation-operators"], [371, "load-base-image-datasets-and-degradation-operators"], [372, "load-base-image-datasets-and-degradation-operators"], [381, "load-base-image-datasets-and-degradation-operators"], [382, "load-base-image-datasets-and-degradation-operators"], [383, "load-base-image-datasets-and-degradation-operators"], [385, "load-base-image-datasets-and-degradation-operators"], [386, "load-base-image-datasets-and-degradation-operators"]], "Load base volume image and denoising operators.": [[345, "load-base-volume-image-and-denoising-operators"]], "Load data": [[369, "load-data"]], "Load degradation operator.": [[384, "load-degradation-operator"]], "Load example image from the internet": [[362, "load-example-image-from-the-internet"]], "Load image and parameters": [[358, "load-image-and-parameters"]], "Load image from the internet": [[329, "load-image-from-the-internet"], [334, "load-image-from-the-internet"], [336, "load-image-from-the-internet"], [337, "load-image-from-the-internet"], [361, "load-image-from-the-internet"], [366, "load-image-from-the-internet"]], "Load libraries": [[330, "load-libraries"]], "Load raw pan-sharpening measurements": [[338, "load-raw-pan-sharpening-measurements"]], "Load test image and model": [[350, "load-test-image-and-model"]], "Load training and test images": [[351, "load-training-and-test-images"]], "Loading the model": [[332, "loading-the-model"], [385, "loading-the-model"]], "LogPoissonLikelihood": [[135, null]], "LogPoissonLikelihoodDistance": [[136, null]], "LogPoissonNoise": [[191, null]], "Logging": [[11, "logging"], [397, "logging"]], "Logging functionality": [[397, "id6"]], "Loss": [[39, null]], "Loss schedulers": [[2, "loss-schedulers"], [413, "loss-schedulers"]], "LpNorm": [[67, null]], "LsdirHR": [[22, null]], "MAE": [[68, null]], "MCLoss": [[40, null]], "MCMC methods": [[408, "id5"]], "MDIteration": [[161, null]], "MOEILoss": [[41, null]], "MOILoss": [[42, null]], "MRI": [[192, null], [336, "mri"]], "MRIMixin": [[193, null]], "MSE": [[69, null]], "Markov Chain Monte Carlo": [[408, "markov-chain-monte-carlo"]], "Markov Chain Monte Carlo Langevin": [[7, "markov-chain-monte-carlo-langevin"]], "Math Notation": [[396, null]], "Measurements generation": [[334, "measurements-generation"]], "MedianFilter": [[95, null]], "Metric": [[70, null]], "Metrics": [[414, null]], "MoDL": [[96, null]], "MonteCarlo": [[268, null]], "Motion blur generators": [[326, "motion-blur-generators"]], "MotionBlurGenerator": [[248, null]], "MultiCoilMRI": [[194, null]], "NBUDataset": [[23, null]], "NCSNpp": [[97, null]], "NIQE": [[71, null]], "NMSE": [[72, null]], "Natural weighting and Briggs weighting": [[320, "natural-weighting-and-briggs-weighting"]], "NegEntropy": [[137, null]], "Neighbor2Neighbor": [[43, null]], "Network Regularization": [[2, "network-regularization"], [413, "network-regularization"]], "Network Regularization Losses Overview": [[413, "id4"]], "No Reference Metrics": [[3, "no-reference-metrics"], [414, "no-reference-metrics"], [414, "id4"]], "Noise Distributions and Their Probability Distributions": [[401, "id2"]], "Noise distributions": [[6, "noise-distributions"], [401, "noise-distributions"]], "NoiseModel": [[195, null]], "Noisy data-fidelity terms": [[408, "id3"]], "NoisyDataFidelity": [[269, null]], "Non-Learned Denoisers Overview": [[404, "id3"]], "Operators": [[6, "operators"], [395, "operators"], [401, "operators"]], "Operators & Noise": [[401, null]], "Operators, Definitions, and Generators": [[401, "id1"]], "OptimIterator": [[138, null]], "Optimization": [[344, "optimization"], [348, null], [407, null]], "Other": [[11, "other"], [397, "other"]], "Other Datasets": [[1, "other-datasets"]], "Other self-supervised losses": [[413, "id3"]], "Overall comparison": [[334, "overall-comparison"]], "PDNet_DualBlock": [[98, null]], "PDNet_PrimalBlock": [[99, null]], "PGDIteration": [[162, null]], "PSFGenerator": [[249, null]], "PSNR": [[73, null]], "Pan-sharpening": [[336, "pan-sharpening"]], "PanNet": [[100, null]], "PanTiltRotate": [[290, null]], "Pansharpen": [[196, null]], "Parameter-dependent operators": [[400, "parameter-dependent-operators"]], "Parameters": [[407, "parameters"]], "Past events": [[389, "past-events"]], "Patch Priors": [[344, "patch-priors"], [352, null]], "Patch priors for limited-angle computed tomography": [[351, null]], "PatchDataset": [[24, null]], "PatchGANDiscriminator": [[101, null]], "PatchNR": [[139, null]], "PatchPrior": [[140, null]], "Phase correction and signal reconstruction": [[334, "phase-correction-and-signal-reconstruction"], [334, "id1"], [334, "id2"], [334, "id3"]], "Phase2PhaseLoss": [[44, null]], "Phase2PhaseSplittingMaskGenerator": [[250, null]], "PhaseRetrieval": [[197, null]], "Physics": [[198, null]], "Physics Generators": [[400, "physics-generators"]], "PhysicsGenerator": [[251, null]], "PlaceholderDataset": [[29, null]], "Plotting": [[11, "plotting"], [397, "plotting"]], "Plotting the learned parameters.": [[382, "plotting-the-learned-parameters"]], "Plotting the weights of the network.": [[383, "plotting-the-weights-of-the-network"], [386, "plotting-the-weights-of-the-network"]], "Plug-and-Play": [[344, "plug-and-play"], [359, null]], "Plug-and-Play algorithm with Mirror Descent for Poisson noise inverse problems.": [[356, null]], "Plug-and-play Posterior Sampling with arbitrary denoisers": [[364, "plug-and-play-posterior-sampling-with-arbitrary-denoisers"]], "PnP": [[141, null]], "PnP with custom optimization algorithm (Condat-Vu Primal-Dual)": [[355, null]], "PoissonGaussianNoise": [[199, null]], "PoissonLikelihood": [[142, null]], "PoissonLikelihoodDistance": [[143, null]], "PoissonNoise": [[200, null]], "Popular diffusion methods": [[408, "id4"]], "Popular posterior samplers": [[408, "popular-posterior-samplers"]], "Posterior sampling": [[408, "posterior-sampling"]], "PosteriorDiffusion": [[270, null]], "Potential": [[144, null]], "Potentials": [[5, "potentials"], [407, "potentials"]], "Predefined Algorithms": [[407, "predefined-algorithms"]], "Predefined Datasets": [[412, "predefined-datasets"]], "Predefined Iterative Algorithms": [[406, "predefined-iterative-algorithms"]], "Predefined methods": [[406, "id1"]], "Predefined models": [[5, "predefined-models"]], "Prep loss": [[369, "prep-loss"]], "Prepare data": [[375, "prepare-data"]], "Prepare phase input": [[337, "prepare-phase-input"]], "Pretrained Weights": [[411, null]], "Prior": [[145, null]], "Priors": [[5, "priors"], [407, "priors"]], "Priors Overview": [[407, "id8"]], "ProductConvolutionBlurGenerator": [[252, null]], "ProgressMeter": [[297, null]], "Ptychography": [[201, null]], "Ptychography phase retrieval": [[337, null]], "PtychographyLinearOperator": [[202, null]], "Putting it all together: the DiffPIR algorithm": [[363, "putting-it-all-together-the-diffpir-algorithm"]], "QNR": [[74, null]], "Quickstart": [[393, null]], "R2RLoss": [[45, null]], "RED": [[146, null]], "Radio interferometric imaging with deepinverse": [[320, null]], "RadioInterferometry": [[203, null]], "Radon": [[223, null]], "Random phase retrieval and reconstruction methods.": [[334, null]], "RandomLossScheduler": [[46, null]], "RandomMaskGenerator": [[253, null]], "RandomPhaseRetrieval": [[204, null]], "Reconstructing an image using the deep image prior.": [[329, null]], "Reconstruction": [[395, "reconstruction"]], "Reconstruction loop": [[351, "reconstruction-loop"]], "Reconstruction methods": [[405, "id1"]], "Reconstruction with gradient descent and PnP denoisers": [[334, "reconstruction-with-gradient-descent-and-pnp-denoisers"]], "Reconstruction with gradient descent and random initialization": [[334, "reconstruction-with-gradient-descent-and-random-initialization"]], "Reconstruction with gradient descent and spectral methods initialization": [[334, "reconstruction-with-gradient-descent-and-spectral-methods-initialization"]], "Reconstruction with spectral methods": [[334, "reconstruction-with-spectral-methods"]], "Reconstructor": [[102, null]], "Reflect": [[282, null]], "Regularization by Denoising (RED) for Super-Resolution.": [[357, null]], "Remote sensing with satellite images": [[338, null]], "Rescale": [[30, null]], "Restormer": [[103, null]], "Reverse-time SDE as sampling process": [[364, "reverse-time-sde-as-sampling-process"]], "Rotate": [[283, null]], "Run DIP algorithm and plot results": [[329, "run-dip-algorithm-and-plot-results"]], "Run and plot": [[351, "run-and-plot"]], "Run sampling algorithm and plot results": [[362, "run-sampling-algorithm-and-plot-results"], [366, "run-sampling-algorithm-and-plot-results"]], "Run sampling algorithms and plot results": [[361, "run-sampling-algorithms-and-plot-results"]], "Run the diffusion algorithm and plot results": [[362, "run-the-diffusion-algorithm-and-plot-results"]], "SCUNet": [[104, null]], "SDE/ODE solvers": [[408, "id2"]], "SDEOutput": [[271, null]], "SKRock": [[272, null]], "SMIteration": [[163, null]], "SSIM": [[75, null]], "Sampling": [[344, "sampling"], [367, null]], "Sampling pattern": [[320, "sampling-pattern"]], "Sampling step": [[363, "sampling-step"]], "Saving and loading models": [[332, null]], "Saving the model": [[332, "saving-the-model"], [385, "saving-the-model"]], "Scale": [[284, null]], "Schedulers Overview": [[413, "id6"]], "ScoreLoss": [[47, null]], "ScorePrior": [[147, null]], "Self-Supervised Learning": [[2, "self-supervised-learning"], [344, "self-supervised-learning"], [378, null], [413, "self-supervised-learning"]], "Self-supervised MRI reconstruction with Artifact2Artifact": [[369, null]], "Self-supervised denoising with the Generalized R2R loss.": [[374, null]], "Self-supervised denoising with the Neighbor2Neighbor loss.": [[373, null]], "Self-supervised denoising with the SURE loss.": [[376, null]], "Self-supervised denoising with the UNSURE loss.": [[377, null]], "Self-supervised learning from incomplete measurements of multiple operators.": [[372, null]], "Self-supervised learning with Equivariant Imaging for MRI.": [[371, null]], "Self-supervised learning with measurement splitting": [[375, null]], "SequentialMRI": [[205, null]], "Set parameters for EPLL and PatchNR": [[351, "set-parameters-for-epll-and-patchnr"]], "Set the forward operator": [[355, "set-the-forward-operator"], [358, "set-the-forward-operator"]], "Set up ptychography physics model": [[337, "set-up-ptychography-physics-model"]], "Set up the DPIR algorithm to solve the inverse problem.": [[354, "set-up-the-dpir-algorithm-to-solve-the-inverse-problem"]], "Set up the PnP algorithm to solve the inverse problem.": [[355, "set-up-the-pnp-algorithm-to-solve-the-inverse-problem"], [358, "set-up-the-pnp-algorithm-to-solve-the-inverse-problem"]], "Set up the denoiser network": [[373, "set-up-the-denoiser-network"], [374, "set-up-the-denoiser-network"], [376, "set-up-the-denoiser-network"], [377, "set-up-the-denoiser-network"]], "Set up the optimization algorithm to solve the inverse problem.": [[327, "set-up-the-optimization-algorithm-to-solve-the-inverse-problem"], [346, "set-up-the-optimization-algorithm-to-solve-the-inverse-problem"], [347, "set-up-the-optimization-algorithm-to-solve-the-inverse-problem"]], "Set up the reconstruction network": [[340, "set-up-the-reconstruction-network"], [371, "set-up-the-reconstruction-network"], [372, "set-up-the-reconstruction-network"], [385, "set-up-the-reconstruction-network"]], "Set up the training parameters": [[371, "set-up-the-training-parameters"], [372, "set-up-the-training-parameters"], [373, "set-up-the-training-parameters"], [374, "set-up-the-training-parameters"], [376, "set-up-the-training-parameters"], [377, "set-up-the-training-parameters"]], "Set14HR": [[25, null]], "Setting the noise and regularization schedules": [[363, "setting-the-noise-and-regularization-schedules"]], "Setup paths for data loading and results": [[332, "setup-paths-for-data-loading-and-results"]], "Setup paths for data loading and results.": [[327, "setup-paths-for-data-loading-and-results"], [328, "setup-paths-for-data-loading-and-results"], [340, "setup-paths-for-data-loading-and-results"], [345, "setup-paths-for-data-loading-and-results"], [346, "setup-paths-for-data-loading-and-results"], [347, "setup-paths-for-data-loading-and-results"], [354, "setup-paths-for-data-loading-and-results"], [355, "setup-paths-for-data-loading-and-results"], [356, "setup-paths-for-data-loading-and-results"], [357, "setup-paths-for-data-loading-and-results"], [358, "setup-paths-for-data-loading-and-results"], [371, "setup-paths-for-data-loading-and-results"], [372, "setup-paths-for-data-loading-and-results"], [373, "setup-paths-for-data-loading-and-results"], [374, "setup-paths-for-data-loading-and-results"], [376, "setup-paths-for-data-loading-and-results"], [377, "setup-paths-for-data-loading-and-results"], [381, "setup-paths-for-data-loading-and-results"], [382, "setup-paths-for-data-loading-and-results"], [383, "setup-paths-for-data-loading-and-results"], [384, "setup-paths-for-data-loading-and-results"], [385, "setup-paths-for-data-loading-and-results"], [386, "setup-paths-for-data-loading-and-results"]], "Setup the PnP algorithm. This involves in particular the definition of a custom prior class.": [[357, "setup-the-pnp-algorithm-this-involves-in-particular-the-definition-of-a-custom-prior-class"]], "Shift": [[285, null]], "ShiftTime": [[286, null]], "Shuffle data with buffer shuffling": [[330, "shuffle-data-with-buffer-shuffling"]], "SigmaGenerator": [[254, null]], "Signal construction": [[334, "signal-construction"]], "Similarity": [[291, null]], "Simple Transformations": [[417, "id1"]], "Simple transforms": [[9, "simple-transforms"], [417, "simple-transforms"]], "SimpleFastMRISliceDataset": [[26, null]], "Simulate remote-sensing measurements": [[338, "simulate-remote-sensing-measurements"]], "Simulating the measurements": [[320, "simulating-the-measurements"]], "Single photon lidar operator for depth ranging.": [[331, null]], "Single-Pixel Camera": [[336, "single-pixel-camera"]], "SinglePhotonLidar": [[206, null]], "SinglePixelCamera": [[207, null]], "Solvers": [[408, "solvers"]], "Solving pan-sharpening with neural networks": [[338, "solving-pan-sharpening-with-neural-networks"]], "Solving the problem with a wavelet prior": [[320, "solving-the-problem-with-a-wavelet-prior"]], "Space varying blurs": [[326, "space-varying-blurs"]], "SpaceVaryingBlur": [[208, null]], "Specific Networks": [[409, null]], "Specific architectures": [[409, "id1"]], "SpectralAngleMapper": [[76, null]], "SplittingLoss": [[48, null]], "StackedLinearPhysics": [[209, null]], "StackedPhysics": [[210, null]], "StackedPhysicsDataFidelity": [[148, null]], "StackedPhysicsLoss": [[49, null]], "StepLossScheduler": [[50, null]], "Stochastic Differential Equations": [[408, "stochastic-differential-equations"], [408, "id1"]], "Stream data from Internet": [[330, "stream-data-from-internet"]], "StructuredRandom": [[211, null]], "StructuredRandomPhaseRetrieval": [[212, null]], "Summary of pretrained weights": [[411, "id3"]], "SupAdversarialDiscriminatorLoss": [[59, null]], "SupAdversarialGeneratorLoss": [[60, null]], "SupLoss": [[51, null]], "Super-Resolution": [[336, "super-resolution"]], "Supervised Learning": [[2, "supervised-learning"], [413, "supervised-learning"]], "SureGaussianLoss": [[52, null]], "SurePGLoss": [[53, null]], "SurePoissonLoss": [[54, null]], "SwinIR": [[105, null]], "TGVDenoiser": [[106, null]], "TVDenoiser": [[107, null]], "TVLoss": [[55, null]], "TVPrior": [[149, null]], "TensorList": [[11, "tensorlist"], [397, "tensorlist"]], "Test the model": [[369, "test-the-model"]], "Test the network": [[340, "test-the-network"], [371, "test-the-network"], [372, "test-the-network"], [373, "test-the-network"], [374, "test-the-network"], [376, "test-the-network"], [377, "test-the-network"], [381, "test-the-network"], [384, "test-the-network"], [385, "test-the-network"], [386, "test-the-network"]], "Test the network.": [[382, "test-the-network"], [383, "test-the-network"]], "The DPS algorithm": [[365, "the-dps-algorithm"]], "The DiffPIR algorithm": [[363, "the-diffpir-algorithm"]], "The RI measurement operator": [[320, "the-ri-measurement-operator"]], "Tikhonov": [[150, null]], "Time Transforms": [[417, "id3"]], "TimeAgnosticNet": [[108, null]], "TimeAveragingNet": [[109, null]], "TimeMixin": [[213, null]], "ToComplex": [[31, null]], "Tomography": [[214, null]], "Tour of MRI functionality in DeepInverse": [[339, null]], "Train and test network": [[375, "train-and-test-network"]], "Train model": [[369, "train-model"]], "Train the model": [[340, "train-the-model"], [385, "train-the-model"]], "Train the network": [[371, "train-the-network"], [372, "train-the-network"], [373, "train-the-network"], [374, "train-the-network"], [376, "train-the-network"], [377, "train-the-network"], [381, "train-the-network"], [384, "train-the-network"], [386, "train-the-network"]], "Train the network.": [[382, "train-the-network"], [383, "train-the-network"]], "Trainer": [[12, null], [416, null]], "Training / EM algorithm": [[351, "training-em-algorithm"]], "Training Losses": [[413, null]], "Training a reconstruction network.": [[340, null]], "Training dataset of random phantoms.": [[384, "training-dataset-of-random-phantoms"]], "Training, Testing and Utilities": [[395, "training-testing-and-utilities"]], "Transform": [[287, null]], "Transforms": [[417, null]], "UAIR training": [[323, "uair-training"]], "UAIRGeneratorLoss": [[61, null]], "ULA": [[273, null]], "UNet": [[110, null]], "Uncertainty quantification": [[408, "uncertainty-quantification"]], "Uncertainty quantification with PnP-ULA.": [[366, null]], "Unconditional GAN": [[402, "unconditional-gan"]], "Unconditional GANs": [[402, "id3"]], "Unfolded": [[10, "unfolded"], [344, "unfolded"], [387, null], [410, "id1"]], "Unfolded Algorithms": [[410, null]], "Unfolded Chambolle-Pock for constrained image inpainting": [[385, null]], "UniformGaussianNoise": [[215, null]], "UniformNoise": [[216, null]], "UnsupAdversarialDiscriminatorLoss": [[62, null]], "UnsupAdversarialGeneratorLoss": [[63, null]], "Urban100HR": [[27, null]], "User Guide": [[395, null]], "Using DPS in your inverse problem": [[365, "using-dps-in-your-inverse-problem"]], "Using Multiple GPUs": [[415, null]], "Using huggingface dataset": [[330, null]], "Using the DiffPIR algorithm in your inverse problem": [[363, "using-the-diffpir-algorithm-in-your-inverse-problem"]], "Using the Dykstra-like algorithm for wavelet denoising.": [[345, "using-the-dykstra-like-algorithm-for-wavelet-denoising"]], "Utility Functions and Descriptions": [[397, "id5"]], "Utility and demo Functions": [[397, "id7"]], "Utils": [[5, "utils"], [397, null], [407, "utils"]], "Vanilla PnP for computed tomography (CT).": [[358, null]], "Vanilla Unfolded algorithm for super-resolution": [[386, null]], "VarNet": [[111, null]], "VarianceExplodingDiffusion": [[274, null]], "VariancePreservingDiffusion": [[275, null]], "Varying the SDE": [[364, "varying-the-sde"]], "Verifying our linear operator": [[335, "verifying-our-linear-operator"]], "Video transforms": [[9, "video-transforms"], [417, "video-transforms"]], "Visualization": [[334, "visualization"]], "WaveletDenoiser": [[112, null]], "WaveletDictDenoiser": [[113, null]], "WaveletPrior": [[151, null]], "Widefield microscope PSF": [[333, "widefield-microscope-psf"]], "ZeroDistance": [[152, null]], "ZeroFidelity": [[153, null]], "adjoint_function": [[217, null]], "bicgstab": [[169, null]], "bicubic_filter": [[218, null]], "bilinear_filter": [[219, null]], "build_probe": [[255, null]], "conjugate_gradient": [[170, null]], "conv2d": [[224, null]], "conv2d_fft": [[225, null]], "conv3d_fft": [[226, null]], "conv_transpose2d": [[227, null]], "conv_transpose2d_fft": [[228, null]], "conv_transpose3d_fft": [[229, null]], "correct_global_phase": [[166, null]], "deepinv.datasets": [[1, null]], "deepinv.loss": [[2, null]], "deepinv.metric": [[3, null]], "deepinv.models": [[4, null]], "deepinv.optim": [[5, null]], "deepinv.physics": [[6, null]], "deepinv.sampling": [[7, null]], "deepinv.training": [[8, null]], "deepinv.transform": [[9, null]], "deepinv.unfolded": [[10, null]], "deepinv.utils": [[11, null]], "deepinv.utils.TensorList": [[298, null]], "dirac_like": [[299, null]], "dst1": [[230, null]], "fStep": [[164, null]], "gStep": [[165, null]], "gaussian_blur": [[220, null]], "generate_dataset": [[28, null]], "generate_shifts": [[256, null]], "get_data_home": [[300, null]], "get_degradation_url": [[301, null]], "get_freer_gpu": [[302, null]], "get_image_url": [[303, null]], "get_timestamp": [[304, null]], "gradient_descent": [[171, null]], "histogram": [[231, null]], "histogramdd": [[232, null]], "least_squares": [[172, null]], "load_dataset": [[305, null]], "load_degradation": [[306, null]], "load_image": [[307, null]], "load_url_image": [[308, null]], "lsqr": [[173, null]], "minres": [[174, null]], "multiplier": [[233, null]], "multiplier_adjoint": [[234, null]], "ones_like": [[309, null]], "optim_builder": [[154, null]], "plot": [[310, null]], "plot_curves": [[311, null]], "plot_inset": [[312, null]], "plot_ortho3D": [[313, null]], "plot_parameters": [[314, null]], "plot_videos": [[315, null]], "product_convolution2d": [[235, null]], "rand_like": [[316, null]], "randn_like": [[317, null]], "save_videos": [[318, null]], "sinc_filter": [[221, null]], "spectral_methods": [[167, null]], "stack": [[257, null]], "test": [[276, null]], "to_complex_denoiser": [[114, null]], "train": [[277, null]], "unfolded_builder": [[295, null]], "zeros_like": [[319, null]]}, "docnames": ["API", "api/deepinv.datasets", "api/deepinv.loss", "api/deepinv.metric", "api/deepinv.models", "api/deepinv.optim", "api/deepinv.physics", "api/deepinv.sampling", "api/deepinv.training", "api/deepinv.transform", "api/deepinv.unfolded", "api/deepinv.utils", "api/stubs/deepinv.Trainer", "api/stubs/deepinv.datasets.CBSD68", "api/stubs/deepinv.datasets.CMRxReconSliceDataset", "api/stubs/deepinv.datasets.DIV2K", "api/stubs/deepinv.datasets.FMD", "api/stubs/deepinv.datasets.FastMRISliceDataset", "api/stubs/deepinv.datasets.Flickr2kHR", "api/stubs/deepinv.datasets.HDF5Dataset", "api/stubs/deepinv.datasets.Kohler", "api/stubs/deepinv.datasets.LidcIdriSliceDataset", "api/stubs/deepinv.datasets.LsdirHR", "api/stubs/deepinv.datasets.NBUDataset", "api/stubs/deepinv.datasets.PatchDataset", "api/stubs/deepinv.datasets.Set14HR", "api/stubs/deepinv.datasets.SimpleFastMRISliceDataset", "api/stubs/deepinv.datasets.Urban100HR", "api/stubs/deepinv.datasets.generate_dataset", "api/stubs/deepinv.datasets.utils.PlaceholderDataset", "api/stubs/deepinv.datasets.utils.Rescale", "api/stubs/deepinv.datasets.utils.ToComplex", "api/stubs/deepinv.loss.Artifact2ArtifactLoss", "api/stubs/deepinv.loss.BaseLossScheduler", "api/stubs/deepinv.loss.EILoss", "api/stubs/deepinv.loss.FNEJacobianSpectralNorm", "api/stubs/deepinv.loss.InterleavedEpochLossScheduler", "api/stubs/deepinv.loss.InterleavedLossScheduler", "api/stubs/deepinv.loss.JacobianSpectralNorm", "api/stubs/deepinv.loss.Loss", "api/stubs/deepinv.loss.MCLoss", "api/stubs/deepinv.loss.MOEILoss", "api/stubs/deepinv.loss.MOILoss", "api/stubs/deepinv.loss.Neighbor2Neighbor", "api/stubs/deepinv.loss.Phase2PhaseLoss", "api/stubs/deepinv.loss.R2RLoss", "api/stubs/deepinv.loss.RandomLossScheduler", "api/stubs/deepinv.loss.ScoreLoss", "api/stubs/deepinv.loss.SplittingLoss", "api/stubs/deepinv.loss.StackedPhysicsLoss", "api/stubs/deepinv.loss.StepLossScheduler", "api/stubs/deepinv.loss.SupLoss", "api/stubs/deepinv.loss.SureGaussianLoss", "api/stubs/deepinv.loss.SurePGLoss", "api/stubs/deepinv.loss.SurePoissonLoss", "api/stubs/deepinv.loss.TVLoss", "api/stubs/deepinv.loss.adversarial.DiscriminatorLoss", "api/stubs/deepinv.loss.adversarial.DiscriminatorMetric", "api/stubs/deepinv.loss.adversarial.GeneratorLoss", "api/stubs/deepinv.loss.adversarial.SupAdversarialDiscriminatorLoss", "api/stubs/deepinv.loss.adversarial.SupAdversarialGeneratorLoss", "api/stubs/deepinv.loss.adversarial.UAIRGeneratorLoss", "api/stubs/deepinv.loss.adversarial.UnsupAdversarialDiscriminatorLoss", "api/stubs/deepinv.loss.adversarial.UnsupAdversarialGeneratorLoss", "api/stubs/deepinv.loss.metric.ERGAS", "api/stubs/deepinv.loss.metric.L1L2", "api/stubs/deepinv.loss.metric.LPIPS", "api/stubs/deepinv.loss.metric.LpNorm", "api/stubs/deepinv.loss.metric.MAE", "api/stubs/deepinv.loss.metric.MSE", "api/stubs/deepinv.loss.metric.Metric", "api/stubs/deepinv.loss.metric.NIQE", "api/stubs/deepinv.loss.metric.NMSE", "api/stubs/deepinv.loss.metric.PSNR", "api/stubs/deepinv.loss.metric.QNR", "api/stubs/deepinv.loss.metric.SSIM", "api/stubs/deepinv.loss.metric.SpectralAngleMapper", "api/stubs/deepinv.models.ADMUNet", "api/stubs/deepinv.models.ArtifactRemoval", "api/stubs/deepinv.models.AutoEncoder", "api/stubs/deepinv.models.BM3D", "api/stubs/deepinv.models.CSGMGenerator", "api/stubs/deepinv.models.ConvDecoder", "api/stubs/deepinv.models.DCGANDiscriminator", "api/stubs/deepinv.models.DCGANGenerator", "api/stubs/deepinv.models.DRUNet", "api/stubs/deepinv.models.DeepImagePrior", "api/stubs/deepinv.models.Denoiser", "api/stubs/deepinv.models.DiffUNet", "api/stubs/deepinv.models.DnCNN", "api/stubs/deepinv.models.EPLLDenoiser", "api/stubs/deepinv.models.ESRGANDiscriminator", "api/stubs/deepinv.models.EquivariantDenoiser", "api/stubs/deepinv.models.GSDRUNet", "api/stubs/deepinv.models.ICNN", "api/stubs/deepinv.models.MedianFilter", "api/stubs/deepinv.models.MoDL", "api/stubs/deepinv.models.NCSNpp", "api/stubs/deepinv.models.PDNet_DualBlock", "api/stubs/deepinv.models.PDNet_PrimalBlock", "api/stubs/deepinv.models.PanNet", "api/stubs/deepinv.models.PatchGANDiscriminator", "api/stubs/deepinv.models.Reconstructor", "api/stubs/deepinv.models.Restormer", "api/stubs/deepinv.models.SCUNet", "api/stubs/deepinv.models.SwinIR", "api/stubs/deepinv.models.TGVDenoiser", "api/stubs/deepinv.models.TVDenoiser", "api/stubs/deepinv.models.TimeAgnosticNet", "api/stubs/deepinv.models.TimeAveragingNet", "api/stubs/deepinv.models.UNet", "api/stubs/deepinv.models.VarNet", "api/stubs/deepinv.models.WaveletDenoiser", "api/stubs/deepinv.models.WaveletDictDenoiser", "api/stubs/deepinv.models.complex.to_complex_denoiser", "api/stubs/deepinv.optim.AmplitudeLoss", "api/stubs/deepinv.optim.AmplitudeLossDistance", "api/stubs/deepinv.optim.BaseOptim", "api/stubs/deepinv.optim.Bregman", "api/stubs/deepinv.optim.BregmanL2", "api/stubs/deepinv.optim.Bregman_ICNN", "api/stubs/deepinv.optim.BurgEntropy", "api/stubs/deepinv.optim.DPIR", "api/stubs/deepinv.optim.DataFidelity", "api/stubs/deepinv.optim.Distance", "api/stubs/deepinv.optim.EPLL", "api/stubs/deepinv.optim.FixedPoint", "api/stubs/deepinv.optim.IndicatorL2", "api/stubs/deepinv.optim.IndicatorL2Distance", "api/stubs/deepinv.optim.L1", "api/stubs/deepinv.optim.L12Prior", "api/stubs/deepinv.optim.L1Distance", "api/stubs/deepinv.optim.L1Prior", "api/stubs/deepinv.optim.L2", "api/stubs/deepinv.optim.L2Distance", "api/stubs/deepinv.optim.LogPoissonLikelihood", "api/stubs/deepinv.optim.LogPoissonLikelihoodDistance", "api/stubs/deepinv.optim.NegEntropy", "api/stubs/deepinv.optim.OptimIterator", "api/stubs/deepinv.optim.PatchNR", "api/stubs/deepinv.optim.PatchPrior", "api/stubs/deepinv.optim.PnP", "api/stubs/deepinv.optim.PoissonLikelihood", "api/stubs/deepinv.optim.PoissonLikelihoodDistance", "api/stubs/deepinv.optim.Potential", "api/stubs/deepinv.optim.Prior", "api/stubs/deepinv.optim.RED", "api/stubs/deepinv.optim.ScorePrior", "api/stubs/deepinv.optim.StackedPhysicsDataFidelity", "api/stubs/deepinv.optim.TVPrior", "api/stubs/deepinv.optim.Tikhonov", "api/stubs/deepinv.optim.WaveletPrior", "api/stubs/deepinv.optim.ZeroDistance", "api/stubs/deepinv.optim.ZeroFidelity", "api/stubs/deepinv.optim.optim_builder", "api/stubs/deepinv.optim.optim_iterators.ADMMIteration", "api/stubs/deepinv.optim.optim_iterators.CPIteration", "api/stubs/deepinv.optim.optim_iterators.DRSIteration", "api/stubs/deepinv.optim.optim_iterators.FISTAIteration", "api/stubs/deepinv.optim.optim_iterators.GDIteration", "api/stubs/deepinv.optim.optim_iterators.HQSIteration", "api/stubs/deepinv.optim.optim_iterators.MDIteration", "api/stubs/deepinv.optim.optim_iterators.PGDIteration", "api/stubs/deepinv.optim.optim_iterators.SMIteration", "api/stubs/deepinv.optim.optim_iterators.fStep", "api/stubs/deepinv.optim.optim_iterators.gStep", "api/stubs/deepinv.optim.phase_retrieval.correct_global_phase", "api/stubs/deepinv.optim.phase_retrieval.spectral_methods", "api/stubs/deepinv.optim.utils.GaussianMixtureModel", "api/stubs/deepinv.optim.utils.bicgstab", "api/stubs/deepinv.optim.utils.conjugate_gradient", "api/stubs/deepinv.optim.utils.gradient_descent", "api/stubs/deepinv.optim.utils.least_squares", "api/stubs/deepinv.optim.utils.lsqr", "api/stubs/deepinv.optim.utils.minres", "api/stubs/deepinv.physics.Blur", "api/stubs/deepinv.physics.BlurFFT", "api/stubs/deepinv.physics.CompressedSensing", "api/stubs/deepinv.physics.CompressiveSpectralImaging", "api/stubs/deepinv.physics.Decolorize", "api/stubs/deepinv.physics.DecomposablePhysics", "api/stubs/deepinv.physics.Demosaicing", "api/stubs/deepinv.physics.Denoising", "api/stubs/deepinv.physics.Downsampling", "api/stubs/deepinv.physics.DynamicMRI", "api/stubs/deepinv.physics.GammaNoise", "api/stubs/deepinv.physics.GaussianNoise", "api/stubs/deepinv.physics.Haze", "api/stubs/deepinv.physics.HyperSpectralUnmixing", "api/stubs/deepinv.physics.Inpainting", "api/stubs/deepinv.physics.LinearPhysics", "api/stubs/deepinv.physics.LogPoissonNoise", "api/stubs/deepinv.physics.MRI", "api/stubs/deepinv.physics.MRIMixin", "api/stubs/deepinv.physics.MultiCoilMRI", "api/stubs/deepinv.physics.NoiseModel", "api/stubs/deepinv.physics.Pansharpen", "api/stubs/deepinv.physics.PhaseRetrieval", "api/stubs/deepinv.physics.Physics", "api/stubs/deepinv.physics.PoissonGaussianNoise", "api/stubs/deepinv.physics.PoissonNoise", "api/stubs/deepinv.physics.Ptychography", "api/stubs/deepinv.physics.PtychographyLinearOperator", "api/stubs/deepinv.physics.RadioInterferometry", "api/stubs/deepinv.physics.RandomPhaseRetrieval", "api/stubs/deepinv.physics.SequentialMRI", "api/stubs/deepinv.physics.SinglePhotonLidar", "api/stubs/deepinv.physics.SinglePixelCamera", "api/stubs/deepinv.physics.SpaceVaryingBlur", "api/stubs/deepinv.physics.StackedLinearPhysics", "api/stubs/deepinv.physics.StackedPhysics", "api/stubs/deepinv.physics.StructuredRandom", "api/stubs/deepinv.physics.StructuredRandomPhaseRetrieval", "api/stubs/deepinv.physics.TimeMixin", "api/stubs/deepinv.physics.Tomography", "api/stubs/deepinv.physics.UniformGaussianNoise", "api/stubs/deepinv.physics.UniformNoise", "api/stubs/deepinv.physics.adjoint_function", "api/stubs/deepinv.physics.blur.bicubic_filter", "api/stubs/deepinv.physics.blur.bilinear_filter", "api/stubs/deepinv.physics.blur.gaussian_blur", "api/stubs/deepinv.physics.blur.sinc_filter", "api/stubs/deepinv.physics.functional.IRadon", "api/stubs/deepinv.physics.functional.Radon", "api/stubs/deepinv.physics.functional.conv2d", "api/stubs/deepinv.physics.functional.conv2d_fft", "api/stubs/deepinv.physics.functional.conv3d_fft", "api/stubs/deepinv.physics.functional.conv_transpose2d", "api/stubs/deepinv.physics.functional.conv_transpose2d_fft", "api/stubs/deepinv.physics.functional.conv_transpose3d_fft", "api/stubs/deepinv.physics.functional.dst1", "api/stubs/deepinv.physics.functional.histogram", "api/stubs/deepinv.physics.functional.histogramdd", "api/stubs/deepinv.physics.functional.multiplier", "api/stubs/deepinv.physics.functional.multiplier_adjoint", "api/stubs/deepinv.physics.functional.product_convolution2d", "api/stubs/deepinv.physics.generator.Artifact2ArtifactSplittingMaskGenerator", "api/stubs/deepinv.physics.generator.BaseMaskGenerator", "api/stubs/deepinv.physics.generator.BernoulliSplittingMaskGenerator", "api/stubs/deepinv.physics.generator.ConfocalBlurGenerator3D", "api/stubs/deepinv.physics.generator.DiffractionBlurGenerator", "api/stubs/deepinv.physics.generator.DiffractionBlurGenerator3D", "api/stubs/deepinv.physics.generator.DownsamplingGenerator", "api/stubs/deepinv.physics.generator.EquispacedMaskGenerator", "api/stubs/deepinv.physics.generator.GainGenerator", "api/stubs/deepinv.physics.generator.GaussianMaskGenerator", "api/stubs/deepinv.physics.generator.GaussianSplittingMaskGenerator", "api/stubs/deepinv.physics.generator.GeneratorMixture", "api/stubs/deepinv.physics.generator.MotionBlurGenerator", "api/stubs/deepinv.physics.generator.PSFGenerator", "api/stubs/deepinv.physics.generator.Phase2PhaseSplittingMaskGenerator", "api/stubs/deepinv.physics.generator.PhysicsGenerator", "api/stubs/deepinv.physics.generator.ProductConvolutionBlurGenerator", "api/stubs/deepinv.physics.generator.RandomMaskGenerator", "api/stubs/deepinv.physics.generator.SigmaGenerator", "api/stubs/deepinv.physics.phase_retrieval.build_probe", "api/stubs/deepinv.physics.phase_retrieval.generate_shifts", "api/stubs/deepinv.physics.stack", "api/stubs/deepinv.sampling.BaseSDE", "api/stubs/deepinv.sampling.BaseSDESolver", "api/stubs/deepinv.sampling.DDRM", "api/stubs/deepinv.sampling.DPS", "api/stubs/deepinv.sampling.DPSDataFidelity", "api/stubs/deepinv.sampling.DiffPIR", "api/stubs/deepinv.sampling.DiffusionSDE", "api/stubs/deepinv.sampling.DiffusionSampler", "api/stubs/deepinv.sampling.EulerSolver", "api/stubs/deepinv.sampling.HeunSolver", "api/stubs/deepinv.sampling.MonteCarlo", "api/stubs/deepinv.sampling.NoisyDataFidelity", "api/stubs/deepinv.sampling.PosteriorDiffusion", "api/stubs/deepinv.sampling.SDEOutput", "api/stubs/deepinv.sampling.SKRock", "api/stubs/deepinv.sampling.ULA", "api/stubs/deepinv.sampling.VarianceExplodingDiffusion", "api/stubs/deepinv.sampling.VariancePreservingDiffusion", "api/stubs/deepinv.test", "api/stubs/deepinv.train", "api/stubs/deepinv.training.AdversarialOptimizer", "api/stubs/deepinv.training.AdversarialTrainer", "api/stubs/deepinv.transform.CPABDiffeomorphism", "api/stubs/deepinv.transform.Homography", "api/stubs/deepinv.transform.Reflect", "api/stubs/deepinv.transform.Rotate", "api/stubs/deepinv.transform.Scale", "api/stubs/deepinv.transform.Shift", "api/stubs/deepinv.transform.ShiftTime", "api/stubs/deepinv.transform.Transform", "api/stubs/deepinv.transform.projective.Affine", "api/stubs/deepinv.transform.projective.Euclidean", "api/stubs/deepinv.transform.projective.PanTiltRotate", "api/stubs/deepinv.transform.projective.Similarity", "api/stubs/deepinv.unfolded.BaseDEQ", "api/stubs/deepinv.unfolded.BaseUnfold", "api/stubs/deepinv.unfolded.DEQ_builder", "api/stubs/deepinv.unfolded.unfolded_builder", "api/stubs/deepinv.utils.AverageMeter", "api/stubs/deepinv.utils.ProgressMeter", "api/stubs/deepinv.utils.TensorList", "api/stubs/deepinv.utils.dirac_like", "api/stubs/deepinv.utils.get_data_home", "api/stubs/deepinv.utils.get_degradation_url", "api/stubs/deepinv.utils.get_freer_gpu", "api/stubs/deepinv.utils.get_image_url", "api/stubs/deepinv.utils.get_timestamp", "api/stubs/deepinv.utils.load_dataset", "api/stubs/deepinv.utils.load_degradation", "api/stubs/deepinv.utils.load_image", "api/stubs/deepinv.utils.load_url_image", "api/stubs/deepinv.utils.ones_like", "api/stubs/deepinv.utils.plot", "api/stubs/deepinv.utils.plot_curves", "api/stubs/deepinv.utils.plot_inset", "api/stubs/deepinv.utils.plot_ortho3D", "api/stubs/deepinv.utils.plot_parameters", "api/stubs/deepinv.utils.plot_videos", "api/stubs/deepinv.utils.rand_like", "api/stubs/deepinv.utils.randn_like", "api/stubs/deepinv.utils.save_videos", "api/stubs/deepinv.utils.zeros_like", "auto_examples/advanced/demo_ri_basic", "auto_examples/advanced/index", "auto_examples/advanced/sg_execution_times", "auto_examples/adversarial-learning/demo_gan_imaging", "auto_examples/adversarial-learning/index", "auto_examples/adversarial-learning/sg_execution_times", "auto_examples/basics/demo_blur_tour", "auto_examples/basics/demo_custom_prior", "auto_examples/basics/demo_dataset", "auto_examples/basics/demo_dip", "auto_examples/basics/demo_hf_dataset", "auto_examples/basics/demo_lidar", "auto_examples/basics/demo_loading", "auto_examples/basics/demo_microscopy_3d", "auto_examples/basics/demo_phase_retrieval", "auto_examples/basics/demo_physics", "auto_examples/basics/demo_physics_tour", "auto_examples/basics/demo_ptychography", "auto_examples/basics/demo_remote_sensing", "auto_examples/basics/demo_tour_mri", "auto_examples/basics/demo_train_inpainting", "auto_examples/basics/demo_transforms", "auto_examples/basics/index", "auto_examples/basics/sg_execution_times", "auto_examples/index", "auto_examples/optimization/demo_3D_wavelets", "auto_examples/optimization/demo_TV_minimisation", "auto_examples/optimization/demo_wavelet_prior", "auto_examples/optimization/index", "auto_examples/optimization/sg_execution_times", "auto_examples/patch-priors/demo_epll", "auto_examples/patch-priors/demo_patch_priors_CT", "auto_examples/patch-priors/index", "auto_examples/patch-priors/sg_execution_times", "auto_examples/plug-and-play/demo_PnP_DPIR_deblur", "auto_examples/plug-and-play/demo_PnP_custom_optim", "auto_examples/plug-and-play/demo_PnP_mirror_descent", "auto_examples/plug-and-play/demo_RED_GSPnP_SR", "auto_examples/plug-and-play/demo_vanilla_PnP", "auto_examples/plug-and-play/index", "auto_examples/plug-and-play/sg_execution_times", "auto_examples/sampling/demo_custom_kernel", "auto_examples/sampling/demo_ddrm", "auto_examples/sampling/demo_diffpir", "auto_examples/sampling/demo_diffusion_sde", "auto_examples/sampling/demo_dps", "auto_examples/sampling/demo_sampling", "auto_examples/sampling/index", "auto_examples/sampling/sg_execution_times", "auto_examples/self-supervised-learning/demo_artifact2artifact", "auto_examples/self-supervised-learning/demo_ei_transforms", "auto_examples/self-supervised-learning/demo_equivariant_imaging", "auto_examples/self-supervised-learning/demo_multioperator_imaging", "auto_examples/self-supervised-learning/demo_n2n_denoising", "auto_examples/self-supervised-learning/demo_r2r_denoising", "auto_examples/self-supervised-learning/demo_splitting_loss", "auto_examples/self-supervised-learning/demo_sure_denoising", "auto_examples/self-supervised-learning/demo_unsure", "auto_examples/self-supervised-learning/index", "auto_examples/self-supervised-learning/sg_execution_times", "auto_examples/sg_execution_times", "auto_examples/unfolded/demo_DEQ", "auto_examples/unfolded/demo_LISTA", "auto_examples/unfolded/demo_custom_prior_unfolded", "auto_examples/unfolded/demo_learned_primal_dual", "auto_examples/unfolded/demo_unfolded_constrained_LISTA", "auto_examples/unfolded/demo_vanilla_unfolded", "auto_examples/unfolded/index", "auto_examples/unfolded/sg_execution_times", "community", "contributing", "finding_help", "index", "quickstart", "sg_execution_times", "user_guide", "user_guide/other/notation", "user_guide/other/utils", "user_guide/physics/defining", "user_guide/physics/functional", "user_guide/physics/intro", "user_guide/physics/physics", "user_guide/reconstruction/adversarial", "user_guide/reconstruction/artifact", "user_guide/reconstruction/denoisers", "user_guide/reconstruction/introduction", "user_guide/reconstruction/iterative", "user_guide/reconstruction/optimization", "user_guide/reconstruction/sampling", "user_guide/reconstruction/specific", "user_guide/reconstruction/unfolded", "user_guide/reconstruction/weights", "user_guide/training/datasets", "user_guide/training/loss", "user_guide/training/metric", "user_guide/training/multigpu", "user_guide/training/trainer", "user_guide/training/transforms"], "envversion": {"sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1}, "filenames": ["API.rst", "api/deepinv.datasets.rst", "api/deepinv.loss.rst", "api/deepinv.metric.rst", "api/deepinv.models.rst", "api/deepinv.optim.rst", "api/deepinv.physics.rst", "api/deepinv.sampling.rst", "api/deepinv.training.rst", "api/deepinv.transform.rst", "api/deepinv.unfolded.rst", "api/deepinv.utils.rst", "api/stubs/deepinv.Trainer.rst", "api/stubs/deepinv.datasets.CBSD68.rst", "api/stubs/deepinv.datasets.CMRxReconSliceDataset.rst", "api/stubs/deepinv.datasets.DIV2K.rst", "api/stubs/deepinv.datasets.FMD.rst", "api/stubs/deepinv.datasets.FastMRISliceDataset.rst", "api/stubs/deepinv.datasets.Flickr2kHR.rst", "api/stubs/deepinv.datasets.HDF5Dataset.rst", "api/stubs/deepinv.datasets.Kohler.rst", "api/stubs/deepinv.datasets.LidcIdriSliceDataset.rst", "api/stubs/deepinv.datasets.LsdirHR.rst", "api/stubs/deepinv.datasets.NBUDataset.rst", "api/stubs/deepinv.datasets.PatchDataset.rst", "api/stubs/deepinv.datasets.Set14HR.rst", "api/stubs/deepinv.datasets.SimpleFastMRISliceDataset.rst", "api/stubs/deepinv.datasets.Urban100HR.rst", "api/stubs/deepinv.datasets.generate_dataset.rst", "api/stubs/deepinv.datasets.utils.PlaceholderDataset.rst", "api/stubs/deepinv.datasets.utils.Rescale.rst", "api/stubs/deepinv.datasets.utils.ToComplex.rst", "api/stubs/deepinv.loss.Artifact2ArtifactLoss.rst", "api/stubs/deepinv.loss.BaseLossScheduler.rst", "api/stubs/deepinv.loss.EILoss.rst", "api/stubs/deepinv.loss.FNEJacobianSpectralNorm.rst", "api/stubs/deepinv.loss.InterleavedEpochLossScheduler.rst", "api/stubs/deepinv.loss.InterleavedLossScheduler.rst", "api/stubs/deepinv.loss.JacobianSpectralNorm.rst", "api/stubs/deepinv.loss.Loss.rst", "api/stubs/deepinv.loss.MCLoss.rst", "api/stubs/deepinv.loss.MOEILoss.rst", "api/stubs/deepinv.loss.MOILoss.rst", "api/stubs/deepinv.loss.Neighbor2Neighbor.rst", "api/stubs/deepinv.loss.Phase2PhaseLoss.rst", "api/stubs/deepinv.loss.R2RLoss.rst", "api/stubs/deepinv.loss.RandomLossScheduler.rst", "api/stubs/deepinv.loss.ScoreLoss.rst", "api/stubs/deepinv.loss.SplittingLoss.rst", "api/stubs/deepinv.loss.StackedPhysicsLoss.rst", "api/stubs/deepinv.loss.StepLossScheduler.rst", "api/stubs/deepinv.loss.SupLoss.rst", "api/stubs/deepinv.loss.SureGaussianLoss.rst", "api/stubs/deepinv.loss.SurePGLoss.rst", "api/stubs/deepinv.loss.SurePoissonLoss.rst", "api/stubs/deepinv.loss.TVLoss.rst", "api/stubs/deepinv.loss.adversarial.DiscriminatorLoss.rst", "api/stubs/deepinv.loss.adversarial.DiscriminatorMetric.rst", "api/stubs/deepinv.loss.adversarial.GeneratorLoss.rst", "api/stubs/deepinv.loss.adversarial.SupAdversarialDiscriminatorLoss.rst", "api/stubs/deepinv.loss.adversarial.SupAdversarialGeneratorLoss.rst", "api/stubs/deepinv.loss.adversarial.UAIRGeneratorLoss.rst", "api/stubs/deepinv.loss.adversarial.UnsupAdversarialDiscriminatorLoss.rst", "api/stubs/deepinv.loss.adversarial.UnsupAdversarialGeneratorLoss.rst", "api/stubs/deepinv.loss.metric.ERGAS.rst", "api/stubs/deepinv.loss.metric.L1L2.rst", "api/stubs/deepinv.loss.metric.LPIPS.rst", "api/stubs/deepinv.loss.metric.LpNorm.rst", "api/stubs/deepinv.loss.metric.MAE.rst", "api/stubs/deepinv.loss.metric.MSE.rst", "api/stubs/deepinv.loss.metric.Metric.rst", "api/stubs/deepinv.loss.metric.NIQE.rst", "api/stubs/deepinv.loss.metric.NMSE.rst", "api/stubs/deepinv.loss.metric.PSNR.rst", "api/stubs/deepinv.loss.metric.QNR.rst", "api/stubs/deepinv.loss.metric.SSIM.rst", "api/stubs/deepinv.loss.metric.SpectralAngleMapper.rst", "api/stubs/deepinv.models.ADMUNet.rst", "api/stubs/deepinv.models.ArtifactRemoval.rst", "api/stubs/deepinv.models.AutoEncoder.rst", "api/stubs/deepinv.models.BM3D.rst", "api/stubs/deepinv.models.CSGMGenerator.rst", "api/stubs/deepinv.models.ConvDecoder.rst", "api/stubs/deepinv.models.DCGANDiscriminator.rst", "api/stubs/deepinv.models.DCGANGenerator.rst", "api/stubs/deepinv.models.DRUNet.rst", "api/stubs/deepinv.models.DeepImagePrior.rst", "api/stubs/deepinv.models.Denoiser.rst", "api/stubs/deepinv.models.DiffUNet.rst", "api/stubs/deepinv.models.DnCNN.rst", "api/stubs/deepinv.models.EPLLDenoiser.rst", "api/stubs/deepinv.models.ESRGANDiscriminator.rst", "api/stubs/deepinv.models.EquivariantDenoiser.rst", "api/stubs/deepinv.models.GSDRUNet.rst", "api/stubs/deepinv.models.ICNN.rst", "api/stubs/deepinv.models.MedianFilter.rst", "api/stubs/deepinv.models.MoDL.rst", "api/stubs/deepinv.models.NCSNpp.rst", "api/stubs/deepinv.models.PDNet_DualBlock.rst", "api/stubs/deepinv.models.PDNet_PrimalBlock.rst", "api/stubs/deepinv.models.PanNet.rst", "api/stubs/deepinv.models.PatchGANDiscriminator.rst", "api/stubs/deepinv.models.Reconstructor.rst", "api/stubs/deepinv.models.Restormer.rst", "api/stubs/deepinv.models.SCUNet.rst", "api/stubs/deepinv.models.SwinIR.rst", "api/stubs/deepinv.models.TGVDenoiser.rst", "api/stubs/deepinv.models.TVDenoiser.rst", "api/stubs/deepinv.models.TimeAgnosticNet.rst", "api/stubs/deepinv.models.TimeAveragingNet.rst", "api/stubs/deepinv.models.UNet.rst", "api/stubs/deepinv.models.VarNet.rst", "api/stubs/deepinv.models.WaveletDenoiser.rst", "api/stubs/deepinv.models.WaveletDictDenoiser.rst", "api/stubs/deepinv.models.complex.to_complex_denoiser.rst", "api/stubs/deepinv.optim.AmplitudeLoss.rst", "api/stubs/deepinv.optim.AmplitudeLossDistance.rst", "api/stubs/deepinv.optim.BaseOptim.rst", "api/stubs/deepinv.optim.Bregman.rst", "api/stubs/deepinv.optim.BregmanL2.rst", "api/stubs/deepinv.optim.Bregman_ICNN.rst", "api/stubs/deepinv.optim.BurgEntropy.rst", "api/stubs/deepinv.optim.DPIR.rst", "api/stubs/deepinv.optim.DataFidelity.rst", "api/stubs/deepinv.optim.Distance.rst", "api/stubs/deepinv.optim.EPLL.rst", "api/stubs/deepinv.optim.FixedPoint.rst", "api/stubs/deepinv.optim.IndicatorL2.rst", "api/stubs/deepinv.optim.IndicatorL2Distance.rst", "api/stubs/deepinv.optim.L1.rst", "api/stubs/deepinv.optim.L12Prior.rst", "api/stubs/deepinv.optim.L1Distance.rst", "api/stubs/deepinv.optim.L1Prior.rst", "api/stubs/deepinv.optim.L2.rst", "api/stubs/deepinv.optim.L2Distance.rst", "api/stubs/deepinv.optim.LogPoissonLikelihood.rst", "api/stubs/deepinv.optim.LogPoissonLikelihoodDistance.rst", "api/stubs/deepinv.optim.NegEntropy.rst", "api/stubs/deepinv.optim.OptimIterator.rst", "api/stubs/deepinv.optim.PatchNR.rst", "api/stubs/deepinv.optim.PatchPrior.rst", "api/stubs/deepinv.optim.PnP.rst", "api/stubs/deepinv.optim.PoissonLikelihood.rst", "api/stubs/deepinv.optim.PoissonLikelihoodDistance.rst", "api/stubs/deepinv.optim.Potential.rst", "api/stubs/deepinv.optim.Prior.rst", "api/stubs/deepinv.optim.RED.rst", "api/stubs/deepinv.optim.ScorePrior.rst", "api/stubs/deepinv.optim.StackedPhysicsDataFidelity.rst", "api/stubs/deepinv.optim.TVPrior.rst", "api/stubs/deepinv.optim.Tikhonov.rst", "api/stubs/deepinv.optim.WaveletPrior.rst", "api/stubs/deepinv.optim.ZeroDistance.rst", "api/stubs/deepinv.optim.ZeroFidelity.rst", "api/stubs/deepinv.optim.optim_builder.rst", "api/stubs/deepinv.optim.optim_iterators.ADMMIteration.rst", "api/stubs/deepinv.optim.optim_iterators.CPIteration.rst", "api/stubs/deepinv.optim.optim_iterators.DRSIteration.rst", "api/stubs/deepinv.optim.optim_iterators.FISTAIteration.rst", "api/stubs/deepinv.optim.optim_iterators.GDIteration.rst", "api/stubs/deepinv.optim.optim_iterators.HQSIteration.rst", "api/stubs/deepinv.optim.optim_iterators.MDIteration.rst", "api/stubs/deepinv.optim.optim_iterators.PGDIteration.rst", "api/stubs/deepinv.optim.optim_iterators.SMIteration.rst", "api/stubs/deepinv.optim.optim_iterators.fStep.rst", "api/stubs/deepinv.optim.optim_iterators.gStep.rst", "api/stubs/deepinv.optim.phase_retrieval.correct_global_phase.rst", "api/stubs/deepinv.optim.phase_retrieval.spectral_methods.rst", "api/stubs/deepinv.optim.utils.GaussianMixtureModel.rst", "api/stubs/deepinv.optim.utils.bicgstab.rst", "api/stubs/deepinv.optim.utils.conjugate_gradient.rst", "api/stubs/deepinv.optim.utils.gradient_descent.rst", "api/stubs/deepinv.optim.utils.least_squares.rst", "api/stubs/deepinv.optim.utils.lsqr.rst", "api/stubs/deepinv.optim.utils.minres.rst", "api/stubs/deepinv.physics.Blur.rst", "api/stubs/deepinv.physics.BlurFFT.rst", "api/stubs/deepinv.physics.CompressedSensing.rst", "api/stubs/deepinv.physics.CompressiveSpectralImaging.rst", "api/stubs/deepinv.physics.Decolorize.rst", "api/stubs/deepinv.physics.DecomposablePhysics.rst", "api/stubs/deepinv.physics.Demosaicing.rst", "api/stubs/deepinv.physics.Denoising.rst", "api/stubs/deepinv.physics.Downsampling.rst", "api/stubs/deepinv.physics.DynamicMRI.rst", "api/stubs/deepinv.physics.GammaNoise.rst", "api/stubs/deepinv.physics.GaussianNoise.rst", "api/stubs/deepinv.physics.Haze.rst", "api/stubs/deepinv.physics.HyperSpectralUnmixing.rst", "api/stubs/deepinv.physics.Inpainting.rst", "api/stubs/deepinv.physics.LinearPhysics.rst", "api/stubs/deepinv.physics.LogPoissonNoise.rst", "api/stubs/deepinv.physics.MRI.rst", "api/stubs/deepinv.physics.MRIMixin.rst", "api/stubs/deepinv.physics.MultiCoilMRI.rst", "api/stubs/deepinv.physics.NoiseModel.rst", "api/stubs/deepinv.physics.Pansharpen.rst", "api/stubs/deepinv.physics.PhaseRetrieval.rst", "api/stubs/deepinv.physics.Physics.rst", "api/stubs/deepinv.physics.PoissonGaussianNoise.rst", "api/stubs/deepinv.physics.PoissonNoise.rst", "api/stubs/deepinv.physics.Ptychography.rst", "api/stubs/deepinv.physics.PtychographyLinearOperator.rst", "api/stubs/deepinv.physics.RadioInterferometry.rst", "api/stubs/deepinv.physics.RandomPhaseRetrieval.rst", "api/stubs/deepinv.physics.SequentialMRI.rst", "api/stubs/deepinv.physics.SinglePhotonLidar.rst", "api/stubs/deepinv.physics.SinglePixelCamera.rst", "api/stubs/deepinv.physics.SpaceVaryingBlur.rst", "api/stubs/deepinv.physics.StackedLinearPhysics.rst", "api/stubs/deepinv.physics.StackedPhysics.rst", "api/stubs/deepinv.physics.StructuredRandom.rst", "api/stubs/deepinv.physics.StructuredRandomPhaseRetrieval.rst", "api/stubs/deepinv.physics.TimeMixin.rst", "api/stubs/deepinv.physics.Tomography.rst", "api/stubs/deepinv.physics.UniformGaussianNoise.rst", "api/stubs/deepinv.physics.UniformNoise.rst", "api/stubs/deepinv.physics.adjoint_function.rst", "api/stubs/deepinv.physics.blur.bicubic_filter.rst", "api/stubs/deepinv.physics.blur.bilinear_filter.rst", "api/stubs/deepinv.physics.blur.gaussian_blur.rst", "api/stubs/deepinv.physics.blur.sinc_filter.rst", "api/stubs/deepinv.physics.functional.IRadon.rst", "api/stubs/deepinv.physics.functional.Radon.rst", "api/stubs/deepinv.physics.functional.conv2d.rst", "api/stubs/deepinv.physics.functional.conv2d_fft.rst", "api/stubs/deepinv.physics.functional.conv3d_fft.rst", "api/stubs/deepinv.physics.functional.conv_transpose2d.rst", "api/stubs/deepinv.physics.functional.conv_transpose2d_fft.rst", "api/stubs/deepinv.physics.functional.conv_transpose3d_fft.rst", "api/stubs/deepinv.physics.functional.dst1.rst", "api/stubs/deepinv.physics.functional.histogram.rst", "api/stubs/deepinv.physics.functional.histogramdd.rst", "api/stubs/deepinv.physics.functional.multiplier.rst", "api/stubs/deepinv.physics.functional.multiplier_adjoint.rst", "api/stubs/deepinv.physics.functional.product_convolution2d.rst", "api/stubs/deepinv.physics.generator.Artifact2ArtifactSplittingMaskGenerator.rst", "api/stubs/deepinv.physics.generator.BaseMaskGenerator.rst", "api/stubs/deepinv.physics.generator.BernoulliSplittingMaskGenerator.rst", "api/stubs/deepinv.physics.generator.ConfocalBlurGenerator3D.rst", "api/stubs/deepinv.physics.generator.DiffractionBlurGenerator.rst", "api/stubs/deepinv.physics.generator.DiffractionBlurGenerator3D.rst", "api/stubs/deepinv.physics.generator.DownsamplingGenerator.rst", "api/stubs/deepinv.physics.generator.EquispacedMaskGenerator.rst", "api/stubs/deepinv.physics.generator.GainGenerator.rst", "api/stubs/deepinv.physics.generator.GaussianMaskGenerator.rst", "api/stubs/deepinv.physics.generator.GaussianSplittingMaskGenerator.rst", "api/stubs/deepinv.physics.generator.GeneratorMixture.rst", "api/stubs/deepinv.physics.generator.MotionBlurGenerator.rst", "api/stubs/deepinv.physics.generator.PSFGenerator.rst", "api/stubs/deepinv.physics.generator.Phase2PhaseSplittingMaskGenerator.rst", "api/stubs/deepinv.physics.generator.PhysicsGenerator.rst", "api/stubs/deepinv.physics.generator.ProductConvolutionBlurGenerator.rst", "api/stubs/deepinv.physics.generator.RandomMaskGenerator.rst", "api/stubs/deepinv.physics.generator.SigmaGenerator.rst", "api/stubs/deepinv.physics.phase_retrieval.build_probe.rst", "api/stubs/deepinv.physics.phase_retrieval.generate_shifts.rst", "api/stubs/deepinv.physics.stack.rst", "api/stubs/deepinv.sampling.BaseSDE.rst", "api/stubs/deepinv.sampling.BaseSDESolver.rst", "api/stubs/deepinv.sampling.DDRM.rst", "api/stubs/deepinv.sampling.DPS.rst", "api/stubs/deepinv.sampling.DPSDataFidelity.rst", "api/stubs/deepinv.sampling.DiffPIR.rst", "api/stubs/deepinv.sampling.DiffusionSDE.rst", "api/stubs/deepinv.sampling.DiffusionSampler.rst", "api/stubs/deepinv.sampling.EulerSolver.rst", "api/stubs/deepinv.sampling.HeunSolver.rst", "api/stubs/deepinv.sampling.MonteCarlo.rst", "api/stubs/deepinv.sampling.NoisyDataFidelity.rst", "api/stubs/deepinv.sampling.PosteriorDiffusion.rst", "api/stubs/deepinv.sampling.SDEOutput.rst", "api/stubs/deepinv.sampling.SKRock.rst", "api/stubs/deepinv.sampling.ULA.rst", "api/stubs/deepinv.sampling.VarianceExplodingDiffusion.rst", "api/stubs/deepinv.sampling.VariancePreservingDiffusion.rst", "api/stubs/deepinv.test.rst", "api/stubs/deepinv.train.rst", "api/stubs/deepinv.training.AdversarialOptimizer.rst", "api/stubs/deepinv.training.AdversarialTrainer.rst", "api/stubs/deepinv.transform.CPABDiffeomorphism.rst", "api/stubs/deepinv.transform.Homography.rst", "api/stubs/deepinv.transform.Reflect.rst", "api/stubs/deepinv.transform.Rotate.rst", "api/stubs/deepinv.transform.Scale.rst", "api/stubs/deepinv.transform.Shift.rst", "api/stubs/deepinv.transform.ShiftTime.rst", "api/stubs/deepinv.transform.Transform.rst", "api/stubs/deepinv.transform.projective.Affine.rst", "api/stubs/deepinv.transform.projective.Euclidean.rst", "api/stubs/deepinv.transform.projective.PanTiltRotate.rst", "api/stubs/deepinv.transform.projective.Similarity.rst", "api/stubs/deepinv.unfolded.BaseDEQ.rst", "api/stubs/deepinv.unfolded.BaseUnfold.rst", "api/stubs/deepinv.unfolded.DEQ_builder.rst", "api/stubs/deepinv.unfolded.unfolded_builder.rst", "api/stubs/deepinv.utils.AverageMeter.rst", "api/stubs/deepinv.utils.ProgressMeter.rst", "api/stubs/deepinv.utils.TensorList.rst", "api/stubs/deepinv.utils.dirac_like.rst", "api/stubs/deepinv.utils.get_data_home.rst", "api/stubs/deepinv.utils.get_degradation_url.rst", "api/stubs/deepinv.utils.get_freer_gpu.rst", "api/stubs/deepinv.utils.get_image_url.rst", "api/stubs/deepinv.utils.get_timestamp.rst", "api/stubs/deepinv.utils.load_dataset.rst", "api/stubs/deepinv.utils.load_degradation.rst", "api/stubs/deepinv.utils.load_image.rst", "api/stubs/deepinv.utils.load_url_image.rst", "api/stubs/deepinv.utils.ones_like.rst", "api/stubs/deepinv.utils.plot.rst", "api/stubs/deepinv.utils.plot_curves.rst", "api/stubs/deepinv.utils.plot_inset.rst", "api/stubs/deepinv.utils.plot_ortho3D.rst", "api/stubs/deepinv.utils.plot_parameters.rst", "api/stubs/deepinv.utils.plot_videos.rst", "api/stubs/deepinv.utils.rand_like.rst", "api/stubs/deepinv.utils.randn_like.rst", "api/stubs/deepinv.utils.save_videos.rst", "api/stubs/deepinv.utils.zeros_like.rst", "auto_examples/advanced/demo_ri_basic.rst", "auto_examples/advanced/index.rst", "auto_examples/advanced/sg_execution_times.rst", "auto_examples/adversarial-learning/demo_gan_imaging.rst", "auto_examples/adversarial-learning/index.rst", "auto_examples/adversarial-learning/sg_execution_times.rst", "auto_examples/basics/demo_blur_tour.rst", "auto_examples/basics/demo_custom_prior.rst", "auto_examples/basics/demo_dataset.rst", "auto_examples/basics/demo_dip.rst", "auto_examples/basics/demo_hf_dataset.rst", "auto_examples/basics/demo_lidar.rst", "auto_examples/basics/demo_loading.rst", "auto_examples/basics/demo_microscopy_3d.rst", "auto_examples/basics/demo_phase_retrieval.rst", "auto_examples/basics/demo_physics.rst", "auto_examples/basics/demo_physics_tour.rst", "auto_examples/basics/demo_ptychography.rst", "auto_examples/basics/demo_remote_sensing.rst", "auto_examples/basics/demo_tour_mri.rst", "auto_examples/basics/demo_train_inpainting.rst", "auto_examples/basics/demo_transforms.rst", "auto_examples/basics/index.rst", "auto_examples/basics/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/optimization/demo_3D_wavelets.rst", "auto_examples/optimization/demo_TV_minimisation.rst", "auto_examples/optimization/demo_wavelet_prior.rst", "auto_examples/optimization/index.rst", "auto_examples/optimization/sg_execution_times.rst", "auto_examples/patch-priors/demo_epll.rst", "auto_examples/patch-priors/demo_patch_priors_CT.rst", "auto_examples/patch-priors/index.rst", "auto_examples/patch-priors/sg_execution_times.rst", "auto_examples/plug-and-play/demo_PnP_DPIR_deblur.rst", "auto_examples/plug-and-play/demo_PnP_custom_optim.rst", "auto_examples/plug-and-play/demo_PnP_mirror_descent.rst", "auto_examples/plug-and-play/demo_RED_GSPnP_SR.rst", "auto_examples/plug-and-play/demo_vanilla_PnP.rst", "auto_examples/plug-and-play/index.rst", "auto_examples/plug-and-play/sg_execution_times.rst", "auto_examples/sampling/demo_custom_kernel.rst", "auto_examples/sampling/demo_ddrm.rst", "auto_examples/sampling/demo_diffpir.rst", "auto_examples/sampling/demo_diffusion_sde.rst", "auto_examples/sampling/demo_dps.rst", "auto_examples/sampling/demo_sampling.rst", "auto_examples/sampling/index.rst", "auto_examples/sampling/sg_execution_times.rst", "auto_examples/self-supervised-learning/demo_artifact2artifact.rst", "auto_examples/self-supervised-learning/demo_ei_transforms.rst", "auto_examples/self-supervised-learning/demo_equivariant_imaging.rst", "auto_examples/self-supervised-learning/demo_multioperator_imaging.rst", "auto_examples/self-supervised-learning/demo_n2n_denoising.rst", "auto_examples/self-supervised-learning/demo_r2r_denoising.rst", "auto_examples/self-supervised-learning/demo_splitting_loss.rst", "auto_examples/self-supervised-learning/demo_sure_denoising.rst", "auto_examples/self-supervised-learning/demo_unsure.rst", "auto_examples/self-supervised-learning/index.rst", "auto_examples/self-supervised-learning/sg_execution_times.rst", "auto_examples/sg_execution_times.rst", "auto_examples/unfolded/demo_DEQ.rst", "auto_examples/unfolded/demo_LISTA.rst", "auto_examples/unfolded/demo_custom_prior_unfolded.rst", "auto_examples/unfolded/demo_learned_primal_dual.rst", "auto_examples/unfolded/demo_unfolded_constrained_LISTA.rst", "auto_examples/unfolded/demo_vanilla_unfolded.rst", "auto_examples/unfolded/index.rst", "auto_examples/unfolded/sg_execution_times.rst", "community.rst", "contributing.rst", "finding_help.rst", "index.rst", "quickstart.rst", "sg_execution_times.rst", "user_guide.rst", "user_guide/other/notation.rst", "user_guide/other/utils.rst", "user_guide/physics/defining.rst", "user_guide/physics/functional.rst", "user_guide/physics/intro.rst", "user_guide/physics/physics.rst", "user_guide/reconstruction/adversarial.rst", "user_guide/reconstruction/artifact.rst", "user_guide/reconstruction/denoisers.rst", "user_guide/reconstruction/introduction.rst", "user_guide/reconstruction/iterative.rst", "user_guide/reconstruction/optimization.rst", "user_guide/reconstruction/sampling.rst", "user_guide/reconstruction/specific.rst", "user_guide/reconstruction/unfolded.rst", "user_guide/reconstruction/weights.rst", "user_guide/training/datasets.rst", "user_guide/training/loss.rst", "user_guide/training/metric.rst", "user_guide/training/multigpu.rst", "user_guide/training/trainer.rst", "user_guide/training/transforms.rst"], "indexentries": {"__add__() (deepinv.loss.metric.metric method)": [[70, "deepinv.loss.metric.Metric.__add__", false]], "__add__() (deepinv.physics.gaussiannoise method)": [[186, "deepinv.physics.GaussianNoise.__add__", false]], "__add__() (deepinv.physics.generator.physicsgenerator method)": [[251, "deepinv.physics.generator.PhysicsGenerator.__add__", false]], "__add__() (deepinv.transform.transform method)": [[287, "deepinv.transform.Transform.__add__", false]], "__mul__() (deepinv.physics.gaussiannoise method)": [[186, "deepinv.physics.GaussianNoise.__mul__", false]], "__mul__() (deepinv.physics.inpainting method)": [[189, "deepinv.physics.Inpainting.__mul__", false]], "__mul__() (deepinv.physics.linearphysics method)": [[190, "deepinv.physics.LinearPhysics.__mul__", false]], "__mul__() (deepinv.physics.noisemodel method)": [[195, "deepinv.physics.NoiseModel.__mul__", false]], "__mul__() (deepinv.physics.physics method)": [[198, "deepinv.physics.Physics.__mul__", false]], "__mul__() (deepinv.transform.transform method)": [[287, "deepinv.transform.Transform.__mul__", false]], "a() (deepinv.physics.blur method)": [[175, "deepinv.physics.Blur.A", false]], "a() (deepinv.physics.compressivespectralimaging method)": [[178, "deepinv.physics.CompressiveSpectralImaging.A", false]], "a() (deepinv.physics.decomposablephysics method)": [[180, "deepinv.physics.DecomposablePhysics.A", false]], "a() (deepinv.physics.downsampling method)": [[183, "deepinv.physics.Downsampling.A", false]], "a() (deepinv.physics.haze method)": [[187, "deepinv.physics.Haze.A", false]], "a() (deepinv.physics.hyperspectralunmixing method)": [[188, "deepinv.physics.HyperSpectralUnmixing.A", false]], "a() (deepinv.physics.multicoilmri method)": [[194, "deepinv.physics.MultiCoilMRI.A", false]], "a() (deepinv.physics.phaseretrieval method)": [[197, "deepinv.physics.PhaseRetrieval.A", false]], "a() (deepinv.physics.physics method)": [[198, "deepinv.physics.Physics.A", false]], "a() (deepinv.physics.ptychographylinearoperator method)": [[202, "deepinv.physics.PtychographyLinearOperator.A", false]], "a() (deepinv.physics.radiointerferometry method)": [[203, "deepinv.physics.RadioInterferometry.A", false]], "a() (deepinv.physics.singlephotonlidar method)": [[206, "deepinv.physics.SinglePhotonLidar.A", false]], "a() (deepinv.physics.spacevaryingblur method)": [[208, "deepinv.physics.SpaceVaryingBlur.A", false]], "a() (deepinv.physics.stackedphysics method)": [[210, "deepinv.physics.StackedPhysics.A", false]], "a_a_adjoint() (deepinv.physics.decomposablephysics method)": [[180, "deepinv.physics.DecomposablePhysics.A_A_adjoint", false]], "a_a_adjoint() (deepinv.physics.linearphysics method)": [[190, "deepinv.physics.LinearPhysics.A_A_adjoint", false]], "a_adjoint() (deepinv.physics.blur method)": [[175, "deepinv.physics.Blur.A_adjoint", false]], "a_adjoint() (deepinv.physics.compressivespectralimaging method)": [[178, "deepinv.physics.CompressiveSpectralImaging.A_adjoint", false]], "a_adjoint() (deepinv.physics.decomposablephysics method)": [[180, "deepinv.physics.DecomposablePhysics.A_adjoint", false]], "a_adjoint() (deepinv.physics.downsampling method)": [[183, "deepinv.physics.Downsampling.A_adjoint", false]], "a_adjoint() (deepinv.physics.dynamicmri method)": [[184, "deepinv.physics.DynamicMRI.A_adjoint", false]], "a_adjoint() (deepinv.physics.hyperspectralunmixing method)": [[188, "deepinv.physics.HyperSpectralUnmixing.A_adjoint", false]], "a_adjoint() (deepinv.physics.linearphysics method)": [[190, "deepinv.physics.LinearPhysics.A_adjoint", false]], "a_adjoint() (deepinv.physics.mri method)": [[192, "deepinv.physics.MRI.A_adjoint", false]], "a_adjoint() (deepinv.physics.multicoilmri method)": [[194, "deepinv.physics.MultiCoilMRI.A_adjoint", false]], "a_adjoint() (deepinv.physics.ptychographylinearoperator method)": [[202, "deepinv.physics.PtychographyLinearOperator.A_adjoint", false]], "a_adjoint() (deepinv.physics.radiointerferometry method)": [[203, "deepinv.physics.RadioInterferometry.A_adjoint", false]], "a_adjoint() (deepinv.physics.sequentialmri method)": [[205, "deepinv.physics.SequentialMRI.A_adjoint", false]], "a_adjoint() (deepinv.physics.spacevaryingblur method)": [[208, "deepinv.physics.SpaceVaryingBlur.A_adjoint", false]], "a_adjoint() (deepinv.physics.stackedlinearphysics method)": [[209, "deepinv.physics.StackedLinearPhysics.A_adjoint", false]], "a_adjoint_a() (deepinv.physics.decomposablephysics method)": [[180, "deepinv.physics.DecomposablePhysics.A_adjoint_A", false]], "a_adjoint_a() (deepinv.physics.linearphysics method)": [[190, "deepinv.physics.LinearPhysics.A_adjoint_A", false]], "a_dagger() (deepinv.physics.decomposablephysics method)": [[180, "deepinv.physics.DecomposablePhysics.A_dagger", false]], "a_dagger() (deepinv.physics.haze method)": [[187, "deepinv.physics.Haze.A_dagger", false]], "a_dagger() (deepinv.physics.hyperspectralunmixing method)": [[188, "deepinv.physics.HyperSpectralUnmixing.A_dagger", false]], "a_dagger() (deepinv.physics.linearphysics method)": [[190, "deepinv.physics.LinearPhysics.A_dagger", false]], "a_dagger() (deepinv.physics.pansharpen method)": [[196, "deepinv.physics.Pansharpen.A_dagger", false]], "a_dagger() (deepinv.physics.phaseretrieval method)": [[197, "deepinv.physics.PhaseRetrieval.A_dagger", false]], "a_dagger() (deepinv.physics.physics method)": [[198, "deepinv.physics.Physics.A_dagger", false]], "a_dagger() (deepinv.physics.singlephotonlidar method)": [[206, "deepinv.physics.SinglePhotonLidar.A_dagger", false]], "a_vjp() (deepinv.physics.linearphysics method)": [[190, "deepinv.physics.LinearPhysics.A_vjp", false]], "a_vjp() (deepinv.physics.phaseretrieval method)": [[197, "deepinv.physics.PhaseRetrieval.A_vjp", false]], "a_vjp() (deepinv.physics.physics method)": [[198, "deepinv.physics.Physics.A_vjp", false]], "adapt_model() (deepinv.loss.baselossscheduler method)": [[33, "deepinv.loss.BaseLossScheduler.adapt_model", false]], "adapt_model() (deepinv.loss.loss method)": [[39, "deepinv.loss.Loss.adapt_model", false]], "adapt_model() (deepinv.loss.phase2phaseloss method)": [[44, "deepinv.loss.Phase2PhaseLoss.adapt_model", false]], "adapt_model() (deepinv.loss.r2rloss method)": [[45, "deepinv.loss.R2RLoss.adapt_model", false]], "adapt_model() (deepinv.loss.scoreloss method)": [[47, "deepinv.loss.ScoreLoss.adapt_model", false]], "adapt_model() (deepinv.loss.splittingloss method)": [[48, "deepinv.loss.SplittingLoss.adapt_model", false]], "adjoint_function() (in module deepinv.physics)": [[217, "deepinv.physics.adjoint_function", false]], "adjointness_test() (deepinv.physics.linearphysics method)": [[190, "deepinv.physics.LinearPhysics.adjointness_test", false]], "admmiteration (class in deepinv.optim.optim_iterators)": [[155, "deepinv.optim.optim_iterators.ADMMIteration", false]], "admunet (class in deepinv.models)": [[77, "deepinv.models.ADMUNet", false]], "adversarial_loss() (deepinv.loss.adversarial.discriminatorloss method)": [[56, "deepinv.loss.adversarial.DiscriminatorLoss.adversarial_loss", false]], "adversarial_loss() (deepinv.loss.adversarial.generatorloss method)": [[58, "deepinv.loss.adversarial.GeneratorLoss.adversarial_loss", false]], "adversarialoptimizer (class in deepinv.training)": [[278, "deepinv.training.AdversarialOptimizer", false]], "adversarialtrainer (class in deepinv.training)": [[279, "deepinv.training.AdversarialTrainer", false]], "affine (class in deepinv.transform.projective)": [[288, "deepinv.transform.projective.Affine", false]], "amplitudeloss (class in deepinv.optim)": [[115, "deepinv.optim.AmplitudeLoss", false]], "amplitudelossdistance (class in deepinv.optim)": [[116, "deepinv.optim.AmplitudeLossDistance", false]], "anderson_acceleration_step() (deepinv.optim.fixedpoint method)": [[126, "deepinv.optim.FixedPoint.anderson_acceleration_step", false]], "artifact2artifactloss (class in deepinv.loss)": [[32, "deepinv.loss.Artifact2ArtifactLoss", false]], "artifact2artifactsplittingmaskgenerator (class in deepinv.physics.generator)": [[236, "deepinv.physics.generator.Artifact2ArtifactSplittingMaskGenerator", false]], "artifactremoval (class in deepinv.models)": [[78, "deepinv.models.ArtifactRemoval", false]], "autoencoder (class in deepinv.models)": [[79, "deepinv.models.AutoEncoder", false]], "average() (deepinv.physics.timemixin static method)": [[213, "deepinv.physics.TimeMixin.average", false]], "averagemeter (class in deepinv.utils)": [[296, "deepinv.utils.AverageMeter", false]], "b_dagger() (deepinv.physics.phaseretrieval method)": [[197, "deepinv.physics.PhaseRetrieval.B_dagger", false]], "backbone_inference() (deepinv.models.artifactremoval method)": [[78, "deepinv.models.ArtifactRemoval.backbone_inference", false]], "backbone_inference() (deepinv.models.varnet method)": [[111, "deepinv.models.VarNet.backbone_inference", false]], "basedeq (class in deepinv.unfolded)": [[292, "deepinv.unfolded.BaseDEQ", false]], "baselossscheduler (class in deepinv.loss)": [[33, "deepinv.loss.BaseLossScheduler", false]], "basemaskgenerator (class in deepinv.physics.generator)": [[237, "deepinv.physics.generator.BaseMaskGenerator", false]], "baseoptim (class in deepinv.optim)": [[117, "deepinv.optim.BaseOptim", false]], "basesde (class in deepinv.sampling)": [[258, "deepinv.sampling.BaseSDE", false]], "basesdesolver (class in deepinv.sampling)": [[259, "deepinv.sampling.BaseSDESolver", false]], "baseunfold (class in deepinv.unfolded)": [[293, "deepinv.unfolded.BaseUnfold", false]], "batch_step() (deepinv.physics.generator.bernoullisplittingmaskgenerator method)": [[238, "deepinv.physics.generator.BernoulliSplittingMaskGenerator.batch_step", false]], "batch_step() (deepinv.physics.generator.gaussiansplittingmaskgenerator method)": [[246, "deepinv.physics.generator.GaussianSplittingMaskGenerator.batch_step", false]], "bernoullisplittingmaskgenerator (class in deepinv.physics.generator)": [[238, "deepinv.physics.generator.BernoulliSplittingMaskGenerator", false]], "bicgstab() (in module deepinv.optim.utils)": [[169, "deepinv.optim.utils.bicgstab", false]], "bicubic_filter() (in module deepinv.physics.blur)": [[218, "deepinv.physics.blur.bicubic_filter", false]], "bilinear_filter() (in module deepinv.physics.blur)": [[219, "deepinv.physics.blur.bilinear_filter", false]], "blur (class in deepinv.physics)": [[175, "deepinv.physics.Blur", false]], "blurfft (class in deepinv.physics)": [[176, "deepinv.physics.BlurFFT", false]], "bm3d (class in deepinv.models)": [[80, "deepinv.models.BM3D", false]], "bregman (class in deepinv.optim)": [[118, "deepinv.optim.Bregman", false]], "bregman_icnn (class in deepinv.optim)": [[120, "deepinv.optim.Bregman_ICNN", false]], "bregman_prox() (deepinv.optim.potential method)": [[144, "deepinv.optim.Potential.bregman_prox", false]], "bregmanl2 (class in deepinv.optim)": [[119, "deepinv.optim.BregmanL2", false]], "build_probe() (in module deepinv.physics.phase_retrieval)": [[255, "deepinv.physics.phase_retrieval.build_probe", false]], "burgentropy (class in deepinv.optim)": [[121, "deepinv.optim.BurgEntropy", false]], "cbsd68 (class in deepinv.datasets)": [[13, "deepinv.datasets.CBSD68", false]], "check_clip_grad() (deepinv.trainer method)": [[12, "deepinv.Trainer.check_clip_grad", false]], "check_clip_grad_d() (deepinv.training.adversarialtrainer method)": [[279, "deepinv.training.AdversarialTrainer.check_clip_grad_D", false]], "check_conv_fn() (deepinv.optim.baseoptim method)": [[117, "deepinv.optim.BaseOptim.check_conv_fn", false]], "check_dataset_exists() (deepinv.datasets.cbsd68 method)": [[13, "deepinv.datasets.CBSD68.check_dataset_exists", false]], "check_dataset_exists() (deepinv.datasets.flickr2khr method)": [[18, "deepinv.datasets.Flickr2kHR.check_dataset_exists", false]], "check_dataset_exists() (deepinv.datasets.nbudataset method)": [[23, "deepinv.datasets.NBUDataset.check_dataset_exists", false]], "check_dataset_exists() (deepinv.datasets.set14hr method)": [[25, "deepinv.datasets.Set14HR.check_dataset_exists", false]], "check_dataset_exists() (deepinv.datasets.urban100hr method)": [[27, "deepinv.datasets.Urban100HR.check_dataset_exists", false]], "check_iteration_fn() (deepinv.optim.baseoptim method)": [[117, "deepinv.optim.BaseOptim.check_iteration_fn", false]], "check_mask() (deepinv.physics.dynamicmri method)": [[184, "deepinv.physics.DynamicMRI.check_mask", false]], "check_mask() (deepinv.physics.mrimixin method)": [[193, "deepinv.physics.MRIMixin.check_mask", false]], "check_pixelwise() (deepinv.physics.generator.bernoullisplittingmaskgenerator method)": [[238, "deepinv.physics.generator.BernoulliSplittingMaskGenerator.check_pixelwise", false]], "classify() (deepinv.optim.utils.gaussianmixturemodel method)": [[168, "deepinv.optim.utils.GaussianMixtureModel.classify", false]], "cmrxreconslicedataset (class in deepinv.datasets)": [[14, "deepinv.datasets.CMRxReconSliceDataset", false]], "component_log_likelihoods() (deepinv.optim.utils.gaussianmixturemodel method)": [[168, "deepinv.optim.utils.GaussianMixtureModel.component_log_likelihoods", false]], "compressedsensing (class in deepinv.physics)": [[177, "deepinv.physics.CompressedSensing", false]], "compressivespectralimaging (class in deepinv.physics)": [[178, "deepinv.physics.CompressiveSpectralImaging", false]], "compute_alpha() (deepinv.sampling.diffpir method)": [[263, "deepinv.sampling.DiffPIR.compute_alpha", false]], "compute_alpha_betas() (deepinv.sampling.dps method)": [[261, "deepinv.sampling.DPS.compute_alpha_betas", false]], "compute_loss() (deepinv.trainer method)": [[12, "deepinv.Trainer.compute_loss", false]], "compute_loss() (deepinv.training.adversarialtrainer method)": [[279, "deepinv.training.AdversarialTrainer.compute_loss", false]], "compute_metrics() (deepinv.trainer method)": [[12, "deepinv.Trainer.compute_metrics", false]], "compute_norm() (deepinv.physics.linearphysics method)": [[190, "deepinv.physics.LinearPhysics.compute_norm", false]], "condition_number() (deepinv.physics.linearphysics method)": [[190, "deepinv.physics.LinearPhysics.condition_number", false]], "confocalblurgenerator3d (class in deepinv.physics.generator)": [[239, "deepinv.physics.generator.ConfocalBlurGenerator3D", false]], "conjugate() (deepinv.optim.bregman_icnn method)": [[120, "deepinv.optim.Bregman_ICNN.conjugate", false]], "conjugate() (deepinv.optim.bregmanl2 method)": [[119, "deepinv.optim.BregmanL2.conjugate", false]], "conjugate() (deepinv.optim.burgentropy method)": [[121, "deepinv.optim.BurgEntropy.conjugate", false]], "conjugate() (deepinv.optim.negentropy method)": [[137, "deepinv.optim.NegEntropy.conjugate", false]], "conjugate() (deepinv.optim.potential method)": [[144, "deepinv.optim.Potential.conjugate", false]], "conjugate_gradient() (in module deepinv.optim.utils)": [[170, "deepinv.optim.utils.conjugate_gradient", false]], "conv2d() (in module deepinv.physics.functional)": [[224, "deepinv.physics.functional.conv2d", false]], "conv2d_fft() (in module deepinv.physics.functional)": [[225, "deepinv.physics.functional.conv2d_fft", false]], "conv3d_fft() (in module deepinv.physics.functional)": [[226, "deepinv.physics.functional.conv3d_fft", false]], "conv_transpose2d() (in module deepinv.physics.functional)": [[227, "deepinv.physics.functional.conv_transpose2d", false]], "conv_transpose2d_fft() (in module deepinv.physics.functional)": [[228, "deepinv.physics.functional.conv_transpose2d_fft", false]], "conv_transpose3d_fft() (in module deepinv.physics.functional)": [[229, "deepinv.physics.functional.conv_transpose3d_fft", false]], "convdecoder (class in deepinv.models)": [[82, "deepinv.models.ConvDecoder", false]], "convert_to_fp16() (deepinv.models.diffunet method)": [[88, "deepinv.models.DiffUNet.convert_to_fp16", false]], "convert_to_fp32() (deepinv.models.diffunet method)": [[88, "deepinv.models.DiffUNet.convert_to_fp32", false]], "correct_global_phase() (in module deepinv.optim.phase_retrieval)": [[166, "deepinv.optim.phase_retrieval.correct_global_phase", false]], "cpabdiffeomorphism (class in deepinv.transform)": [[280, "deepinv.transform.CPABDiffeomorphism", false]], "cpiteration (class in deepinv.optim.optim_iterators)": [[156, "deepinv.optim.optim_iterators.CPIteration", false]], "create_sampler() (deepinv.models.pannet method)": [[100, "deepinv.models.PanNet.create_sampler", false]], "crop() (deepinv.physics.compressivespectralimaging method)": [[178, "deepinv.physics.CompressiveSpectralImaging.crop", false]], "crop() (deepinv.physics.mrimixin method)": [[193, "deepinv.physics.MRIMixin.crop", false]], "crop_output() (deepinv.models.waveletdenoiser method)": [[112, "deepinv.models.WaveletDenoiser.crop_output", false]], "csgmgenerator (class in deepinv.models)": [[81, "deepinv.models.CSGMGenerator", false]], "d_lambda() (deepinv.loss.metric.qnr method)": [[74, "deepinv.loss.metric.QNR.D_lambda", false]], "d_s() (deepinv.loss.metric.qnr method)": [[74, "deepinv.loss.metric.QNR.D_s", false]], "datafidelity (class in deepinv.optim)": [[123, "deepinv.optim.DataFidelity", false]], "dcgandiscriminator (class in deepinv.models)": [[83, "deepinv.models.DCGANDiscriminator", false]], "dcgangenerator (class in deepinv.models)": [[84, "deepinv.models.DCGANGenerator", false]], "ddrm (class in deepinv.sampling)": [[260, "deepinv.sampling.DDRM", false]], "decolorize (class in deepinv.physics)": [[179, "deepinv.physics.Decolorize", false]], "decomposablephysics (class in deepinv.physics)": [[180, "deepinv.physics.DecomposablePhysics", false]], "deepimageprior (class in deepinv.models)": [[86, "deepinv.models.DeepImagePrior", false]], "demosaicing (class in deepinv.physics)": [[181, "deepinv.physics.Demosaicing", false]], "denoiser (class in deepinv.models)": [[87, "deepinv.models.Denoiser", false]], "denoising (class in deepinv.physics)": [[182, "deepinv.physics.Denoising", false]], "deq_builder() (in module deepinv.unfolded)": [[294, "deepinv.unfolded.DEQ_builder", false]], "diff() (deepinv.sampling.noisydatafidelity method)": [[269, "deepinv.sampling.NoisyDataFidelity.diff", false]], "diffpir (class in deepinv.sampling)": [[263, "deepinv.sampling.DiffPIR", false]], "diffractionblurgenerator (class in deepinv.physics.generator)": [[240, "deepinv.physics.generator.DiffractionBlurGenerator", false]], "diffractionblurgenerator3d (class in deepinv.physics.generator)": [[241, "deepinv.physics.generator.DiffractionBlurGenerator3D", false]], "diffunet (class in deepinv.models)": [[88, "deepinv.models.DiffUNet", false]], "diffusionsampler (class in deepinv.sampling)": [[265, "deepinv.sampling.DiffusionSampler", false]], "diffusionsde (class in deepinv.sampling)": [[264, "deepinv.sampling.DiffusionSDE", false]], "dirac_like() (in module deepinv.utils)": [[299, "deepinv.utils.dirac_like", false]], "discretize() (deepinv.sampling.basesde method)": [[258, "deepinv.sampling.BaseSDE.discretize", false]], "discriminatorloss (class in deepinv.loss.adversarial)": [[56, "deepinv.loss.adversarial.DiscriminatorLoss", false]], "discriminatormetric (class in deepinv.loss.adversarial)": [[57, "deepinv.loss.adversarial.DiscriminatorMetric", false]], "distance (class in deepinv.optim)": [[124, "deepinv.optim.Distance", false]], "div() (deepinv.optim.bregman method)": [[118, "deepinv.optim.Bregman.div", false]], "div() (deepinv.optim.bregmanl2 method)": [[119, "deepinv.optim.BregmanL2.div", false]], "div2k (class in deepinv.datasets)": [[15, "deepinv.datasets.DIV2K", false]], "dncnn (class in deepinv.models)": [[89, "deepinv.models.DnCNN", false]], "download() (deepinv.datasets.kohler class method)": [[20, "deepinv.datasets.Kohler.download", false]], "downsampling (class in deepinv.physics)": [[183, "deepinv.physics.Downsampling", false]], "downsamplinggenerator (class in deepinv.physics.generator)": [[242, "deepinv.physics.generator.DownsamplingGenerator", false]], "dpir (class in deepinv.optim)": [[122, "deepinv.optim.DPIR", false]], "dps (class in deepinv.sampling)": [[261, "deepinv.sampling.DPS", false]], "dpsdatafidelity (class in deepinv.sampling)": [[262, "deepinv.sampling.DPSDataFidelity", false]], "drsiteration (class in deepinv.optim.optim_iterators)": [[157, "deepinv.optim.optim_iterators.DRSIteration", false]], "drunet (class in deepinv.models)": [[85, "deepinv.models.DRUNet", false]], "dst1() (in module deepinv.physics.functional)": [[230, "deepinv.physics.functional.dst1", false]], "dwt() (deepinv.models.waveletdenoiser method)": [[112, "deepinv.models.WaveletDenoiser.dwt", false]], "dynamicmri (class in deepinv.physics)": [[184, "deepinv.physics.DynamicMRI", false]], "eiloss (class in deepinv.loss)": [[34, "deepinv.loss.EILoss", false]], "epll (class in deepinv.optim)": [[125, "deepinv.optim.EPLL", false]], "eplldenoiser (class in deepinv.models)": [[90, "deepinv.models.EPLLDenoiser", false]], "epsilon() (deepinv.models.tgvdenoiser static method)": [[106, "deepinv.models.TGVDenoiser.epsilon", false]], "epsilon_adjoint() (deepinv.models.tgvdenoiser static method)": [[106, "deepinv.models.TGVDenoiser.epsilon_adjoint", false]], "equispacedmaskgenerator (class in deepinv.physics.generator)": [[243, "deepinv.physics.generator.EquispacedMaskGenerator", false]], "equivariantdenoiser (class in deepinv.models)": [[92, "deepinv.models.EquivariantDenoiser", false]], "ergas (class in deepinv.loss.metric)": [[64, "deepinv.loss.metric.ERGAS", false]], "esrgandiscriminator (class in deepinv.models)": [[91, "deepinv.models.ESRGANDiscriminator", false]], "euclidean (class in deepinv.transform.projective)": [[289, "deepinv.transform.projective.Euclidean", false]], "eulersolver (class in deepinv.sampling)": [[266, "deepinv.sampling.EulerSolver", false]], "f_matern() (deepinv.physics.generator.motionblurgenerator method)": [[248, "deepinv.physics.generator.MotionBlurGenerator.f_matern", false]], "fastmrislicedataset (class in deepinv.datasets)": [[17, "deepinv.datasets.FastMRISliceDataset", false]], "fastmrislicedataset.slicesampleid (class in deepinv.datasets)": [[17, "deepinv.datasets.FastMRISliceDataset.SliceSampleID", false]], "fft() (deepinv.physics.mrimixin static method)": [[193, "deepinv.physics.MRIMixin.fft", false]], "find_nearest() (deepinv.models.diffunet method)": [[88, "deepinv.models.DiffUNet.find_nearest", false]], "find_nearest() (deepinv.sampling.diffpir method)": [[263, "deepinv.sampling.DiffPIR.find_nearest", false]], "fistaiteration (class in deepinv.optim.optim_iterators)": [[158, "deepinv.optim.optim_iterators.FISTAIteration", false]], "fit() (deepinv.optim.utils.gaussianmixturemodel method)": [[168, "deepinv.optim.utils.GaussianMixtureModel.fit", false]], "fixedpoint (class in deepinv.optim)": [[126, "deepinv.optim.FixedPoint", false]], "flatten() (deepinv.physics.compressivespectralimaging method)": [[178, "deepinv.physics.CompressiveSpectralImaging.flatten", false]], "flatten() (deepinv.physics.timemixin static method)": [[213, "deepinv.physics.TimeMixin.flatten", false]], "flatten_c() (deepinv.physics.timemixin static method)": [[213, "deepinv.physics.TimeMixin.flatten_C", false]], "flatten_coeffs() (deepinv.models.waveletdenoiser method)": [[112, "deepinv.models.WaveletDenoiser.flatten_coeffs", false]], "flickr2khr (class in deepinv.datasets)": [[18, "deepinv.datasets.Flickr2kHR", false]], "fmd (class in deepinv.datasets)": [[16, "deepinv.datasets.FMD", false]], "fmd.noisysampleidentifier (class in deepinv.datasets)": [[16, "deepinv.datasets.FMD.NoisySampleIdentifier", false]], "fn() (deepinv.optim.amplitudelossdistance method)": [[116, "deepinv.optim.AmplitudeLossDistance.fn", false]], "fn() (deepinv.optim.bregman_icnn method)": [[120, "deepinv.optim.Bregman_ICNN.fn", false]], "fn() (deepinv.optim.bregmanl2 method)": [[119, "deepinv.optim.BregmanL2.fn", false]], "fn() (deepinv.optim.burgentropy method)": [[121, "deepinv.optim.BurgEntropy.fn", false]], "fn() (deepinv.optim.datafidelity method)": [[123, "deepinv.optim.DataFidelity.fn", false]], "fn() (deepinv.optim.distance method)": [[124, "deepinv.optim.Distance.fn", false]], "fn() (deepinv.optim.indicatorl2distance method)": [[128, "deepinv.optim.IndicatorL2Distance.fn", false]], "fn() (deepinv.optim.l12prior method)": [[130, "deepinv.optim.L12Prior.fn", false]], "fn() (deepinv.optim.l1prior method)": [[132, "deepinv.optim.L1Prior.fn", false]], "fn() (deepinv.optim.l2distance method)": [[134, "deepinv.optim.L2Distance.fn", false]], "fn() (deepinv.optim.negentropy method)": [[137, "deepinv.optim.NegEntropy.fn", false]], "fn() (deepinv.optim.patchnr method)": [[139, "deepinv.optim.PatchNR.fn", false]], "fn() (deepinv.optim.poissonlikelihooddistance method)": [[143, "deepinv.optim.PoissonLikelihoodDistance.fn", false]], "fn() (deepinv.optim.potential method)": [[144, "deepinv.optim.Potential.fn", false]], "fn() (deepinv.optim.stackedphysicsdatafidelity method)": [[148, "deepinv.optim.StackedPhysicsDataFidelity.fn", false]], "fn() (deepinv.optim.tikhonov method)": [[150, "deepinv.optim.Tikhonov.fn", false]], "fn() (deepinv.optim.tvprior method)": [[149, "deepinv.optim.TVPrior.fn", false]], "fn() (deepinv.optim.waveletprior method)": [[151, "deepinv.optim.WaveletPrior.fn", false]], "fn() (deepinv.optim.zerofidelity method)": [[153, "deepinv.optim.ZeroFidelity.fn", false]], "fname (deepinv.datasets.fastmrislicedataset.slicesampleid attribute)": [[17, "deepinv.datasets.FastMRISliceDataset.SliceSampleID.fname", false]], "fname (deepinv.datasets.fmd.noisysampleidentifier attribute)": [[16, "deepinv.datasets.FMD.NoisySampleIdentifier.fname", false]], "fnejacobianspectralnorm (class in deepinv.loss)": [[35, "deepinv.loss.FNEJacobianSpectralNorm", false]], "forward() (deepinv.datasets.utils.rescale method)": [[30, "deepinv.datasets.utils.Rescale.forward", false]], "forward() (deepinv.datasets.utils.tocomplex method)": [[31, "deepinv.datasets.utils.ToComplex.forward", false]], "forward() (deepinv.loss.adversarial.supadversarialdiscriminatorloss method)": [[59, "deepinv.loss.adversarial.SupAdversarialDiscriminatorLoss.forward", false]], "forward() (deepinv.loss.adversarial.supadversarialgeneratorloss method)": [[60, "deepinv.loss.adversarial.SupAdversarialGeneratorLoss.forward", false]], "forward() (deepinv.loss.adversarial.uairgeneratorloss method)": [[61, "deepinv.loss.adversarial.UAIRGeneratorLoss.forward", false]], "forward() (deepinv.loss.adversarial.unsupadversarialdiscriminatorloss method)": [[62, "deepinv.loss.adversarial.UnsupAdversarialDiscriminatorLoss.forward", false]], "forward() (deepinv.loss.adversarial.unsupadversarialgeneratorloss method)": [[63, "deepinv.loss.adversarial.UnsupAdversarialGeneratorLoss.forward", false]], "forward() (deepinv.loss.baselossscheduler method)": [[33, "deepinv.loss.BaseLossScheduler.forward", false]], "forward() (deepinv.loss.eiloss method)": [[34, "deepinv.loss.EILoss.forward", false]], "forward() (deepinv.loss.fnejacobianspectralnorm method)": [[35, "deepinv.loss.FNEJacobianSpectralNorm.forward", false]], "forward() (deepinv.loss.jacobianspectralnorm method)": [[38, "deepinv.loss.JacobianSpectralNorm.forward", false]], "forward() (deepinv.loss.loss method)": [[39, "deepinv.loss.Loss.forward", false]], "forward() (deepinv.loss.mcloss method)": [[40, "deepinv.loss.MCLoss.forward", false]], "forward() (deepinv.loss.metric.metric method)": [[70, "deepinv.loss.metric.Metric.forward", false]], "forward() (deepinv.loss.moeiloss method)": [[41, "deepinv.loss.MOEILoss.forward", false]], "forward() (deepinv.loss.moiloss method)": [[42, "deepinv.loss.MOILoss.forward", false]], "forward() (deepinv.loss.neighbor2neighbor method)": [[43, "deepinv.loss.Neighbor2Neighbor.forward", false]], "forward() (deepinv.loss.r2rloss method)": [[45, "deepinv.loss.R2RLoss.forward", false]], "forward() (deepinv.loss.scoreloss method)": [[47, "deepinv.loss.ScoreLoss.forward", false]], "forward() (deepinv.loss.scoreloss.scoremodel method)": [[47, "deepinv.loss.ScoreLoss.ScoreModel.forward", false]], "forward() (deepinv.loss.splittingloss method)": [[48, "deepinv.loss.SplittingLoss.forward", false]], "forward() (deepinv.loss.splittingloss.splittingmodel method)": [[48, "deepinv.loss.SplittingLoss.SplittingModel.forward", false]], "forward() (deepinv.loss.stackedphysicsloss method)": [[49, "deepinv.loss.StackedPhysicsLoss.forward", false]], "forward() (deepinv.loss.suploss method)": [[51, "deepinv.loss.SupLoss.forward", false]], "forward() (deepinv.loss.suregaussianloss method)": [[52, "deepinv.loss.SureGaussianLoss.forward", false]], "forward() (deepinv.loss.surepgloss method)": [[53, "deepinv.loss.SurePGLoss.forward", false]], "forward() (deepinv.loss.surepoissonloss method)": [[54, "deepinv.loss.SurePoissonLoss.forward", false]], "forward() (deepinv.loss.tvloss method)": [[55, "deepinv.loss.TVLoss.forward", false]], "forward() (deepinv.models.admunet method)": [[77, "deepinv.models.ADMUNet.forward", false]], "forward() (deepinv.models.artifactremoval method)": [[78, "deepinv.models.ArtifactRemoval.forward", false]], "forward() (deepinv.models.bm3d method)": [[80, "deepinv.models.BM3D.forward", false]], "forward() (deepinv.models.convdecoder method)": [[82, "deepinv.models.ConvDecoder.forward", false]], "forward() (deepinv.models.csgmgenerator method)": [[81, "deepinv.models.CSGMGenerator.forward", false]], "forward() (deepinv.models.dcgandiscriminator method)": [[83, "deepinv.models.DCGANDiscriminator.forward", false]], "forward() (deepinv.models.dcgangenerator method)": [[84, "deepinv.models.DCGANGenerator.forward", false]], "forward() (deepinv.models.deepimageprior method)": [[86, "deepinv.models.DeepImagePrior.forward", false]], "forward() (deepinv.models.denoiser method)": [[87, "deepinv.models.Denoiser.forward", false]], "forward() (deepinv.models.diffunet method)": [[88, "deepinv.models.DiffUNet.forward", false]], "forward() (deepinv.models.dncnn method)": [[89, "deepinv.models.DnCNN.forward", false]], "forward() (deepinv.models.drunet method)": [[85, "deepinv.models.DRUNet.forward", false]], "forward() (deepinv.models.eplldenoiser method)": [[90, "deepinv.models.EPLLDenoiser.forward", false]], "forward() (deepinv.models.equivariantdenoiser method)": [[92, "deepinv.models.EquivariantDenoiser.forward", false]], "forward() (deepinv.models.esrgandiscriminator method)": [[91, "deepinv.models.ESRGANDiscriminator.forward", false]], "forward() (deepinv.models.icnn method)": [[94, "deepinv.models.ICNN.forward", false]], "forward() (deepinv.models.ncsnpp method)": [[97, "deepinv.models.NCSNpp.forward", false]], "forward() (deepinv.models.pannet method)": [[100, "deepinv.models.PanNet.forward", false]], "forward() (deepinv.models.patchgandiscriminator method)": [[101, "deepinv.models.PatchGANDiscriminator.forward", false]], "forward() (deepinv.models.pdnet_dualblock method)": [[98, "deepinv.models.PDNet_DualBlock.forward", false]], "forward() (deepinv.models.pdnet_primalblock method)": [[99, "deepinv.models.PDNet_PrimalBlock.forward", false]], "forward() (deepinv.models.reconstructor method)": [[102, "deepinv.models.Reconstructor.forward", false]], "forward() (deepinv.models.restormer method)": [[103, "deepinv.models.Restormer.forward", false]], "forward() (deepinv.models.swinir method)": [[105, "deepinv.models.SwinIR.forward", false]], "forward() (deepinv.models.tgvdenoiser method)": [[106, "deepinv.models.TGVDenoiser.forward", false]], "forward() (deepinv.models.timeagnosticnet method)": [[108, "deepinv.models.TimeAgnosticNet.forward", false]], "forward() (deepinv.models.timeaveragingnet method)": [[109, "deepinv.models.TimeAveragingNet.forward", false]], "forward() (deepinv.models.tvdenoiser method)": [[107, "deepinv.models.TVDenoiser.forward", false]], "forward() (deepinv.models.unet method)": [[110, "deepinv.models.UNet.forward", false]], "forward() (deepinv.models.waveletdenoiser method)": [[112, "deepinv.models.WaveletDenoiser.forward", false]], "forward() (deepinv.models.waveletdictdenoiser method)": [[113, "deepinv.models.WaveletDictDenoiser.forward", false]], "forward() (deepinv.optim.baseoptim method)": [[117, "deepinv.optim.BaseOptim.forward", false]], "forward() (deepinv.optim.distance method)": [[124, "deepinv.optim.Distance.forward", false]], "forward() (deepinv.optim.epll method)": [[125, "deepinv.optim.EPLL.forward", false]], "forward() (deepinv.optim.fixedpoint method)": [[126, "deepinv.optim.FixedPoint.forward", false]], "forward() (deepinv.optim.optim_iterators.admmiteration method)": [[155, "deepinv.optim.optim_iterators.ADMMIteration.forward", false]], "forward() (deepinv.optim.optim_iterators.cpiteration method)": [[156, "deepinv.optim.optim_iterators.CPIteration.forward", false]], "forward() (deepinv.optim.optim_iterators.drsiteration method)": [[157, "deepinv.optim.optim_iterators.DRSIteration.forward", false]], "forward() (deepinv.optim.optim_iterators.fistaiteration method)": [[158, "deepinv.optim.optim_iterators.FISTAIteration.forward", false]], "forward() (deepinv.optim.optim_iterators.gditeration method)": [[159, "deepinv.optim.optim_iterators.GDIteration.forward", false]], "forward() (deepinv.optim.optim_iterators.mditeration method)": [[161, "deepinv.optim.optim_iterators.MDIteration.forward", false]], "forward() (deepinv.optim.optim_iterators.smiteration method)": [[163, "deepinv.optim.optim_iterators.SMIteration.forward", false]], "forward() (deepinv.optim.optimiterator method)": [[138, "deepinv.optim.OptimIterator.forward", false]], "forward() (deepinv.optim.potential method)": [[144, "deepinv.optim.Potential.forward", false]], "forward() (deepinv.optim.utils.gaussianmixturemodel method)": [[168, "deepinv.optim.utils.GaussianMixtureModel.forward", false]], "forward() (deepinv.physics.functional.iradon method)": [[222, "deepinv.physics.functional.IRadon.forward", false]], "forward() (deepinv.physics.functional.radon method)": [[223, "deepinv.physics.functional.Radon.forward", false]], "forward() (deepinv.physics.gammanoise method)": [[185, "deepinv.physics.GammaNoise.forward", false]], "forward() (deepinv.physics.gaussiannoise method)": [[186, "deepinv.physics.GaussianNoise.forward", false]], "forward() (deepinv.physics.logpoissonnoise method)": [[191, "deepinv.physics.LogPoissonNoise.forward", false]], "forward() (deepinv.physics.noisemodel method)": [[195, "deepinv.physics.NoiseModel.forward", false]], "forward() (deepinv.physics.phaseretrieval method)": [[197, "deepinv.physics.PhaseRetrieval.forward", false]], "forward() (deepinv.physics.physics method)": [[198, "deepinv.physics.Physics.forward", false]], "forward() (deepinv.physics.poissongaussiannoise method)": [[199, "deepinv.physics.PoissonGaussianNoise.forward", false]], "forward() (deepinv.physics.poissonnoise method)": [[200, "deepinv.physics.PoissonNoise.forward", false]], "forward() (deepinv.physics.uniformgaussiannoise method)": [[215, "deepinv.physics.UniformGaussianNoise.forward", false]], "forward() (deepinv.physics.uniformnoise method)": [[216, "deepinv.physics.UniformNoise.forward", false]], "forward() (deepinv.sampling.ddrm method)": [[260, "deepinv.sampling.DDRM.forward", false]], "forward() (deepinv.sampling.diffpir method)": [[263, "deepinv.sampling.DiffPIR.forward", false]], "forward() (deepinv.sampling.dpsdatafidelity method)": [[262, "deepinv.sampling.DPSDataFidelity.forward", false]], "forward() (deepinv.sampling.montecarlo method)": [[268, "deepinv.sampling.MonteCarlo.forward", false]], "forward() (deepinv.sampling.noisydatafidelity method)": [[269, "deepinv.sampling.NoisyDataFidelity.forward", false]], "forward() (deepinv.sampling.posteriordiffusion method)": [[270, "deepinv.sampling.PosteriorDiffusion.forward", false]], "forward() (deepinv.transform.transform method)": [[287, "deepinv.transform.Transform.forward", false]], "forward() (deepinv.unfolded.basedeq method)": [[292, "deepinv.unfolded.BaseDEQ.forward", false]], "forward() (deepinv.unfolded.baseunfold method)": [[293, "deepinv.unfolded.BaseUnfold.forward", false]], "forward_denoise() (deepinv.models.diffunet method)": [[88, "deepinv.models.DiffUNet.forward_denoise", false]], "forward_diffusion() (deepinv.models.diffunet method)": [[88, "deepinv.models.DiffUNet.forward_diffusion", false]], "forward_restormer() (deepinv.models.restormer method)": [[103, "deepinv.models.Restormer.forward_restormer", false]], "forward_unet() (deepinv.models.admunet method)": [[77, "deepinv.models.ADMUNet.forward_unet", false]], "forward_unet() (deepinv.models.ncsnpp method)": [[97, "deepinv.models.NCSNpp.forward_unet", false]], "fov (deepinv.datasets.fmd.noisysampleidentifier attribute)": [[16, "deepinv.datasets.FMD.NoisySampleIdentifier.fov", false]], "from_torch_complex() (deepinv.physics.mrimixin static method)": [[193, "deepinv.physics.MRIMixin.from_torch_complex", false]], "fstep (class in deepinv.optim.optim_iterators)": [[164, "deepinv.optim.optim_iterators.fStep", false]], "gaingenerator (class in deepinv.physics.generator)": [[244, "deepinv.physics.generator.GainGenerator", false]], "gammanoise (class in deepinv.physics)": [[185, "deepinv.physics.GammaNoise", false]], "gaussian_blur() (in module deepinv.physics.blur)": [[220, "deepinv.physics.blur.gaussian_blur", false]], "gaussianmaskgenerator (class in deepinv.physics.generator)": [[245, "deepinv.physics.generator.GaussianMaskGenerator", false]], "gaussianmixturemodel (class in deepinv.optim.utils)": [[168, "deepinv.optim.utils.GaussianMixtureModel", false]], "gaussiannoise (class in deepinv.physics)": [[186, "deepinv.physics.GaussianNoise", false]], "gaussiansplittingmaskgenerator (class in deepinv.physics.generator)": [[246, "deepinv.physics.generator.GaussianSplittingMaskGenerator", false]], "gditeration (class in deepinv.optim.optim_iterators)": [[159, "deepinv.optim.optim_iterators.GDIteration", false]], "generate_coeff() (deepinv.physics.generator.diffractionblurgenerator method)": [[240, "deepinv.physics.generator.DiffractionBlurGenerator.generate_coeff", false]], "generate_dataset() (in module deepinv.datasets)": [[28, "deepinv.datasets.generate_dataset", false]], "generate_shifts() (in module deepinv.physics.phase_retrieval)": [[256, "deepinv.physics.phase_retrieval.generate_shifts", false]], "generatorloss (class in deepinv.loss.adversarial)": [[58, "deepinv.loss.adversarial.GeneratorLoss", false]], "generatormixture (class in deepinv.physics.generator)": [[247, "deepinv.physics.generator.GeneratorMixture", false]], "get_alpha_beta() (deepinv.sampling.diffpir method)": [[263, "deepinv.sampling.DiffPIR.get_alpha_beta", false]], "get_alpha_prod() (deepinv.models.diffunet method)": [[88, "deepinv.models.DiffUNet.get_alpha_prod", false]], "get_alpha_prod() (deepinv.sampling.diffpir method)": [[263, "deepinv.sampling.DiffPIR.get_alpha_prod", false]], "get_chain() (deepinv.sampling.montecarlo method)": [[268, "deepinv.sampling.MonteCarlo.get_chain", false]], "get_cov() (deepinv.optim.utils.gaussianmixturemodel method)": [[168, "deepinv.optim.utils.GaussianMixtureModel.get_cov", false]], "get_cov_inv_reg() (deepinv.optim.utils.gaussianmixturemodel method)": [[168, "deepinv.optim.utils.GaussianMixtureModel.get_cov_inv_reg", false]], "get_data_home() (in module deepinv.utils)": [[300, "deepinv.utils.get_data_home", false]], "get_degradation_url() (in module deepinv.utils)": [[301, "deepinv.utils.get_degradation_url", false]], "get_freer_gpu() (in module deepinv.utils)": [[302, "deepinv.utils.get_freer_gpu", false]], "get_image_url() (in module deepinv.utils)": [[303, "deepinv.utils.get_image_url", false]], "get_item() (deepinv.datasets.kohler method)": [[20, "deepinv.datasets.Kohler.get_item", false]], "get_kernel() (deepinv.physics.generator.downsamplinggenerator method)": [[242, "deepinv.physics.generator.DownsamplingGenerator.get_kernel", false]], "get_noise_schedule() (deepinv.sampling.diffpir method)": [[263, "deepinv.sampling.DiffPIR.get_noise_schedule", false]], "get_overlap_img() (deepinv.physics.ptychographylinearoperator method)": [[202, "deepinv.physics.PtychographyLinearOperator.get_overlap_img", false]], "get_params() (deepinv.transform.transform method)": [[287, "deepinv.transform.Transform.get_params", false]], "get_pdf() (deepinv.physics.generator.gaussianmaskgenerator method)": [[245, "deepinv.physics.generator.GaussianMaskGenerator.get_pdf", false]], "get_pdf() (deepinv.physics.generator.randommaskgenerator method)": [[253, "deepinv.physics.generator.RandomMaskGenerator.get_pdf", false]], "get_samples() (deepinv.trainer method)": [[12, "deepinv.Trainer.get_samples", false]], "get_samples_offline() (deepinv.trainer method)": [[12, "deepinv.Trainer.get_samples_offline", false]], "get_samples_online() (deepinv.trainer method)": [[12, "deepinv.Trainer.get_samples_online", false]], "get_structure() (deepinv.physics.structuredrandomphaseretrieval static method)": [[212, "deepinv.physics.StructuredRandomPhaseRetrieval.get_structure", false]], "get_timestamp (class in deepinv.utils)": [[304, "deepinv.utils.get_timestamp", false]], "get_weights() (deepinv.optim.utils.gaussianmixturemodel method)": [[168, "deepinv.optim.utils.GaussianMixtureModel.get_weights", false]], "grad() (deepinv.models.icnn method)": [[94, "deepinv.models.ICNN.grad", false]], "grad() (deepinv.optim.amplitudelossdistance method)": [[116, "deepinv.optim.AmplitudeLossDistance.grad", false]], "grad() (deepinv.optim.bregmanl2 method)": [[119, "deepinv.optim.BregmanL2.grad", false]], "grad() (deepinv.optim.burgentropy method)": [[121, "deepinv.optim.BurgEntropy.grad", false]], "grad() (deepinv.optim.datafidelity method)": [[123, "deepinv.optim.DataFidelity.grad", false]], "grad() (deepinv.optim.l1distance method)": [[131, "deepinv.optim.L1Distance.grad", false]], "grad() (deepinv.optim.l2distance method)": [[134, "deepinv.optim.L2Distance.grad", false]], "grad() (deepinv.optim.negentropy method)": [[137, "deepinv.optim.NegEntropy.grad", false]], "grad() (deepinv.optim.poissonlikelihooddistance method)": [[143, "deepinv.optim.PoissonLikelihoodDistance.grad", false]], "grad() (deepinv.optim.potential method)": [[144, "deepinv.optim.Potential.grad", false]], "grad() (deepinv.optim.red method)": [[146, "deepinv.optim.RED.grad", false]], "grad() (deepinv.optim.scoreprior method)": [[147, "deepinv.optim.ScorePrior.grad", false]], "grad() (deepinv.optim.stackedphysicsdatafidelity method)": [[148, "deepinv.optim.StackedPhysicsDataFidelity.grad", false]], "grad() (deepinv.optim.tikhonov method)": [[150, "deepinv.optim.Tikhonov.grad", false]], "grad() (deepinv.optim.zerofidelity method)": [[153, "deepinv.optim.ZeroFidelity.grad", false]], "grad() (deepinv.sampling.dpsdatafidelity method)": [[262, "deepinv.sampling.DPSDataFidelity.grad", false]], "grad() (deepinv.sampling.noisydatafidelity method)": [[269, "deepinv.sampling.NoisyDataFidelity.grad", false]], "grad_conj() (deepinv.optim.bregmanl2 method)": [[119, "deepinv.optim.BregmanL2.grad_conj", false]], "grad_conj() (deepinv.optim.burgentropy method)": [[121, "deepinv.optim.BurgEntropy.grad_conj", false]], "grad_conj() (deepinv.optim.negentropy method)": [[137, "deepinv.optim.NegEntropy.grad_conj", false]], "grad_conj() (deepinv.optim.potential method)": [[144, "deepinv.optim.Potential.grad_conj", false]], "grad_d() (deepinv.optim.datafidelity method)": [[123, "deepinv.optim.DataFidelity.grad_d", false]], "grad_d() (deepinv.optim.stackedphysicsdatafidelity method)": [[148, "deepinv.optim.StackedPhysicsDataFidelity.grad_d", false]], "grad_d() (deepinv.optim.zerofidelity method)": [[153, "deepinv.optim.ZeroFidelity.grad_d", false]], "gradient_descent() (in module deepinv.optim.utils)": [[171, "deepinv.optim.utils.gradient_descent", false]], "gsdrunet (class in deepinv.models)": [[93, "deepinv.models.GSDRUNet", false]], "gstep (class in deepinv.optim.optim_iterators)": [[165, "deepinv.optim.optim_iterators.gStep", false]], "hard_threshold_topk() (deepinv.models.waveletdenoiser method)": [[112, "deepinv.models.WaveletDenoiser.hard_threshold_topk", false]], "haze (class in deepinv.physics)": [[187, "deepinv.physics.Haze", false]], "hdf5dataset (class in deepinv.datasets)": [[19, "deepinv.datasets.HDF5Dataset", false]], "heunsolver (class in deepinv.sampling)": [[267, "deepinv.sampling.HeunSolver", false]], "histogram() (in module deepinv.physics.functional)": [[231, "deepinv.physics.functional.histogram", false]], "histogramdd() (in module deepinv.physics.functional)": [[232, "deepinv.physics.functional.histogramdd", false]], "homography (class in deepinv.transform)": [[281, "deepinv.transform.Homography", false]], "hqsiteration (class in deepinv.optim.optim_iterators)": [[160, "deepinv.optim.optim_iterators.HQSIteration", false]], "hyperspectralunmixing (class in deepinv.physics)": [[188, "deepinv.physics.HyperSpectralUnmixing", false]], "icnn (class in deepinv.models)": [[94, "deepinv.models.ICNN", false]], "identity() (deepinv.transform.transform method)": [[287, "deepinv.transform.Transform.identity", false]], "ifft() (deepinv.physics.mrimixin static method)": [[193, "deepinv.physics.MRIMixin.ifft", false]], "im_to_kspace() (deepinv.physics.mrimixin method)": [[193, "deepinv.physics.MRIMixin.im_to_kspace", false]], "img_type (deepinv.datasets.fmd.noisysampleidentifier attribute)": [[16, "deepinv.datasets.FMD.NoisySampleIdentifier.img_type", false]], "indicatorl2 (class in deepinv.optim)": [[127, "deepinv.optim.IndicatorL2", false]], "indicatorl2distance (class in deepinv.optim)": [[128, "deepinv.optim.IndicatorL2Distance", false]], "init_anderson_acceleration() (deepinv.optim.fixedpoint method)": [[126, "deepinv.optim.FixedPoint.init_anderson_acceleration", false]], "init_iterate_fn() (deepinv.optim.baseoptim method)": [[117, "deepinv.optim.BaseOptim.init_iterate_fn", false]], "init_metrics_fn() (deepinv.optim.baseoptim method)": [[117, "deepinv.optim.BaseOptim.init_metrics_fn", false]], "inpainting (class in deepinv.physics)": [[189, "deepinv.physics.Inpainting", false]], "interleavedepochlossscheduler (class in deepinv.loss)": [[36, "deepinv.loss.InterleavedEpochLossScheduler", false]], "interleavedlossscheduler (class in deepinv.loss)": [[37, "deepinv.loss.InterleavedLossScheduler", false]], "inverse() (deepinv.transform.transform method)": [[287, "deepinv.transform.Transform.inverse", false]], "invert_metric() (deepinv.loss.metric.metric method)": [[70, "deepinv.loss.metric.Metric.invert_metric", false]], "invert_params() (deepinv.transform.transform method)": [[287, "deepinv.transform.Transform.invert_params", false]], "iradon (class in deepinv.physics.functional)": [[222, "deepinv.physics.functional.IRadon", false]], "is_standard_deblurring_network() (deepinv.models.restormer method)": [[103, "deepinv.models.Restormer.is_standard_deblurring_network", false]], "is_standard_denoising_network() (deepinv.models.restormer method)": [[103, "deepinv.models.Restormer.is_standard_denoising_network", false]], "is_standard_deraining_network() (deepinv.models.restormer method)": [[103, "deepinv.models.Restormer.is_standard_deraining_network", false]], "iwt() (deepinv.models.waveletdenoiser method)": [[112, "deepinv.models.WaveletDenoiser.iwt", false]], "jacobianspectralnorm (class in deepinv.loss)": [[38, "deepinv.loss.JacobianSpectralNorm", false]], "kohler (class in deepinv.datasets)": [[20, "deepinv.datasets.Kohler", false]], "kspace_to_im() (deepinv.physics.mrimixin method)": [[193, "deepinv.physics.MRIMixin.kspace_to_im", false]], "l1 (class in deepinv.optim)": [[129, "deepinv.optim.L1", false]], "l12prior (class in deepinv.optim)": [[130, "deepinv.optim.L12Prior", false]], "l1distance (class in deepinv.optim)": [[131, "deepinv.optim.L1Distance", false]], "l1l2 (class in deepinv.loss.metric)": [[65, "deepinv.loss.metric.L1L2", false]], "l1prior (class in deepinv.optim)": [[132, "deepinv.optim.L1Prior", false]], "l2 (class in deepinv.optim)": [[133, "deepinv.optim.L2", false]], "l2distance (class in deepinv.optim)": [[134, "deepinv.optim.L2Distance", false]], "least_squares() (in module deepinv.optim.utils)": [[172, "deepinv.optim.utils.least_squares", false]], "lidcidrislicedataset (class in deepinv.datasets)": [[21, "deepinv.datasets.LidcIdriSliceDataset", false]], "lidcidrislicedataset.slicesampleidentifier (class in deepinv.datasets)": [[21, "deepinv.datasets.LidcIdriSliceDataset.SliceSampleIdentifier", false]], "linearphysics (class in deepinv.physics)": [[190, "deepinv.physics.LinearPhysics", false]], "load_best_model() (deepinv.trainer method)": [[12, "deepinv.Trainer.load_best_model", false]], "load_dataset() (in module deepinv.utils)": [[305, "deepinv.utils.load_dataset", false]], "load_degradation() (in module deepinv.utils)": [[306, "deepinv.utils.load_degradation", false]], "load_image() (in module deepinv.utils)": [[307, "deepinv.utils.load_image", false]], "load_model() (deepinv.trainer method)": [[12, "deepinv.Trainer.load_model", false]], "load_state_dict() (deepinv.optim.utils.gaussianmixturemodel method)": [[168, "deepinv.optim.utils.GaussianMixtureModel.load_state_dict", false]], "load_state_dict() (deepinv.training.adversarialoptimizer method)": [[278, "deepinv.training.AdversarialOptimizer.load_state_dict", false]], "load_url_image() (in module deepinv.utils)": [[308, "deepinv.utils.load_url_image", false]], "log_metrics_wandb() (deepinv.trainer method)": [[12, "deepinv.Trainer.log_metrics_wandb", false]], "logpoissonlikelihood (class in deepinv.optim)": [[135, "deepinv.optim.LogPoissonLikelihood", false]], "logpoissonlikelihooddistance (class in deepinv.optim)": [[136, "deepinv.optim.LogPoissonLikelihoodDistance", false]], "logpoissonnoise (class in deepinv.physics)": [[191, "deepinv.physics.LogPoissonNoise", false]], "loss (class in deepinv.loss)": [[39, "deepinv.loss.Loss", false]], "lpips (class in deepinv.loss.metric)": [[66, "deepinv.loss.metric.LPIPS", false]], "lpnorm (class in deepinv.loss.metric)": [[67, "deepinv.loss.metric.LpNorm", false]], "lsdirhr (class in deepinv.datasets)": [[22, "deepinv.datasets.LsdirHR", false]], "lsqr() (in module deepinv.optim.utils)": [[173, "deepinv.optim.utils.lsqr", false]], "mae (class in deepinv.loss.metric)": [[68, "deepinv.loss.metric.MAE", false]], "matern_kernel() (deepinv.physics.generator.motionblurgenerator method)": [[248, "deepinv.physics.generator.MotionBlurGenerator.matern_kernel", false]], "mcloss (class in deepinv.loss)": [[40, "deepinv.loss.MCLoss", false]], "md_step() (deepinv.optim.bregman method)": [[118, "deepinv.optim.Bregman.MD_step", false]], "mditeration (class in deepinv.optim.optim_iterators)": [[161, "deepinv.optim.optim_iterators.MDIteration", false]], "mean_has_converged() (deepinv.sampling.montecarlo method)": [[268, "deepinv.sampling.MonteCarlo.mean_has_converged", false]], "medianfilter (class in deepinv.models)": [[95, "deepinv.models.MedianFilter", false]], "metadata (deepinv.datasets.fastmrislicedataset.slicesampleid attribute)": [[17, "deepinv.datasets.FastMRISliceDataset.SliceSampleID.metadata", false]], "metadata_cache_manager() (deepinv.datasets.fastmrislicedataset method)": [[17, "deepinv.datasets.FastMRISliceDataset.metadata_cache_manager", false]], "metric (class in deepinv.loss.metric)": [[70, "deepinv.loss.metric.Metric", false]], "metric() (deepinv.loss.metric.metric method)": [[70, "deepinv.loss.metric.Metric.metric", false]], "metric() (deepinv.loss.metric.qnr method)": [[74, "deepinv.loss.metric.QNR.metric", false]], "minres() (in module deepinv.optim.utils)": [[174, "deepinv.optim.utils.minres", false]], "model_inference() (deepinv.trainer method)": [[12, "deepinv.Trainer.model_inference", false]], "modl (class in deepinv.models)": [[96, "deepinv.models.MoDL", false]], "moeiloss (class in deepinv.loss)": [[41, "deepinv.loss.MOEILoss", false]], "moiloss (class in deepinv.loss)": [[42, "deepinv.loss.MOILoss", false]], "montecarlo (class in deepinv.sampling)": [[268, "deepinv.sampling.MonteCarlo", false]], "motionblurgenerator (class in deepinv.physics.generator)": [[248, "deepinv.physics.generator.MotionBlurGenerator", false]], "mri (class in deepinv.physics)": [[192, "deepinv.physics.MRI", false]], "mrimixin (class in deepinv.physics)": [[193, "deepinv.physics.MRIMixin", false]], "mse (class in deepinv.loss.metric)": [[69, "deepinv.loss.metric.MSE", false]], "multicoilmri (class in deepinv.physics)": [[194, "deepinv.physics.MultiCoilMRI", false]], "multiplier() (in module deepinv.physics.functional)": [[233, "deepinv.physics.functional.multiplier", false]], "multiplier_adjoint() (in module deepinv.physics.functional)": [[234, "deepinv.physics.functional.multiplier_adjoint", false]], "nabla() (deepinv.models.tgvdenoiser static method)": [[106, "deepinv.models.TGVDenoiser.nabla", false]], "nabla() (deepinv.models.tvdenoiser static method)": [[107, "deepinv.models.TVDenoiser.nabla", false]], "nabla() (deepinv.optim.tvprior method)": [[149, "deepinv.optim.TVPrior.nabla", false]], "nabla_adjoint() (deepinv.models.tgvdenoiser static method)": [[106, "deepinv.models.TGVDenoiser.nabla_adjoint", false]], "nabla_adjoint() (deepinv.models.tvdenoiser static method)": [[107, "deepinv.models.TVDenoiser.nabla_adjoint", false]], "nabla_adjoint() (deepinv.optim.tvprior method)": [[149, "deepinv.optim.TVPrior.nabla_adjoint", false]], "nbudataset (class in deepinv.datasets)": [[23, "deepinv.datasets.NBUDataset", false]], "ncsnpp (class in deepinv.models)": [[97, "deepinv.models.NCSNpp", false]], "negative_log_likelihood() (deepinv.optim.epll method)": [[125, "deepinv.optim.EPLL.negative_log_likelihood", false]], "negentropy (class in deepinv.optim)": [[137, "deepinv.optim.NegEntropy", false]], "neighbor2neighbor (class in deepinv.loss)": [[43, "deepinv.loss.Neighbor2Neighbor", false]], "next_physics() (deepinv.loss.moiloss method)": [[42, "deepinv.loss.MOILoss.next_physics", false]], "niqe (class in deepinv.loss.metric)": [[71, "deepinv.loss.metric.NIQE", false]], "nmse (class in deepinv.loss.metric)": [[72, "deepinv.loss.metric.NMSE", false]], "no_learning_inference() (deepinv.trainer method)": [[12, "deepinv.Trainer.no_learning_inference", false]], "noise() (deepinv.physics.dynamicmri method)": [[184, "deepinv.physics.DynamicMRI.noise", false]], "noise() (deepinv.physics.inpainting method)": [[189, "deepinv.physics.Inpainting.noise", false]], "noise() (deepinv.physics.mri method)": [[192, "deepinv.physics.MRI.noise", false]], "noise() (deepinv.physics.multicoilmri method)": [[194, "deepinv.physics.MultiCoilMRI.noise", false]], "noise() (deepinv.physics.physics method)": [[198, "deepinv.physics.Physics.noise", false]], "noise() (deepinv.physics.stackedphysics method)": [[210, "deepinv.physics.StackedPhysics.noise", false]], "noise_dirname (deepinv.datasets.fmd.noisysampleidentifier attribute)": [[16, "deepinv.datasets.FMD.NoisySampleIdentifier.noise_dirname", false]], "noisemodel (class in deepinv.physics)": [[195, "deepinv.physics.NoiseModel", false]], "noisydatafidelity (class in deepinv.sampling)": [[269, "deepinv.sampling.NoisyDataFidelity", false]], "ones_like() (in module deepinv.utils)": [[309, "deepinv.utils.ones_like", false]], "optim_builder() (in module deepinv.optim)": [[154, "deepinv.optim.optim_builder", false]], "optimiterator (class in deepinv.optim)": [[138, "deepinv.optim.OptimIterator", false]], "optimize_z() (deepinv.models.csgmgenerator method)": [[81, "deepinv.models.CSGMGenerator.optimize_z", false]], "pad() (deepinv.physics.compressivespectralimaging method)": [[178, "deepinv.physics.CompressiveSpectralImaging.pad", false]], "pad_input() (deepinv.models.waveletdenoiser method)": [[112, "deepinv.models.WaveletDenoiser.pad_input", false]], "pannet (class in deepinv.models)": [[100, "deepinv.models.PanNet", false]], "pansharpen (class in deepinv.physics)": [[196, "deepinv.physics.Pansharpen", false]], "pantiltrotate (class in deepinv.transform.projective)": [[290, "deepinv.transform.projective.PanTiltRotate", false]], "patch_forward() (deepinv.models.diffunet method)": [[88, "deepinv.models.DiffUNet.patch_forward", false]], "patchdataset (class in deepinv.datasets)": [[24, "deepinv.datasets.PatchDataset", false]], "patchgandiscriminator (class in deepinv.models)": [[101, "deepinv.models.PatchGANDiscriminator", false]], "patchnr (class in deepinv.optim)": [[139, "deepinv.optim.PatchNR", false]], "patchprior (class in deepinv.optim)": [[140, "deepinv.optim.PatchPrior", false]], "patient_id (deepinv.datasets.lidcidrislicedataset.slicesampleidentifier attribute)": [[21, "deepinv.datasets.LidcIdriSliceDataset.SliceSampleIdentifier.patient_id", false]], "pdnet_dualblock (class in deepinv.models)": [[98, "deepinv.models.PDNet_DualBlock", false]], "pdnet_primalblock (class in deepinv.models)": [[99, "deepinv.models.PDNet_PrimalBlock", false]], "pgditeration (class in deepinv.optim.optim_iterators)": [[162, "deepinv.optim.optim_iterators.PGDIteration", false]], "phase2phaseloss (class in deepinv.loss)": [[44, "deepinv.loss.Phase2PhaseLoss", false]], "phase2phasesplittingmaskgenerator (class in deepinv.physics.generator)": [[250, "deepinv.physics.generator.Phase2PhaseSplittingMaskGenerator", false]], "phaseretrieval (class in deepinv.physics)": [[197, "deepinv.physics.PhaseRetrieval", false]], "physics (class in deepinv.physics)": [[198, "deepinv.physics.Physics", false]], "physicsgenerator (class in deepinv.physics.generator)": [[251, "deepinv.physics.generator.PhysicsGenerator", false]], "placeholderdataset (class in deepinv.datasets.utils)": [[29, "deepinv.datasets.utils.PlaceholderDataset", false]], "plot() (deepinv.trainer method)": [[12, "deepinv.Trainer.plot", false]], "plot() (in module deepinv.utils)": [[310, "deepinv.utils.plot", false]], "plot_curves() (in module deepinv.utils)": [[311, "deepinv.utils.plot_curves", false]], "plot_inset() (in module deepinv.utils)": [[312, "deepinv.utils.plot_inset", false]], "plot_ortho3d() (in module deepinv.utils)": [[313, "deepinv.utils.plot_ortho3D", false]], "plot_parameters() (in module deepinv.utils)": [[314, "deepinv.utils.plot_parameters", false]], "plot_videos() (in module deepinv.utils)": [[315, "deepinv.utils.plot_videos", false]], "pnp (class in deepinv.optim)": [[141, "deepinv.optim.PnP", false]], "poissongaussiannoise (class in deepinv.physics)": [[199, "deepinv.physics.PoissonGaussianNoise", false]], "poissonlikelihood (class in deepinv.optim)": [[142, "deepinv.optim.PoissonLikelihood", false]], "poissonlikelihooddistance (class in deepinv.optim)": [[143, "deepinv.optim.PoissonLikelihoodDistance", false]], "poissonnoise (class in deepinv.physics)": [[200, "deepinv.physics.PoissonNoise", false]], "posteriordiffusion (class in deepinv.sampling)": [[270, "deepinv.sampling.PosteriorDiffusion", false]], "potential (class in deepinv.optim)": [[144, "deepinv.optim.Potential", false]], "precond() (deepinv.sampling.noisydatafidelity method)": [[269, "deepinv.sampling.NoisyDataFidelity.precond", false]], "prior (class in deepinv.optim)": [[145, "deepinv.optim.Prior", false]], "product_convolution2d() (in module deepinv.physics.functional)": [[235, "deepinv.physics.functional.product_convolution2d", false]], "productconvolutionblurgenerator (class in deepinv.physics.generator)": [[252, "deepinv.physics.generator.ProductConvolutionBlurGenerator", false]], "progressmeter (class in deepinv.utils)": [[297, "deepinv.utils.ProgressMeter", false]], "prox() (deepinv.optim.indicatorl2 method)": [[127, "deepinv.optim.IndicatorL2.prox", false]], "prox() (deepinv.optim.indicatorl2distance method)": [[128, "deepinv.optim.IndicatorL2Distance.prox", false]], "prox() (deepinv.optim.l1 method)": [[129, "deepinv.optim.L1.prox", false]], "prox() (deepinv.optim.l12prior method)": [[130, "deepinv.optim.L12Prior.prox", false]], "prox() (deepinv.optim.l1distance method)": [[131, "deepinv.optim.L1Distance.prox", false]], "prox() (deepinv.optim.l1prior method)": [[132, "deepinv.optim.L1Prior.prox", false]], "prox() (deepinv.optim.l2 method)": [[133, "deepinv.optim.L2.prox", false]], "prox() (deepinv.optim.l2distance method)": [[134, "deepinv.optim.L2Distance.prox", false]], "prox() (deepinv.optim.pnp method)": [[141, "deepinv.optim.PnP.prox", false]], "prox() (deepinv.optim.poissonlikelihooddistance method)": [[143, "deepinv.optim.PoissonLikelihoodDistance.prox", false]], "prox() (deepinv.optim.potential method)": [[144, "deepinv.optim.Potential.prox", false]], "prox() (deepinv.optim.tikhonov method)": [[150, "deepinv.optim.Tikhonov.prox", false]], "prox() (deepinv.optim.tvprior method)": [[149, "deepinv.optim.TVPrior.prox", false]], "prox() (deepinv.optim.waveletprior method)": [[151, "deepinv.optim.WaveletPrior.prox", false]], "prox_conjugate() (deepinv.optim.potential method)": [[144, "deepinv.optim.Potential.prox_conjugate", false]], "prox_d() (deepinv.optim.datafidelity method)": [[123, "deepinv.optim.DataFidelity.prox_d", false]], "prox_d() (deepinv.optim.stackedphysicsdatafidelity method)": [[148, "deepinv.optim.StackedPhysicsDataFidelity.prox_d", false]], "prox_d() (deepinv.optim.zerofidelity method)": [[153, "deepinv.optim.ZeroFidelity.prox_d", false]], "prox_d_conjugate() (deepinv.optim.datafidelity method)": [[123, "deepinv.optim.DataFidelity.prox_d_conjugate", false]], "prox_d_conjugate() (deepinv.optim.stackedphysicsdatafidelity method)": [[148, "deepinv.optim.StackedPhysicsDataFidelity.prox_d_conjugate", false]], "prox_d_conjugate() (deepinv.optim.zerofidelity method)": [[153, "deepinv.optim.ZeroFidelity.prox_d_conjugate", false]], "prox_l0() (deepinv.models.waveletdenoiser method)": [[112, "deepinv.models.WaveletDenoiser.prox_l0", false]], "prox_l1() (deepinv.models.waveletdenoiser method)": [[112, "deepinv.models.WaveletDenoiser.prox_l1", false]], "prox_l2() (deepinv.physics.decomposablephysics method)": [[180, "deepinv.physics.DecomposablePhysics.prox_l2", false]], "prox_l2() (deepinv.physics.downsampling method)": [[183, "deepinv.physics.Downsampling.prox_l2", false]], "prox_l2() (deepinv.physics.linearphysics method)": [[190, "deepinv.physics.LinearPhysics.prox_l2", false]], "prox_tau_fx() (deepinv.models.tvdenoiser method)": [[107, "deepinv.models.TVDenoiser.prox_tau_fx", false]], "psfgenerator (class in deepinv.physics.generator)": [[249, "deepinv.physics.generator.PSFGenerator", false]], "psi() (deepinv.models.waveletdenoiser static method)": [[112, "deepinv.models.WaveletDenoiser.psi", false]], "psi() (deepinv.models.waveletdictdenoiser method)": [[113, "deepinv.models.WaveletDictDenoiser.psi", false]], "psi() (deepinv.optim.waveletprior method)": [[151, "deepinv.optim.WaveletPrior.psi", false]], "psnr (class in deepinv.loss.metric)": [[73, "deepinv.loss.metric.PSNR", false]], "ptychography (class in deepinv.physics)": [[201, "deepinv.physics.Ptychography", false]], "ptychographylinearoperator (class in deepinv.physics)": [[202, "deepinv.physics.PtychographyLinearOperator", false]], "qnr (class in deepinv.loss.metric)": [[74, "deepinv.loss.metric.QNR", false]], "r2rloss (class in deepinv.loss)": [[45, "deepinv.loss.R2RLoss", false]], "radiointerferometry (class in deepinv.physics)": [[203, "deepinv.physics.RadioInterferometry", false]], "radon (class in deepinv.physics.functional)": [[223, "deepinv.physics.functional.Radon", false]], "rand_like() (deepinv.physics.noisemodel method)": [[195, "deepinv.physics.NoiseModel.rand_like", false]], "rand_like() (in module deepinv.utils)": [[316, "deepinv.utils.rand_like", false]], "randn_like() (deepinv.physics.noisemodel method)": [[195, "deepinv.physics.NoiseModel.randn_like", false]], "randn_like() (deepinv.sampling.basesdesolver method)": [[259, "deepinv.sampling.BaseSDESolver.randn_like", false]], "randn_like() (in module deepinv.utils)": [[317, "deepinv.utils.randn_like", false]], "random_latent() (deepinv.models.csgmgenerator method)": [[81, "deepinv.models.CSGMGenerator.random_latent", false]], "randomlossscheduler (class in deepinv.loss)": [[46, "deepinv.loss.RandomLossScheduler", false]], "randommaskgenerator (class in deepinv.physics.generator)": [[253, "deepinv.physics.generator.RandomMaskGenerator", false]], "randomphaseretrieval (class in deepinv.physics)": [[204, "deepinv.physics.RandomPhaseRetrieval", false]], "reconstructor (class in deepinv.models)": [[102, "deepinv.models.Reconstructor", false]], "red (class in deepinv.optim)": [[146, "deepinv.optim.RED", false]], "reflect (class in deepinv.transform)": [[282, "deepinv.transform.Reflect", false]], "relaxation_step() (deepinv.optim.optimiterator method)": [[138, "deepinv.optim.OptimIterator.relaxation_step", false]], "repeat() (deepinv.physics.timemixin static method)": [[213, "deepinv.physics.TimeMixin.repeat", false]], "rescale (class in deepinv.datasets.utils)": [[30, "deepinv.datasets.utils.Rescale", false]], "reset() (deepinv.sampling.montecarlo method)": [[268, "deepinv.sampling.MonteCarlo.reset", false]], "reset() (deepinv.utils.averagemeter method)": [[296, "deepinv.utils.AverageMeter.reset", false]], "reset_metrics() (deepinv.trainer method)": [[12, "deepinv.Trainer.reset_metrics", false]], "reset_rng() (deepinv.physics.generator.physicsgenerator method)": [[251, "deepinv.physics.generator.PhysicsGenerator.reset_rng", false]], "reset_rng() (deepinv.physics.noisemodel method)": [[195, "deepinv.physics.NoiseModel.reset_rng", false]], "reset_rng() (deepinv.sampling.basesdesolver method)": [[259, "deepinv.sampling.BaseSDESolver.reset_rng", false]], "reshape_ths() (deepinv.models.waveletdenoiser method)": [[112, "deepinv.models.WaveletDenoiser.reshape_ths", false]], "restormer (class in deepinv.models)": [[103, "deepinv.models.Restormer", false]], "rng_manual_seed() (deepinv.physics.generator.physicsgenerator method)": [[251, "deepinv.physics.generator.PhysicsGenerator.rng_manual_seed", false]], "rng_manual_seed() (deepinv.physics.noisemodel method)": [[195, "deepinv.physics.NoiseModel.rng_manual_seed", false]], "rng_manual_seed() (deepinv.sampling.basesdesolver method)": [[259, "deepinv.sampling.BaseSDESolver.rng_manual_seed", false]], "roll_reflect_1d() (deepinv.transform.shifttime method)": [[286, "deepinv.transform.ShiftTime.roll_reflect_1d", false]], "rotate (class in deepinv.transform)": [[283, "deepinv.transform.Rotate", false]], "rss() (deepinv.physics.mrimixin static method)": [[193, "deepinv.physics.MRIMixin.rss", false]], "sample() (deepinv.sampling.basesde method)": [[258, "deepinv.sampling.BaseSDE.sample", false]], "sample() (deepinv.sampling.basesdesolver method)": [[259, "deepinv.sampling.BaseSDESolver.sample", false]], "sample_init() (deepinv.sampling.basesde method)": [[258, "deepinv.sampling.BaseSDE.sample_init", false]], "sample_init() (deepinv.sampling.varianceexplodingdiffusion method)": [[274, "deepinv.sampling.VarianceExplodingDiffusion.sample_init", false]], "sample_init() (deepinv.sampling.variancepreservingdiffusion method)": [[275, "deepinv.sampling.VariancePreservingDiffusion.sample_init", false]], "sample_mask() (deepinv.physics.generator.basemaskgenerator method)": [[237, "deepinv.physics.generator.BaseMaskGenerator.sample_mask", false]], "save_best_model() (deepinv.trainer method)": [[12, "deepinv.Trainer.save_best_model", false]], "save_model() (deepinv.trainer method)": [[12, "deepinv.Trainer.save_model", false]], "save_model() (deepinv.training.adversarialtrainer method)": [[279, "deepinv.training.AdversarialTrainer.save_model", false]], "save_simple_dataset() (deepinv.datasets.fastmrislicedataset method)": [[17, "deepinv.datasets.FastMRISliceDataset.save_simple_dataset", false]], "save_videos() (in module deepinv.utils)": [[318, "deepinv.utils.save_videos", false]], "scale (class in deepinv.transform)": [[284, "deepinv.transform.Scale", false]], "scale_t() (deepinv.sampling.diffusionsde method)": [[264, "deepinv.sampling.DiffusionSDE.scale_t", false]], "scan_folder (deepinv.datasets.lidcidrislicedataset.slicesampleidentifier attribute)": [[21, "deepinv.datasets.LidcIdriSliceDataset.SliceSampleIdentifier.scan_folder", false]], "schedule() (deepinv.loss.baselossscheduler method)": [[33, "deepinv.loss.BaseLossScheduler.schedule", false]], "score() (deepinv.optim.scoreprior method)": [[147, "deepinv.optim.ScorePrior.score", false]], "score() (deepinv.sampling.diffusionsde method)": [[264, "deepinv.sampling.DiffusionSDE.score", false]], "score() (deepinv.sampling.posteriordiffusion method)": [[270, "deepinv.sampling.PosteriorDiffusion.score", false]], "scoreloss (class in deepinv.loss)": [[47, "deepinv.loss.ScoreLoss", false]], "scoreloss.scoremodel (class in deepinv.loss)": [[47, "deepinv.loss.ScoreLoss.ScoreModel", false]], "scoreprior (class in deepinv.optim)": [[147, "deepinv.optim.ScorePrior", false]], "scunet (class in deepinv.models)": [[104, "deepinv.models.SCUNet", false]], "sdeoutput (class in deepinv.sampling)": [[271, "deepinv.sampling.SDEOutput", false]], "sensor() (deepinv.physics.physics method)": [[198, "deepinv.physics.Physics.sensor", false]], "sensor() (deepinv.physics.stackedphysics method)": [[210, "deepinv.physics.StackedPhysics.sensor", false]], "sequentialmri (class in deepinv.physics)": [[205, "deepinv.physics.SequentialMRI", false]], "set14hr (class in deepinv.datasets)": [[25, "deepinv.datasets.Set14HR", false]], "set_cov() (deepinv.optim.utils.gaussianmixturemodel method)": [[168, "deepinv.optim.utils.GaussianMixtureModel.set_cov", false]], "set_cov_reg() (deepinv.optim.utils.gaussianmixturemodel method)": [[168, "deepinv.optim.utils.GaussianMixtureModel.set_cov_reg", false]], "set_ls_solver() (deepinv.physics.physics method)": [[198, "deepinv.physics.Physics.set_ls_solver", false]], "set_noise_model() (deepinv.physics.physics method)": [[198, "deepinv.physics.Physics.set_noise_model", false]], "set_noise_model() (deepinv.physics.stackedphysics method)": [[210, "deepinv.physics.StackedPhysics.set_noise_model", false]], "set_weights() (deepinv.optim.utils.gaussianmixturemodel method)": [[168, "deepinv.optim.utils.GaussianMixtureModel.set_weights", false]], "setup_train() (deepinv.trainer method)": [[12, "deepinv.Trainer.setup_train", false]], "setup_train() (deepinv.training.adversarialtrainer method)": [[279, "deepinv.training.AdversarialTrainer.setup_train", false]], "shear() (deepinv.physics.compressivespectralimaging method)": [[178, "deepinv.physics.CompressiveSpectralImaging.shear", false]], "shift (class in deepinv.transform)": [[285, "deepinv.transform.Shift", false]], "shift() (deepinv.physics.ptychographylinearoperator method)": [[202, "deepinv.physics.PtychographyLinearOperator.shift", false]], "shifttime (class in deepinv.transform)": [[286, "deepinv.transform.ShiftTime", false]], "sigma_t() (deepinv.sampling.diffusionsde method)": [[264, "deepinv.sampling.DiffusionSDE.sigma_t", false]], "sigmagenerator (class in deepinv.physics.generator)": [[254, "deepinv.physics.generator.SigmaGenerator", false]], "similarity (class in deepinv.transform.projective)": [[291, "deepinv.transform.projective.Similarity", false]], "simplefastmrislicedataset (class in deepinv.datasets)": [[26, "deepinv.datasets.SimpleFastMRISliceDataset", false]], "simulate_birdcage_csm() (deepinv.physics.multicoilmri method)": [[194, "deepinv.physics.MultiCoilMRI.simulate_birdcage_csm", false]], "sinc_filter() (in module deepinv.physics.blur)": [[221, "deepinv.physics.blur.sinc_filter", false]], "singlephotonlidar (class in deepinv.physics)": [[206, "deepinv.physics.SinglePhotonLidar", false]], "singlepixelcamera (class in deepinv.physics)": [[207, "deepinv.physics.SinglePixelCamera", false]], "skrock (class in deepinv.sampling)": [[272, "deepinv.sampling.SKRock", false]], "slice_fname (deepinv.datasets.lidcidrislicedataset.slicesampleidentifier attribute)": [[21, "deepinv.datasets.LidcIdriSliceDataset.SliceSampleIdentifier.slice_fname", false]], "slice_ind (deepinv.datasets.fastmrislicedataset.slicesampleid attribute)": [[17, "deepinv.datasets.FastMRISliceDataset.SliceSampleID.slice_ind", false]], "smiteration (class in deepinv.optim.optim_iterators)": [[163, "deepinv.optim.optim_iterators.SMIteration", false]], "spacevaryingblur (class in deepinv.physics)": [[208, "deepinv.physics.SpaceVaryingBlur", false]], "spectral_methods() (in module deepinv.optim.phase_retrieval)": [[167, "deepinv.optim.phase_retrieval.spectral_methods", false]], "spectralanglemapper (class in deepinv.loss.metric)": [[76, "deepinv.loss.metric.SpectralAngleMapper", false]], "split() (deepinv.loss.phase2phaseloss static method)": [[44, "deepinv.loss.Phase2PhaseLoss.split", false]], "split() (deepinv.loss.splittingloss static method)": [[48, "deepinv.loss.SplittingLoss.split", false]], "splittingloss (class in deepinv.loss)": [[48, "deepinv.loss.SplittingLoss", false]], "splittingloss.splittingmodel (class in deepinv.loss)": [[48, "deepinv.loss.SplittingLoss.SplittingModel", false]], "ssim (class in deepinv.loss.metric)": [[75, "deepinv.loss.metric.SSIM", false]], "stack() (deepinv.physics.linearphysics method)": [[190, "deepinv.physics.LinearPhysics.stack", false]], "stack() (deepinv.physics.physics method)": [[198, "deepinv.physics.Physics.stack", false]], "stack() (in module deepinv.physics)": [[257, "deepinv.physics.stack", false]], "stackedlinearphysics (class in deepinv.physics)": [[209, "deepinv.physics.StackedLinearPhysics", false]], "stackedphysics (class in deepinv.physics)": [[210, "deepinv.physics.StackedPhysics", false]], "stackedphysicsdatafidelity (class in deepinv.optim)": [[148, "deepinv.optim.StackedPhysicsDataFidelity", false]], "stackedphysicsloss (class in deepinv.loss)": [[49, "deepinv.loss.StackedPhysicsLoss", false]], "state_dict() (deepinv.training.adversarialoptimizer method)": [[278, "deepinv.training.AdversarialOptimizer.state_dict", false]], "step() (deepinv.physics.generator.basemaskgenerator method)": [[237, "deepinv.physics.generator.BaseMaskGenerator.step", false]], "step() (deepinv.physics.generator.bernoullisplittingmaskgenerator method)": [[238, "deepinv.physics.generator.BernoulliSplittingMaskGenerator.step", false]], "step() (deepinv.physics.generator.confocalblurgenerator3d method)": [[239, "deepinv.physics.generator.ConfocalBlurGenerator3D.step", false]], "step() (deepinv.physics.generator.diffractionblurgenerator method)": [[240, "deepinv.physics.generator.DiffractionBlurGenerator.step", false]], "step() (deepinv.physics.generator.diffractionblurgenerator3d method)": [[241, "deepinv.physics.generator.DiffractionBlurGenerator3D.step", false]], "step() (deepinv.physics.generator.downsamplinggenerator method)": [[242, "deepinv.physics.generator.DownsamplingGenerator.step", false]], "step() (deepinv.physics.generator.gaingenerator method)": [[244, "deepinv.physics.generator.GainGenerator.step", false]], "step() (deepinv.physics.generator.generatormixture method)": [[247, "deepinv.physics.generator.GeneratorMixture.step", false]], "step() (deepinv.physics.generator.motionblurgenerator method)": [[248, "deepinv.physics.generator.MotionBlurGenerator.step", false]], "step() (deepinv.physics.generator.physicsgenerator method)": [[251, "deepinv.physics.generator.PhysicsGenerator.step", false]], "step() (deepinv.physics.generator.productconvolutionblurgenerator method)": [[252, "deepinv.physics.generator.ProductConvolutionBlurGenerator.step", false]], "step() (deepinv.physics.generator.sigmagenerator method)": [[254, "deepinv.physics.generator.SigmaGenerator.step", false]], "step() (deepinv.sampling.basesdesolver method)": [[259, "deepinv.sampling.BaseSDESolver.step", false]], "step() (deepinv.trainer method)": [[12, "deepinv.Trainer.step", false]], "steplossscheduler (class in deepinv.loss)": [[50, "deepinv.loss.StepLossScheduler", false]], "stop_criterion() (deepinv.trainer method)": [[12, "deepinv.Trainer.stop_criterion", false]], "str2filter() (deepinv.physics.generator.downsamplinggenerator method)": [[242, "deepinv.physics.generator.DownsamplingGenerator.str2filter", false]], "structuredrandom (class in deepinv.physics)": [[211, "deepinv.physics.StructuredRandom", false]], "structuredrandomphaseretrieval (class in deepinv.physics)": [[212, "deepinv.physics.StructuredRandomPhaseRetrieval", false]], "supadversarialdiscriminatorloss (class in deepinv.loss.adversarial)": [[59, "deepinv.loss.adversarial.SupAdversarialDiscriminatorLoss", false]], "supadversarialgeneratorloss (class in deepinv.loss.adversarial)": [[60, "deepinv.loss.adversarial.SupAdversarialGeneratorLoss", false]], "suploss (class in deepinv.loss)": [[51, "deepinv.loss.SupLoss", false]], "suregaussianloss (class in deepinv.loss)": [[52, "deepinv.loss.SureGaussianLoss", false]], "surepgloss (class in deepinv.loss)": [[53, "deepinv.loss.SurePGLoss", false]], "surepoissonloss (class in deepinv.loss)": [[54, "deepinv.loss.SurePoissonLoss", false]], "swinir (class in deepinv.models)": [[105, "deepinv.models.SwinIR", false]], "symmetrize() (deepinv.transform.transform method)": [[287, "deepinv.transform.Transform.symmetrize", false]], "tensorlist (class in deepinv.utils)": [[298, "deepinv.utils.TensorList", false]], "test() (deepinv.trainer method)": [[12, "deepinv.Trainer.test", false]], "test() (in module deepinv)": [[276, "deepinv.test", false]], "tgvdenoiser (class in deepinv.models)": [[106, "deepinv.models.TGVDenoiser", false]], "threshold_3d() (deepinv.models.waveletdenoiser method)": [[112, "deepinv.models.WaveletDenoiser.threshold_3D", false]], "threshold_nd() (deepinv.models.waveletdenoiser method)": [[112, "deepinv.models.WaveletDenoiser.threshold_ND", false]], "thresold_2d() (deepinv.models.waveletdenoiser method)": [[112, "deepinv.models.WaveletDenoiser.thresold_2D", false]], "thresold_func() (deepinv.models.waveletdenoiser method)": [[112, "deepinv.models.WaveletDenoiser.thresold_func", false]], "tikhonov (class in deepinv.optim)": [[150, "deepinv.optim.Tikhonov", false]], "timeagnosticnet (class in deepinv.models)": [[108, "deepinv.models.TimeAgnosticNet", false]], "timeaveragingnet (class in deepinv.models)": [[109, "deepinv.models.TimeAveragingNet", false]], "timemixin (class in deepinv.physics)": [[213, "deepinv.physics.TimeMixin", false]], "to_complex_denoiser() (in module deepinv.models.complex)": [[114, "deepinv.models.complex.to_complex_denoiser", false]], "to_static() (deepinv.physics.dynamicmri method)": [[184, "deepinv.physics.DynamicMRI.to_static", false]], "to_torch_complex() (deepinv.physics.mrimixin static method)": [[193, "deepinv.physics.MRIMixin.to_torch_complex", false]], "tocomplex (class in deepinv.datasets.utils)": [[31, "deepinv.datasets.utils.ToComplex", false]], "tomography (class in deepinv.physics)": [[214, "deepinv.physics.Tomography", false]], "torch_shuffle() (deepinv.datasets.fastmrislicedataset static method)": [[17, "deepinv.datasets.FastMRISliceDataset.torch_shuffle", false]], "train() (deepinv.trainer method)": [[12, "deepinv.Trainer.train", false]], "train() (in module deepinv)": [[277, "deepinv.train", false]], "trainer (class in deepinv)": [[12, "deepinv.Trainer", false]], "transform (class in deepinv.transform)": [[287, "deepinv.transform.Transform", false]], "transform() (deepinv.transform.transform method)": [[287, "deepinv.transform.Transform.transform", false]], "tvdenoiser (class in deepinv.models)": [[107, "deepinv.models.TVDenoiser", false]], "tvloss (class in deepinv.loss)": [[55, "deepinv.loss.TVLoss", false]], "tvprior (class in deepinv.optim)": [[149, "deepinv.optim.TVPrior", false]], "u() (deepinv.physics.decomposablephysics method)": [[180, "deepinv.physics.DecomposablePhysics.U", false]], "u_adjoint() (deepinv.physics.decomposablephysics method)": [[180, "deepinv.physics.DecomposablePhysics.U_adjoint", false]], "uairgeneratorloss (class in deepinv.loss.adversarial)": [[61, "deepinv.loss.adversarial.UAIRGeneratorLoss", false]], "ula (class in deepinv.sampling)": [[273, "deepinv.sampling.ULA", false]], "unet (class in deepinv.models)": [[110, "deepinv.models.UNet", false]], "unflatten() (deepinv.physics.compressivespectralimaging method)": [[178, "deepinv.physics.CompressiveSpectralImaging.unflatten", false]], "unflatten() (deepinv.physics.timemixin static method)": [[213, "deepinv.physics.TimeMixin.unflatten", false]], "unfolded_builder() (in module deepinv.unfolded)": [[295, "deepinv.unfolded.unfolded_builder", false]], "uniformgaussiannoise (class in deepinv.physics)": [[215, "deepinv.physics.UniformGaussianNoise", false]], "uniformnoise (class in deepinv.physics)": [[216, "deepinv.physics.UniformNoise", false]], "unsupadversarialdiscriminatorloss (class in deepinv.loss.adversarial)": [[62, "deepinv.loss.adversarial.UnsupAdversarialDiscriminatorLoss", false]], "unsupadversarialgeneratorloss (class in deepinv.loss.adversarial)": [[63, "deepinv.loss.adversarial.UnsupAdversarialGeneratorLoss", false]], "update() (deepinv.physics.physics method)": [[198, "deepinv.physics.Physics.update", false]], "update() (deepinv.utils.averagemeter method)": [[296, "deepinv.utils.AverageMeter.update", false]], "update_data_fidelity_fn() (deepinv.optim.baseoptim method)": [[117, "deepinv.optim.BaseOptim.update_data_fidelity_fn", false]], "update_metrics_fn() (deepinv.optim.baseoptim method)": [[117, "deepinv.optim.BaseOptim.update_metrics_fn", false]], "update_parameters() (deepinv.physics.blur method)": [[175, "deepinv.physics.Blur.update_parameters", false]], "update_parameters() (deepinv.physics.blurfft method)": [[176, "deepinv.physics.BlurFFT.update_parameters", false]], "update_parameters() (deepinv.physics.downsampling method)": [[183, "deepinv.physics.Downsampling.update_parameters", false]], "update_parameters() (deepinv.physics.gammanoise method)": [[185, "deepinv.physics.GammaNoise.update_parameters", false]], "update_parameters() (deepinv.physics.gaussiannoise method)": [[186, "deepinv.physics.GaussianNoise.update_parameters", false]], "update_parameters() (deepinv.physics.hyperspectralunmixing method)": [[188, "deepinv.physics.HyperSpectralUnmixing.update_parameters", false]], "update_parameters() (deepinv.physics.logpoissonnoise method)": [[191, "deepinv.physics.LogPoissonNoise.update_parameters", false]], "update_parameters() (deepinv.physics.mri method)": [[192, "deepinv.physics.MRI.update_parameters", false]], "update_parameters() (deepinv.physics.multicoilmri method)": [[194, "deepinv.physics.MultiCoilMRI.update_parameters", false]], "update_parameters() (deepinv.physics.physics method)": [[198, "deepinv.physics.Physics.update_parameters", false]], "update_parameters() (deepinv.physics.poissongaussiannoise method)": [[199, "deepinv.physics.PoissonGaussianNoise.update_parameters", false]], "update_parameters() (deepinv.physics.poissonnoise method)": [[200, "deepinv.physics.PoissonNoise.update_parameters", false]], "update_parameters() (deepinv.physics.spacevaryingblur method)": [[208, "deepinv.physics.SpaceVaryingBlur.update_parameters", false]], "update_parameters() (deepinv.physics.stackedlinearphysics method)": [[209, "deepinv.physics.StackedLinearPhysics.update_parameters", false]], "update_parameters() (deepinv.physics.stackedphysics method)": [[210, "deepinv.physics.StackedPhysics.update_parameters", false]], "update_parameters() (deepinv.physics.uniformnoise method)": [[216, "deepinv.physics.UniformNoise.update_parameters", false]], "update_params_fn() (deepinv.optim.baseoptim method)": [[117, "deepinv.optim.BaseOptim.update_params_fn", false]], "update_prior_fn() (deepinv.optim.baseoptim method)": [[117, "deepinv.optim.BaseOptim.update_prior_fn", false]], "urban100hr (class in deepinv.datasets)": [[27, "deepinv.datasets.Urban100HR", false]], "v() (deepinv.physics.decomposablephysics method)": [[180, "deepinv.physics.DecomposablePhysics.V", false]], "v_adjoint() (deepinv.physics.decomposablephysics method)": [[180, "deepinv.physics.DecomposablePhysics.V_adjoint", false]], "var_has_converged() (deepinv.sampling.montecarlo method)": [[268, "deepinv.sampling.MonteCarlo.var_has_converged", false]], "varianceexplodingdiffusion (class in deepinv.sampling)": [[274, "deepinv.sampling.VarianceExplodingDiffusion", false]], "variancepreservingdiffusion (class in deepinv.sampling)": [[275, "deepinv.sampling.VariancePreservingDiffusion", false]], "varnet (class in deepinv.models)": [[111, "deepinv.models.VarNet", false]], "verify_split_dataset_integrity() (deepinv.datasets.div2k method)": [[15, "deepinv.datasets.DIV2K.verify_split_dataset_integrity", false]], "verify_split_dataset_integrity() (deepinv.datasets.lsdirhr method)": [[22, "deepinv.datasets.LsdirHR.verify_split_dataset_integrity", false]], "waveletdenoiser (class in deepinv.models)": [[112, "deepinv.models.WaveletDenoiser", false]], "waveletdictdenoiser (class in deepinv.models)": [[113, "deepinv.models.WaveletDictDenoiser", false]], "waveletprior (class in deepinv.optim)": [[151, "deepinv.optim.WaveletPrior", false]], "wrap_flatten_c() (deepinv.physics.timemixin static method)": [[213, "deepinv.physics.TimeMixin.wrap_flatten_C", false]], "zero_grad() (deepinv.training.adversarialoptimizer method)": [[278, "deepinv.training.AdversarialOptimizer.zero_grad", false]], "zerodistance (class in deepinv.optim)": [[152, "deepinv.optim.ZeroDistance", false]], "zerofidelity (class in deepinv.optim)": [[153, "deepinv.optim.ZeroFidelity", false]], "zeros_like() (in module deepinv.utils)": [[319, "deepinv.utils.zeros_like", false]]}, "objects": {"deepinv": [[12, 0, 1, "", "Trainer"], [276, 3, 1, "", "test"], [277, 3, 1, "", "train"]], "deepinv.Trainer": [[12, 1, 1, "", "check_clip_grad"], [12, 1, 1, "", "compute_loss"], [12, 1, 1, "", "compute_metrics"], [12, 1, 1, "", "get_samples"], [12, 1, 1, "", "get_samples_offline"], [12, 1, 1, "", "get_samples_online"], [12, 1, 1, "", "load_best_model"], [12, 1, 1, "", "load_model"], [12, 1, 1, "", "log_metrics_wandb"], [12, 1, 1, "", "model_inference"], [12, 1, 1, "", "no_learning_inference"], [12, 1, 1, "", "plot"], [12, 1, 1, "", "reset_metrics"], [12, 1, 1, "", "save_best_model"], [12, 1, 1, "", "save_model"], [12, 1, 1, "", "setup_train"], [12, 1, 1, "", "step"], [12, 1, 1, "", "stop_criterion"], [12, 1, 1, "", "test"], [12, 1, 1, "", "train"]], "deepinv.datasets": [[13, 0, 1, "", "CBSD68"], [14, 0, 1, "", "CMRxReconSliceDataset"], [15, 0, 1, "", "DIV2K"], [16, 0, 1, "", "FMD"], [17, 0, 1, "", "FastMRISliceDataset"], [18, 0, 1, "", "Flickr2kHR"], [19, 0, 1, "", "HDF5Dataset"], [20, 0, 1, "", "Kohler"], [21, 0, 1, "", "LidcIdriSliceDataset"], [22, 0, 1, "", "LsdirHR"], [23, 0, 1, "", "NBUDataset"], [24, 0, 1, "", "PatchDataset"], [25, 0, 1, "", "Set14HR"], [26, 0, 1, "", "SimpleFastMRISliceDataset"], [27, 0, 1, "", "Urban100HR"], [28, 3, 1, "", "generate_dataset"]], "deepinv.datasets.CBSD68": [[13, 1, 1, "", "check_dataset_exists"]], "deepinv.datasets.DIV2K": [[15, 1, 1, "", "verify_split_dataset_integrity"]], "deepinv.datasets.FMD": [[16, 0, 1, "", "NoisySampleIdentifier"]], "deepinv.datasets.FMD.NoisySampleIdentifier": [[16, 2, 1, "", "fname"], [16, 2, 1, "", "fov"], [16, 2, 1, "", "img_type"], [16, 2, 1, "", "noise_dirname"]], "deepinv.datasets.FastMRISliceDataset": [[17, 0, 1, "", "SliceSampleID"], [17, 1, 1, "", "metadata_cache_manager"], [17, 1, 1, "", "save_simple_dataset"], [17, 1, 1, "", "torch_shuffle"]], "deepinv.datasets.FastMRISliceDataset.SliceSampleID": [[17, 2, 1, "", "fname"], [17, 2, 1, "", "metadata"], [17, 2, 1, "", "slice_ind"]], "deepinv.datasets.Flickr2kHR": [[18, 1, 1, "", "check_dataset_exists"]], "deepinv.datasets.Kohler": [[20, 1, 1, "", "download"], [20, 1, 1, "", "get_item"]], "deepinv.datasets.LidcIdriSliceDataset": [[21, 0, 1, "", "SliceSampleIdentifier"]], "deepinv.datasets.LidcIdriSliceDataset.SliceSampleIdentifier": [[21, 2, 1, "", "patient_id"], [21, 2, 1, "", "scan_folder"], [21, 2, 1, "", "slice_fname"]], "deepinv.datasets.LsdirHR": [[22, 1, 1, "", "verify_split_dataset_integrity"]], "deepinv.datasets.NBUDataset": [[23, 1, 1, "", "check_dataset_exists"]], "deepinv.datasets.Set14HR": [[25, 1, 1, "", "check_dataset_exists"]], "deepinv.datasets.Urban100HR": [[27, 1, 1, "", "check_dataset_exists"]], "deepinv.datasets.utils": [[29, 0, 1, "", "PlaceholderDataset"], [30, 0, 1, "", "Rescale"], [31, 0, 1, "", "ToComplex"]], "deepinv.datasets.utils.Rescale": [[30, 1, 1, "", "forward"]], "deepinv.datasets.utils.ToComplex": [[31, 1, 1, "", "forward"]], "deepinv.loss": [[32, 0, 1, "", "Artifact2ArtifactLoss"], [33, 0, 1, "", "BaseLossScheduler"], [34, 0, 1, "", "EILoss"], [35, 0, 1, "", "FNEJacobianSpectralNorm"], [36, 0, 1, "", "InterleavedEpochLossScheduler"], [37, 0, 1, "", "InterleavedLossScheduler"], [38, 0, 1, "", "JacobianSpectralNorm"], [39, 0, 1, "", "Loss"], [40, 0, 1, "", "MCLoss"], [41, 0, 1, "", "MOEILoss"], [42, 0, 1, "", "MOILoss"], [43, 0, 1, "", "Neighbor2Neighbor"], [44, 0, 1, "", "Phase2PhaseLoss"], [45, 0, 1, "", "R2RLoss"], [46, 0, 1, "", "RandomLossScheduler"], [47, 0, 1, "", "ScoreLoss"], [48, 0, 1, "", "SplittingLoss"], [49, 0, 1, "", "StackedPhysicsLoss"], [50, 0, 1, "", "StepLossScheduler"], [51, 0, 1, "", "SupLoss"], [52, 0, 1, "", "SureGaussianLoss"], [53, 0, 1, "", "SurePGLoss"], [54, 0, 1, "", "SurePoissonLoss"], [55, 0, 1, "", "TVLoss"]], "deepinv.loss.BaseLossScheduler": [[33, 1, 1, "", "adapt_model"], [33, 1, 1, "", "forward"], [33, 1, 1, "", "schedule"]], "deepinv.loss.EILoss": [[34, 1, 1, "", "forward"]], "deepinv.loss.FNEJacobianSpectralNorm": [[35, 1, 1, "", "forward"]], "deepinv.loss.JacobianSpectralNorm": [[38, 1, 1, "", "forward"]], "deepinv.loss.Loss": [[39, 1, 1, "", "adapt_model"], [39, 1, 1, "", "forward"]], "deepinv.loss.MCLoss": [[40, 1, 1, "", "forward"]], "deepinv.loss.MOEILoss": [[41, 1, 1, "", "forward"]], "deepinv.loss.MOILoss": [[42, 1, 1, "", "forward"], [42, 1, 1, "", "next_physics"]], "deepinv.loss.Neighbor2Neighbor": [[43, 1, 1, "", "forward"]], "deepinv.loss.Phase2PhaseLoss": [[44, 1, 1, "", "adapt_model"], [44, 1, 1, "", "split"]], "deepinv.loss.R2RLoss": [[45, 1, 1, "", "adapt_model"], [45, 1, 1, "", "forward"]], "deepinv.loss.ScoreLoss": [[47, 0, 1, "", "ScoreModel"], [47, 1, 1, "", "adapt_model"], [47, 1, 1, "", "forward"]], "deepinv.loss.ScoreLoss.ScoreModel": [[47, 1, 1, "", "forward"]], "deepinv.loss.SplittingLoss": [[48, 0, 1, "", "SplittingModel"], [48, 1, 1, "", "adapt_model"], [48, 1, 1, "", "forward"], [48, 1, 1, "", "split"]], "deepinv.loss.SplittingLoss.SplittingModel": [[48, 1, 1, "", "forward"]], "deepinv.loss.StackedPhysicsLoss": [[49, 1, 1, "", "forward"]], "deepinv.loss.SupLoss": [[51, 1, 1, "", "forward"]], "deepinv.loss.SureGaussianLoss": [[52, 1, 1, "", "forward"]], "deepinv.loss.SurePGLoss": [[53, 1, 1, "", "forward"]], "deepinv.loss.SurePoissonLoss": [[54, 1, 1, "", "forward"]], "deepinv.loss.TVLoss": [[55, 1, 1, "", "forward"]], "deepinv.loss.adversarial": [[56, 0, 1, "", "DiscriminatorLoss"], [57, 0, 1, "", "DiscriminatorMetric"], [58, 0, 1, "", "GeneratorLoss"], [59, 0, 1, "", "SupAdversarialDiscriminatorLoss"], [60, 0, 1, "", "SupAdversarialGeneratorLoss"], [61, 0, 1, "", "UAIRGeneratorLoss"], [62, 0, 1, "", "UnsupAdversarialDiscriminatorLoss"], [63, 0, 1, "", "UnsupAdversarialGeneratorLoss"]], "deepinv.loss.adversarial.DiscriminatorLoss": [[56, 1, 1, "", "adversarial_loss"]], "deepinv.loss.adversarial.GeneratorLoss": [[58, 1, 1, "", "adversarial_loss"]], "deepinv.loss.adversarial.SupAdversarialDiscriminatorLoss": [[59, 1, 1, "", "forward"]], "deepinv.loss.adversarial.SupAdversarialGeneratorLoss": [[60, 1, 1, "", "forward"]], "deepinv.loss.adversarial.UAIRGeneratorLoss": [[61, 1, 1, "", "forward"]], "deepinv.loss.adversarial.UnsupAdversarialDiscriminatorLoss": [[62, 1, 1, "", "forward"]], "deepinv.loss.adversarial.UnsupAdversarialGeneratorLoss": [[63, 1, 1, "", "forward"]], "deepinv.loss.metric": [[64, 0, 1, "", "ERGAS"], [65, 0, 1, "", "L1L2"], [66, 0, 1, "", "LPIPS"], [67, 0, 1, "", "LpNorm"], [68, 0, 1, "", "MAE"], [69, 0, 1, "", "MSE"], [70, 0, 1, "", "Metric"], [71, 0, 1, "", "NIQE"], [72, 0, 1, "", "NMSE"], [73, 0, 1, "", "PSNR"], [74, 0, 1, "", "QNR"], [75, 0, 1, "", "SSIM"], [76, 0, 1, "", "SpectralAngleMapper"]], "deepinv.loss.metric.Metric": [[70, 1, 1, "", "__add__"], [70, 1, 1, "", "forward"], [70, 1, 1, "", "invert_metric"], [70, 1, 1, "", "metric"]], "deepinv.loss.metric.QNR": [[74, 1, 1, "", "D_lambda"], [74, 1, 1, "", "D_s"], [74, 1, 1, "", "metric"]], "deepinv.models": [[77, 0, 1, "", "ADMUNet"], [78, 0, 1, "", "ArtifactRemoval"], [79, 0, 1, "", "AutoEncoder"], [80, 0, 1, "", "BM3D"], [81, 0, 1, "", "CSGMGenerator"], [82, 0, 1, "", "ConvDecoder"], [83, 0, 1, "", "DCGANDiscriminator"], [84, 0, 1, "", "DCGANGenerator"], [85, 0, 1, "", "DRUNet"], [86, 0, 1, "", "DeepImagePrior"], [87, 0, 1, "", "Denoiser"], [88, 0, 1, "", "DiffUNet"], [89, 0, 1, "", "DnCNN"], [90, 0, 1, "", "EPLLDenoiser"], [91, 0, 1, "", "ESRGANDiscriminator"], [92, 0, 1, "", "EquivariantDenoiser"], [93, 0, 1, "", "GSDRUNet"], [94, 0, 1, "", "ICNN"], [95, 0, 1, "", "MedianFilter"], [96, 0, 1, "", "MoDL"], [97, 0, 1, "", "NCSNpp"], [98, 0, 1, "", "PDNet_DualBlock"], [99, 0, 1, "", "PDNet_PrimalBlock"], [100, 0, 1, "", "PanNet"], [101, 0, 1, "", "PatchGANDiscriminator"], [102, 0, 1, "", "Reconstructor"], [103, 0, 1, "", "Restormer"], [104, 0, 1, "", "SCUNet"], [105, 0, 1, "", "SwinIR"], [106, 0, 1, "", "TGVDenoiser"], [107, 0, 1, "", "TVDenoiser"], [108, 0, 1, "", "TimeAgnosticNet"], [109, 0, 1, "", "TimeAveragingNet"], [110, 0, 1, "", "UNet"], [111, 0, 1, "", "VarNet"], [112, 0, 1, "", "WaveletDenoiser"], [113, 0, 1, "", "WaveletDictDenoiser"]], "deepinv.models.ADMUNet": [[77, 1, 1, "", "forward"], [77, 1, 1, "", "forward_unet"]], "deepinv.models.ArtifactRemoval": [[78, 1, 1, "", "backbone_inference"], [78, 1, 1, "", "forward"]], "deepinv.models.BM3D": [[80, 1, 1, "", "forward"]], "deepinv.models.CSGMGenerator": [[81, 1, 1, "", "forward"], [81, 1, 1, "", "optimize_z"], [81, 1, 1, "", "random_latent"]], "deepinv.models.ConvDecoder": [[82, 1, 1, "", "forward"]], "deepinv.models.DCGANDiscriminator": [[83, 1, 1, "", "forward"]], "deepinv.models.DCGANGenerator": [[84, 1, 1, "", "forward"]], "deepinv.models.DRUNet": [[85, 1, 1, "", "forward"]], "deepinv.models.DeepImagePrior": [[86, 1, 1, "", "forward"]], "deepinv.models.Denoiser": [[87, 1, 1, "", "forward"]], "deepinv.models.DiffUNet": [[88, 1, 1, "", "convert_to_fp16"], [88, 1, 1, "", "convert_to_fp32"], [88, 1, 1, "", "find_nearest"], [88, 1, 1, "", "forward"], [88, 1, 1, "", "forward_denoise"], [88, 1, 1, "", "forward_diffusion"], [88, 1, 1, "", "get_alpha_prod"], [88, 1, 1, "", "patch_forward"]], "deepinv.models.DnCNN": [[89, 1, 1, "", "forward"]], "deepinv.models.EPLLDenoiser": [[90, 1, 1, "", "forward"]], "deepinv.models.ESRGANDiscriminator": [[91, 1, 1, "", "forward"]], "deepinv.models.EquivariantDenoiser": [[92, 1, 1, "", "forward"]], "deepinv.models.ICNN": [[94, 1, 1, "", "forward"], [94, 1, 1, "", "grad"]], "deepinv.models.NCSNpp": [[97, 1, 1, "", "forward"], [97, 1, 1, "", "forward_unet"]], "deepinv.models.PDNet_DualBlock": [[98, 1, 1, "", "forward"]], "deepinv.models.PDNet_PrimalBlock": [[99, 1, 1, "", "forward"]], "deepinv.models.PanNet": [[100, 1, 1, "", "create_sampler"], [100, 1, 1, "", "forward"]], "deepinv.models.PatchGANDiscriminator": [[101, 1, 1, "", "forward"]], "deepinv.models.Reconstructor": [[102, 1, 1, "", "forward"]], "deepinv.models.Restormer": [[103, 1, 1, "", "forward"], [103, 1, 1, "", "forward_restormer"], [103, 1, 1, "", "is_standard_deblurring_network"], [103, 1, 1, "", "is_standard_denoising_network"], [103, 1, 1, "", "is_standard_deraining_network"]], "deepinv.models.SwinIR": [[105, 1, 1, "", "forward"]], "deepinv.models.TGVDenoiser": [[106, 1, 1, "", "epsilon"], [106, 1, 1, "", "epsilon_adjoint"], [106, 1, 1, "", "forward"], [106, 1, 1, "", "nabla"], [106, 1, 1, "", "nabla_adjoint"]], "deepinv.models.TVDenoiser": [[107, 1, 1, "", "forward"], [107, 1, 1, "", "nabla"], [107, 1, 1, "", "nabla_adjoint"], [107, 1, 1, "", "prox_tau_fx"]], "deepinv.models.TimeAgnosticNet": [[108, 1, 1, "", "forward"]], "deepinv.models.TimeAveragingNet": [[109, 1, 1, "", "forward"]], "deepinv.models.UNet": [[110, 1, 1, "", "forward"]], "deepinv.models.VarNet": [[111, 1, 1, "", "backbone_inference"]], "deepinv.models.WaveletDenoiser": [[112, 1, 1, "", "crop_output"], [112, 1, 1, "", "dwt"], [112, 1, 1, "", "flatten_coeffs"], [112, 1, 1, "", "forward"], [112, 1, 1, "", "hard_threshold_topk"], [112, 1, 1, "", "iwt"], [112, 1, 1, "", "pad_input"], [112, 1, 1, "", "prox_l0"], [112, 1, 1, "", "prox_l1"], [112, 1, 1, "", "psi"], [112, 1, 1, "", "reshape_ths"], [112, 1, 1, "", "threshold_3D"], [112, 1, 1, "", "threshold_ND"], [112, 1, 1, "", "thresold_2D"], [112, 1, 1, "", "thresold_func"]], "deepinv.models.WaveletDictDenoiser": [[113, 1, 1, "", "forward"], [113, 1, 1, "", "psi"]], "deepinv.models.complex": [[114, 3, 1, "", "to_complex_denoiser"]], "deepinv.optim": [[115, 0, 1, "", "AmplitudeLoss"], [116, 0, 1, "", "AmplitudeLossDistance"], [117, 0, 1, "", "BaseOptim"], [118, 0, 1, "", "Bregman"], [119, 0, 1, "", "BregmanL2"], [120, 0, 1, "", "Bregman_ICNN"], [121, 0, 1, "", "BurgEntropy"], [122, 0, 1, "", "DPIR"], [123, 0, 1, "", "DataFidelity"], [124, 0, 1, "", "Distance"], [125, 0, 1, "", "EPLL"], [126, 0, 1, "", "FixedPoint"], [127, 0, 1, "", "IndicatorL2"], [128, 0, 1, "", "IndicatorL2Distance"], [129, 0, 1, "", "L1"], [130, 0, 1, "", "L12Prior"], [131, 0, 1, "", "L1Distance"], [132, 0, 1, "", "L1Prior"], [133, 0, 1, "", "L2"], [134, 0, 1, "", "L2Distance"], [135, 0, 1, "", "LogPoissonLikelihood"], [136, 0, 1, "", "LogPoissonLikelihoodDistance"], [137, 0, 1, "", "NegEntropy"], [138, 0, 1, "", "OptimIterator"], [139, 0, 1, "", "PatchNR"], [140, 0, 1, "", "PatchPrior"], [141, 0, 1, "", "PnP"], [142, 0, 1, "", "PoissonLikelihood"], [143, 0, 1, "", "PoissonLikelihoodDistance"], [144, 0, 1, "", "Potential"], [145, 0, 1, "", "Prior"], [146, 0, 1, "", "RED"], [147, 0, 1, "", "ScorePrior"], [148, 0, 1, "", "StackedPhysicsDataFidelity"], [149, 0, 1, "", "TVPrior"], [150, 0, 1, "", "Tikhonov"], [151, 0, 1, "", "WaveletPrior"], [152, 0, 1, "", "ZeroDistance"], [153, 0, 1, "", "ZeroFidelity"], [154, 3, 1, "", "optim_builder"]], "deepinv.optim.AmplitudeLossDistance": [[116, 1, 1, "", "fn"], [116, 1, 1, "", "grad"]], "deepinv.optim.BaseOptim": [[117, 1, 1, "", "check_conv_fn"], [117, 1, 1, "", "check_iteration_fn"], [117, 1, 1, "", "forward"], [117, 1, 1, "", "init_iterate_fn"], [117, 1, 1, "", "init_metrics_fn"], [117, 1, 1, "", "update_data_fidelity_fn"], [117, 1, 1, "", "update_metrics_fn"], [117, 1, 1, "", "update_params_fn"], [117, 1, 1, "", "update_prior_fn"]], "deepinv.optim.Bregman": [[118, 1, 1, "", "MD_step"], [118, 1, 1, "", "div"]], "deepinv.optim.BregmanL2": [[119, 1, 1, "", "conjugate"], [119, 1, 1, "", "div"], [119, 1, 1, "", "fn"], [119, 1, 1, "", "grad"], [119, 1, 1, "", "grad_conj"]], "deepinv.optim.Bregman_ICNN": [[120, 1, 1, "", "conjugate"], [120, 1, 1, "", "fn"]], "deepinv.optim.BurgEntropy": [[121, 1, 1, "", "conjugate"], [121, 1, 1, "", "fn"], [121, 1, 1, "", "grad"], [121, 1, 1, "", "grad_conj"]], "deepinv.optim.DataFidelity": [[123, 1, 1, "", "fn"], [123, 1, 1, "", "grad"], [123, 1, 1, "", "grad_d"], [123, 1, 1, "", "prox_d"], [123, 1, 1, "", "prox_d_conjugate"]], "deepinv.optim.Distance": [[124, 1, 1, "", "fn"], [124, 1, 1, "", "forward"]], "deepinv.optim.EPLL": [[125, 1, 1, "", "forward"], [125, 1, 1, "", "negative_log_likelihood"]], "deepinv.optim.FixedPoint": [[126, 1, 1, "", "anderson_acceleration_step"], [126, 1, 1, "", "forward"], [126, 1, 1, "", "init_anderson_acceleration"]], "deepinv.optim.IndicatorL2": [[127, 1, 1, "", "prox"]], "deepinv.optim.IndicatorL2Distance": [[128, 1, 1, "", "fn"], [128, 1, 1, "", "prox"]], "deepinv.optim.L1": [[129, 1, 1, "", "prox"]], "deepinv.optim.L12Prior": [[130, 1, 1, "", "fn"], [130, 1, 1, "", "prox"]], "deepinv.optim.L1Distance": [[131, 1, 1, "", "grad"], [131, 1, 1, "", "prox"]], "deepinv.optim.L1Prior": [[132, 1, 1, "", "fn"], [132, 1, 1, "", "prox"]], "deepinv.optim.L2": [[133, 1, 1, "", "prox"]], "deepinv.optim.L2Distance": [[134, 1, 1, "", "fn"], [134, 1, 1, "", "grad"], [134, 1, 1, "", "prox"]], "deepinv.optim.NegEntropy": [[137, 1, 1, "", "conjugate"], [137, 1, 1, "", "fn"], [137, 1, 1, "", "grad"], [137, 1, 1, "", "grad_conj"]], "deepinv.optim.OptimIterator": [[138, 1, 1, "", "forward"], [138, 1, 1, "", "relaxation_step"]], "deepinv.optim.PatchNR": [[139, 1, 1, "", "fn"]], "deepinv.optim.PnP": [[141, 1, 1, "", "prox"]], "deepinv.optim.PoissonLikelihoodDistance": [[143, 1, 1, "", "fn"], [143, 1, 1, "", "grad"], [143, 1, 1, "", "prox"]], "deepinv.optim.Potential": [[144, 1, 1, "", "bregman_prox"], [144, 1, 1, "", "conjugate"], [144, 1, 1, "", "fn"], [144, 1, 1, "", "forward"], [144, 1, 1, "", "grad"], [144, 1, 1, "", "grad_conj"], [144, 1, 1, "", "prox"], [144, 1, 1, "", "prox_conjugate"]], "deepinv.optim.RED": [[146, 1, 1, "", "grad"]], "deepinv.optim.ScorePrior": [[147, 1, 1, "", "grad"], [147, 1, 1, "", "score"]], "deepinv.optim.StackedPhysicsDataFidelity": [[148, 1, 1, "", "fn"], [148, 1, 1, "", "grad"], [148, 1, 1, "", "grad_d"], [148, 1, 1, "", "prox_d"], [148, 1, 1, "", "prox_d_conjugate"]], "deepinv.optim.TVPrior": [[149, 1, 1, "", "fn"], [149, 1, 1, "", "nabla"], [149, 1, 1, "", "nabla_adjoint"], [149, 1, 1, "", "prox"]], "deepinv.optim.Tikhonov": [[150, 1, 1, "", "fn"], [150, 1, 1, "", "grad"], [150, 1, 1, "", "prox"]], "deepinv.optim.WaveletPrior": [[151, 1, 1, "", "fn"], [151, 1, 1, "", "prox"], [151, 1, 1, "", "psi"]], "deepinv.optim.ZeroFidelity": [[153, 1, 1, "", "fn"], [153, 1, 1, "", "grad"], [153, 1, 1, "", "grad_d"], [153, 1, 1, "", "prox_d"], [153, 1, 1, "", "prox_d_conjugate"]], "deepinv.optim.optim_iterators": [[155, 0, 1, "", "ADMMIteration"], [156, 0, 1, "", "CPIteration"], [157, 0, 1, "", "DRSIteration"], [158, 0, 1, "", "FISTAIteration"], [159, 0, 1, "", "GDIteration"], [160, 0, 1, "", "HQSIteration"], [161, 0, 1, "", "MDIteration"], [162, 0, 1, "", "PGDIteration"], [163, 0, 1, "", "SMIteration"], [164, 0, 1, "", "fStep"], [165, 0, 1, "", "gStep"]], "deepinv.optim.optim_iterators.ADMMIteration": [[155, 1, 1, "", "forward"]], "deepinv.optim.optim_iterators.CPIteration": [[156, 1, 1, "", "forward"]], "deepinv.optim.optim_iterators.DRSIteration": [[157, 1, 1, "", "forward"]], "deepinv.optim.optim_iterators.FISTAIteration": [[158, 1, 1, "", "forward"]], "deepinv.optim.optim_iterators.GDIteration": [[159, 1, 1, "", "forward"]], "deepinv.optim.optim_iterators.MDIteration": [[161, 1, 1, "", "forward"]], "deepinv.optim.optim_iterators.SMIteration": [[163, 1, 1, "", "forward"]], "deepinv.optim.phase_retrieval": [[166, 3, 1, "", "correct_global_phase"], [167, 3, 1, "", "spectral_methods"]], "deepinv.optim.utils": [[168, 0, 1, "", "GaussianMixtureModel"], [169, 3, 1, "", "bicgstab"], [170, 3, 1, "", "conjugate_gradient"], [171, 3, 1, "", "gradient_descent"], [172, 3, 1, "", "least_squares"], [173, 3, 1, "", "lsqr"], [174, 3, 1, "", "minres"]], "deepinv.optim.utils.GaussianMixtureModel": [[168, 1, 1, "", "classify"], [168, 1, 1, "", "component_log_likelihoods"], [168, 1, 1, "", "fit"], [168, 1, 1, "", "forward"], [168, 1, 1, "", "get_cov"], [168, 1, 1, "", "get_cov_inv_reg"], [168, 1, 1, "", "get_weights"], [168, 1, 1, "", "load_state_dict"], [168, 1, 1, "", "set_cov"], [168, 1, 1, "", "set_cov_reg"], [168, 1, 1, "", "set_weights"]], "deepinv.physics": [[175, 0, 1, "", "Blur"], [176, 0, 1, "", "BlurFFT"], [177, 0, 1, "", "CompressedSensing"], [178, 0, 1, "", "CompressiveSpectralImaging"], [179, 0, 1, "", "Decolorize"], [180, 0, 1, "", "DecomposablePhysics"], [181, 0, 1, "", "Demosaicing"], [182, 0, 1, "", "Denoising"], [183, 0, 1, "", "Downsampling"], [184, 0, 1, "", "DynamicMRI"], [185, 0, 1, "", "GammaNoise"], [186, 0, 1, "", "GaussianNoise"], [187, 0, 1, "", "Haze"], [188, 0, 1, "", "HyperSpectralUnmixing"], [189, 0, 1, "", "Inpainting"], [190, 0, 1, "", "LinearPhysics"], [191, 0, 1, "", "LogPoissonNoise"], [192, 0, 1, "", "MRI"], [193, 0, 1, "", "MRIMixin"], [194, 0, 1, "", "MultiCoilMRI"], [195, 0, 1, "", "NoiseModel"], [196, 0, 1, "", "Pansharpen"], [197, 0, 1, "", "PhaseRetrieval"], [198, 0, 1, "", "Physics"], [199, 0, 1, "", "PoissonGaussianNoise"], [200, 0, 1, "", "PoissonNoise"], [201, 0, 1, "", "Ptychography"], [202, 0, 1, "", "PtychographyLinearOperator"], [203, 0, 1, "", "RadioInterferometry"], [204, 0, 1, "", "RandomPhaseRetrieval"], [205, 0, 1, "", "SequentialMRI"], [206, 0, 1, "", "SinglePhotonLidar"], [207, 0, 1, "", "SinglePixelCamera"], [208, 0, 1, "", "SpaceVaryingBlur"], [209, 0, 1, "", "StackedLinearPhysics"], [210, 0, 1, "", "StackedPhysics"], [211, 0, 1, "", "StructuredRandom"], [212, 0, 1, "", "StructuredRandomPhaseRetrieval"], [213, 0, 1, "", "TimeMixin"], [214, 0, 1, "", "Tomography"], [215, 0, 1, "", "UniformGaussianNoise"], [216, 0, 1, "", "UniformNoise"], [217, 3, 1, "", "adjoint_function"], [257, 3, 1, "", "stack"]], "deepinv.physics.Blur": [[175, 1, 1, "", "A"], [175, 1, 1, "", "A_adjoint"], [175, 1, 1, "", "update_parameters"]], "deepinv.physics.BlurFFT": [[176, 1, 1, "", "update_parameters"]], "deepinv.physics.CompressiveSpectralImaging": [[178, 1, 1, "", "A"], [178, 1, 1, "", "A_adjoint"], [178, 1, 1, "", "crop"], [178, 1, 1, "", "flatten"], [178, 1, 1, "", "pad"], [178, 1, 1, "", "shear"], [178, 1, 1, "", "unflatten"]], "deepinv.physics.DecomposablePhysics": [[180, 1, 1, "", "A"], [180, 1, 1, "", "A_A_adjoint"], [180, 1, 1, "", "A_adjoint"], [180, 1, 1, "", "A_adjoint_A"], [180, 1, 1, "", "A_dagger"], [180, 1, 1, "", "U"], [180, 1, 1, "", "U_adjoint"], [180, 1, 1, "", "V"], [180, 1, 1, "", "V_adjoint"], [180, 1, 1, "", "prox_l2"]], "deepinv.physics.Downsampling": [[183, 1, 1, "", "A"], [183, 1, 1, "", "A_adjoint"], [183, 1, 1, "", "prox_l2"], [183, 1, 1, "", "update_parameters"]], "deepinv.physics.DynamicMRI": [[184, 1, 1, "", "A_adjoint"], [184, 1, 1, "", "check_mask"], [184, 1, 1, "", "noise"], [184, 1, 1, "", "to_static"]], "deepinv.physics.GammaNoise": [[185, 1, 1, "", "forward"], [185, 1, 1, "", "update_parameters"]], "deepinv.physics.GaussianNoise": [[186, 1, 1, "", "__add__"], [186, 1, 1, "", "__mul__"], [186, 1, 1, "", "forward"], [186, 1, 1, "", "update_parameters"]], "deepinv.physics.Haze": [[187, 1, 1, "", "A"], [187, 1, 1, "", "A_dagger"]], "deepinv.physics.HyperSpectralUnmixing": [[188, 1, 1, "", "A"], [188, 1, 1, "", "A_adjoint"], [188, 1, 1, "", "A_dagger"], [188, 1, 1, "", "update_parameters"]], "deepinv.physics.Inpainting": [[189, 1, 1, "", "__mul__"], [189, 1, 1, "", "noise"]], "deepinv.physics.LinearPhysics": [[190, 1, 1, "", "A_A_adjoint"], [190, 1, 1, "", "A_adjoint"], [190, 1, 1, "", "A_adjoint_A"], [190, 1, 1, "", "A_dagger"], [190, 1, 1, "", "A_vjp"], [190, 1, 1, "", "__mul__"], [190, 1, 1, "", "adjointness_test"], [190, 1, 1, "", "compute_norm"], [190, 1, 1, "", "condition_number"], [190, 1, 1, "", "prox_l2"], [190, 1, 1, "", "stack"]], "deepinv.physics.LogPoissonNoise": [[191, 1, 1, "", "forward"], [191, 1, 1, "", "update_parameters"]], "deepinv.physics.MRI": [[192, 1, 1, "", "A_adjoint"], [192, 1, 1, "", "noise"], [192, 1, 1, "", "update_parameters"]], "deepinv.physics.MRIMixin": [[193, 1, 1, "", "check_mask"], [193, 1, 1, "", "crop"], [193, 1, 1, "", "fft"], [193, 1, 1, "", "from_torch_complex"], [193, 1, 1, "", "ifft"], [193, 1, 1, "", "im_to_kspace"], [193, 1, 1, "", "kspace_to_im"], [193, 1, 1, "", "rss"], [193, 1, 1, "", "to_torch_complex"]], "deepinv.physics.MultiCoilMRI": [[194, 1, 1, "", "A"], [194, 1, 1, "", "A_adjoint"], [194, 1, 1, "", "noise"], [194, 1, 1, "", "simulate_birdcage_csm"], [194, 1, 1, "", "update_parameters"]], "deepinv.physics.NoiseModel": [[195, 1, 1, "", "__mul__"], [195, 1, 1, "", "forward"], [195, 1, 1, "", "rand_like"], [195, 1, 1, "", "randn_like"], [195, 1, 1, "", "reset_rng"], [195, 1, 1, "", "rng_manual_seed"]], "deepinv.physics.Pansharpen": [[196, 1, 1, "", "A_dagger"]], "deepinv.physics.PhaseRetrieval": [[197, 1, 1, "", "A"], [197, 1, 1, "", "A_dagger"], [197, 1, 1, "", "A_vjp"], [197, 1, 1, "", "B_dagger"], [197, 1, 1, "", "forward"]], "deepinv.physics.Physics": [[198, 1, 1, "", "A"], [198, 1, 1, "", "A_dagger"], [198, 1, 1, "", "A_vjp"], [198, 1, 1, "", "__mul__"], [198, 1, 1, "", "forward"], [198, 1, 1, "", "noise"], [198, 1, 1, "", "sensor"], [198, 1, 1, "", "set_ls_solver"], [198, 1, 1, "", "set_noise_model"], [198, 1, 1, "", "stack"], [198, 1, 1, "", "update"], [198, 1, 1, "", "update_parameters"]], "deepinv.physics.PoissonGaussianNoise": [[199, 1, 1, "", "forward"], [199, 1, 1, "", "update_parameters"]], "deepinv.physics.PoissonNoise": [[200, 1, 1, "", "forward"], [200, 1, 1, "", "update_parameters"]], "deepinv.physics.PtychographyLinearOperator": [[202, 1, 1, "", "A"], [202, 1, 1, "", "A_adjoint"], [202, 1, 1, "", "get_overlap_img"], [202, 1, 1, "", "shift"]], "deepinv.physics.RadioInterferometry": [[203, 1, 1, "", "A"], [203, 1, 1, "", "A_adjoint"]], "deepinv.physics.SequentialMRI": [[205, 1, 1, "", "A_adjoint"]], "deepinv.physics.SinglePhotonLidar": [[206, 1, 1, "", "A"], [206, 1, 1, "", "A_dagger"]], "deepinv.physics.SpaceVaryingBlur": [[208, 1, 1, "", "A"], [208, 1, 1, "", "A_adjoint"], [208, 1, 1, "", "update_parameters"]], "deepinv.physics.StackedLinearPhysics": [[209, 1, 1, "", "A_adjoint"], [209, 1, 1, "", "update_parameters"]], "deepinv.physics.StackedPhysics": [[210, 1, 1, "", "A"], [210, 1, 1, "", "noise"], [210, 1, 1, "", "sensor"], [210, 1, 1, "", "set_noise_model"], [210, 1, 1, "", "update_parameters"]], "deepinv.physics.StructuredRandomPhaseRetrieval": [[212, 1, 1, "", "get_structure"]], "deepinv.physics.TimeMixin": [[213, 1, 1, "", "average"], [213, 1, 1, "", "flatten"], [213, 1, 1, "", "flatten_C"], [213, 1, 1, "", "repeat"], [213, 1, 1, "", "unflatten"], [213, 1, 1, "", "wrap_flatten_C"]], "deepinv.physics.UniformGaussianNoise": [[215, 1, 1, "", "forward"]], "deepinv.physics.UniformNoise": [[216, 1, 1, "", "forward"], [216, 1, 1, "", "update_parameters"]], "deepinv.physics.blur": [[218, 3, 1, "", "bicubic_filter"], [219, 3, 1, "", "bilinear_filter"], [220, 3, 1, "", "gaussian_blur"], [221, 3, 1, "", "sinc_filter"]], "deepinv.physics.functional": [[222, 0, 1, "", "IRadon"], [223, 0, 1, "", "Radon"], [224, 3, 1, "", "conv2d"], [225, 3, 1, "", "conv2d_fft"], [226, 3, 1, "", "conv3d_fft"], [227, 3, 1, "", "conv_transpose2d"], [228, 3, 1, "", "conv_transpose2d_fft"], [229, 3, 1, "", "conv_transpose3d_fft"], [230, 3, 1, "", "dst1"], [231, 3, 1, "", "histogram"], [232, 3, 1, "", "histogramdd"], [233, 3, 1, "", "multiplier"], [234, 3, 1, "", "multiplier_adjoint"], [235, 3, 1, "", "product_convolution2d"]], "deepinv.physics.functional.IRadon": [[222, 1, 1, "", "forward"]], "deepinv.physics.functional.Radon": [[223, 1, 1, "", "forward"]], "deepinv.physics.generator": [[236, 0, 1, "", "Artifact2ArtifactSplittingMaskGenerator"], [237, 0, 1, "", "BaseMaskGenerator"], [238, 0, 1, "", "BernoulliSplittingMaskGenerator"], [239, 0, 1, "", "ConfocalBlurGenerator3D"], [240, 0, 1, "", "DiffractionBlurGenerator"], [241, 0, 1, "", "DiffractionBlurGenerator3D"], [242, 0, 1, "", "DownsamplingGenerator"], [243, 0, 1, "", "EquispacedMaskGenerator"], [244, 0, 1, "", "GainGenerator"], [245, 0, 1, "", "GaussianMaskGenerator"], [246, 0, 1, "", "GaussianSplittingMaskGenerator"], [247, 0, 1, "", "GeneratorMixture"], [248, 0, 1, "", "MotionBlurGenerator"], [249, 0, 1, "", "PSFGenerator"], [250, 0, 1, "", "Phase2PhaseSplittingMaskGenerator"], [251, 0, 1, "", "PhysicsGenerator"], [252, 0, 1, "", "ProductConvolutionBlurGenerator"], [253, 0, 1, "", "RandomMaskGenerator"], [254, 0, 1, "", "SigmaGenerator"]], "deepinv.physics.generator.BaseMaskGenerator": [[237, 1, 1, "", "sample_mask"], [237, 1, 1, "", "step"]], "deepinv.physics.generator.BernoulliSplittingMaskGenerator": [[238, 1, 1, "", "batch_step"], [238, 1, 1, "", "check_pixelwise"], [238, 1, 1, "", "step"]], "deepinv.physics.generator.ConfocalBlurGenerator3D": [[239, 1, 1, "", "step"]], "deepinv.physics.generator.DiffractionBlurGenerator": [[240, 1, 1, "", "generate_coeff"], [240, 1, 1, "", "step"]], "deepinv.physics.generator.DiffractionBlurGenerator3D": [[241, 1, 1, "", "step"]], "deepinv.physics.generator.DownsamplingGenerator": [[242, 1, 1, "", "get_kernel"], [242, 1, 1, "", "step"], [242, 1, 1, "", "str2filter"]], "deepinv.physics.generator.GainGenerator": [[244, 1, 1, "", "step"]], "deepinv.physics.generator.GaussianMaskGenerator": [[245, 1, 1, "", "get_pdf"]], "deepinv.physics.generator.GaussianSplittingMaskGenerator": [[246, 1, 1, "", "batch_step"]], "deepinv.physics.generator.GeneratorMixture": [[247, 1, 1, "", "step"]], "deepinv.physics.generator.MotionBlurGenerator": [[248, 1, 1, "", "f_matern"], [248, 1, 1, "", "matern_kernel"], [248, 1, 1, "", "step"]], "deepinv.physics.generator.PhysicsGenerator": [[251, 1, 1, "", "__add__"], [251, 1, 1, "", "reset_rng"], [251, 1, 1, "", "rng_manual_seed"], [251, 1, 1, "", "step"]], "deepinv.physics.generator.ProductConvolutionBlurGenerator": [[252, 1, 1, "", "step"]], "deepinv.physics.generator.RandomMaskGenerator": [[253, 1, 1, "", "get_pdf"]], "deepinv.physics.generator.SigmaGenerator": [[254, 1, 1, "", "step"]], "deepinv.physics.phase_retrieval": [[255, 3, 1, "", "build_probe"], [256, 3, 1, "", "generate_shifts"]], "deepinv.sampling": [[258, 0, 1, "", "BaseSDE"], [259, 0, 1, "", "BaseSDESolver"], [260, 0, 1, "", "DDRM"], [261, 0, 1, "", "DPS"], [262, 0, 1, "", "DPSDataFidelity"], [263, 0, 1, "", "DiffPIR"], [264, 0, 1, "", "DiffusionSDE"], [265, 0, 1, "", "DiffusionSampler"], [266, 0, 1, "", "EulerSolver"], [267, 0, 1, "", "HeunSolver"], [268, 0, 1, "", "MonteCarlo"], [269, 0, 1, "", "NoisyDataFidelity"], [270, 0, 1, "", "PosteriorDiffusion"], [271, 0, 1, "", "SDEOutput"], [272, 0, 1, "", "SKRock"], [273, 0, 1, "", "ULA"], [274, 0, 1, "", "VarianceExplodingDiffusion"], [275, 0, 1, "", "VariancePreservingDiffusion"]], "deepinv.sampling.BaseSDE": [[258, 1, 1, "", "discretize"], [258, 1, 1, "", "sample"], [258, 1, 1, "", "sample_init"]], "deepinv.sampling.BaseSDESolver": [[259, 1, 1, "", "randn_like"], [259, 1, 1, "", "reset_rng"], [259, 1, 1, "", "rng_manual_seed"], [259, 1, 1, "", "sample"], [259, 1, 1, "", "step"]], "deepinv.sampling.DDRM": [[260, 1, 1, "", "forward"]], "deepinv.sampling.DPS": [[261, 1, 1, "", "compute_alpha_betas"]], "deepinv.sampling.DPSDataFidelity": [[262, 1, 1, "", "forward"], [262, 1, 1, "", "grad"]], "deepinv.sampling.DiffPIR": [[263, 1, 1, "", "compute_alpha"], [263, 1, 1, "", "find_nearest"], [263, 1, 1, "", "forward"], [263, 1, 1, "", "get_alpha_beta"], [263, 1, 1, "", "get_alpha_prod"], [263, 1, 1, "", "get_noise_schedule"]], "deepinv.sampling.DiffusionSDE": [[264, 1, 1, "", "scale_t"], [264, 1, 1, "", "score"], [264, 1, 1, "", "sigma_t"]], "deepinv.sampling.MonteCarlo": [[268, 1, 1, "", "forward"], [268, 1, 1, "", "get_chain"], [268, 1, 1, "", "mean_has_converged"], [268, 1, 1, "", "reset"], [268, 1, 1, "", "var_has_converged"]], "deepinv.sampling.NoisyDataFidelity": [[269, 1, 1, "", "diff"], [269, 1, 1, "", "forward"], [269, 1, 1, "", "grad"], [269, 1, 1, "", "precond"]], "deepinv.sampling.PosteriorDiffusion": [[270, 1, 1, "", "forward"], [270, 1, 1, "", "score"]], "deepinv.sampling.VarianceExplodingDiffusion": [[274, 1, 1, "", "sample_init"]], "deepinv.sampling.VariancePreservingDiffusion": [[275, 1, 1, "", "sample_init"]], "deepinv.training": [[278, 0, 1, "", "AdversarialOptimizer"], [279, 0, 1, "", "AdversarialTrainer"]], "deepinv.training.AdversarialOptimizer": [[278, 1, 1, "", "load_state_dict"], [278, 1, 1, "", "state_dict"], [278, 1, 1, "", "zero_grad"]], "deepinv.training.AdversarialTrainer": [[279, 1, 1, "", "check_clip_grad_D"], [279, 1, 1, "", "compute_loss"], [279, 1, 1, "", "save_model"], [279, 1, 1, "", "setup_train"]], "deepinv.transform": [[280, 0, 1, "", "CPABDiffeomorphism"], [281, 0, 1, "", "Homography"], [282, 0, 1, "", "Reflect"], [283, 0, 1, "", "Rotate"], [284, 0, 1, "", "Scale"], [285, 0, 1, "", "Shift"], [286, 0, 1, "", "ShiftTime"], [287, 0, 1, "", "Transform"]], "deepinv.transform.ShiftTime": [[286, 1, 1, "", "roll_reflect_1d"]], "deepinv.transform.Transform": [[287, 1, 1, "", "__add__"], [287, 1, 1, "", "__mul__"], [287, 1, 1, "", "forward"], [287, 1, 1, "", "get_params"], [287, 1, 1, "", "identity"], [287, 1, 1, "", "inverse"], [287, 1, 1, "", "invert_params"], [287, 1, 1, "", "symmetrize"], [287, 1, 1, "", "transform"]], "deepinv.transform.projective": [[288, 0, 1, "", "Affine"], [289, 0, 1, "", "Euclidean"], [290, 0, 1, "", "PanTiltRotate"], [291, 0, 1, "", "Similarity"]], "deepinv.unfolded": [[292, 0, 1, "", "BaseDEQ"], [293, 0, 1, "", "BaseUnfold"], [294, 3, 1, "", "DEQ_builder"], [295, 3, 1, "", "unfolded_builder"]], "deepinv.unfolded.BaseDEQ": [[292, 1, 1, "", "forward"]], "deepinv.unfolded.BaseUnfold": [[293, 1, 1, "", "forward"]], "deepinv.utils": [[296, 0, 1, "", "AverageMeter"], [297, 0, 1, "", "ProgressMeter"], [298, 0, 1, "", "TensorList"], [299, 3, 1, "", "dirac_like"], [300, 3, 1, "", "get_data_home"], [301, 3, 1, "", "get_degradation_url"], [302, 3, 1, "", "get_freer_gpu"], [303, 3, 1, "", "get_image_url"], [304, 0, 1, "", "get_timestamp"], [305, 3, 1, "", "load_dataset"], [306, 3, 1, "", "load_degradation"], [307, 3, 1, "", "load_image"], [308, 3, 1, "", "load_url_image"], [309, 3, 1, "", "ones_like"], [310, 3, 1, "", "plot"], [311, 3, 1, "", "plot_curves"], [312, 3, 1, "", "plot_inset"], [313, 3, 1, "", "plot_ortho3D"], [314, 3, 1, "", "plot_parameters"], [315, 3, 1, "", "plot_videos"], [316, 3, 1, "", "rand_like"], [317, 3, 1, "", "randn_like"], [318, 3, 1, "", "save_videos"], [319, 3, 1, "", "zeros_like"]], "deepinv.utils.AverageMeter": [[296, 1, 1, "", "reset"], [296, 1, 1, "", "update"]]}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "function", "Python function"]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:attribute", "3": "py:function"}, "terms": {"": [12, 20, 23, 38, 41, 47, 61, 77, 85, 88, 89, 93, 97, 100, 104, 105, 106, 107, 121, 122, 147, 173, 177, 178, 180, 183, 186, 188, 205, 240, 248, 264, 268, 270, 276, 277, 278, 279, 291, 312, 320, 323, 326, 327, 328, 329, 332, 333, 334, 338, 339, 340, 341, 344, 345, 346, 350, 351, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 369, 370, 371, 372, 373, 375, 376, 381, 382, 383, 384, 385, 386, 402, 408, 412], "0": [16, 17, 20, 21, 23, 26, 28, 32, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 88, 93, 94, 95, 97, 100, 103, 104, 105, 107, 112, 113, 117, 118, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 142, 143, 144, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 194, 196, 199, 200, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 216, 218, 219, 220, 221, 223, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 260, 261, 262, 263, 264, 266, 267, 268, 269, 272, 273, 274, 275, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 306, 310, 312, 313, 316, 320, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 345, 346, 347, 349, 350, 351, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 388, 393, 394, 399, 400, 401, 404, 406, 407, 408, 410, 411, 414, 416, 417], "00": [22, 323, 327, 328, 329, 332, 334, 338, 339, 340, 343, 346, 349, 350, 351, 353, 354, 355, 357, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 375, 376, 379, 380, 381, 382, 385, 386, 388, 394], "000": [16, 327, 334, 369, 371, 380, 384, 412], "0000": [130, 175, 176, 179, 180, 184, 189, 192, 251, 407, 414], "00000": 13, "0000001": 22, "000001": 18, "00001": 13, "0000250": 22, "0001": [15, 21], "0001000": 22, "000505": 381, "000663": 381, "000786": 381, "001": [21, 47, 361, 364, 369, 372, 384], "0014": [326, 333], "00143": 183, "002": [338, 376, 384, 385], "0022": [326, 333], "002592722410522517": 354, "002650": 18, "003": [323, 339, 343, 354, 369, 377, 384, 394], "003231370587838091": 369, "0033": 381, "0034": 334, "00364": 364, "0037754916896422706": 354, "00378": 354, "004": [323, 354, 377], "00446": 381, "00451": 381, "00475": 381, "00484": 381, "00490826": 156, "005": 377, "00516": 381, "00519": 381, "00523": 381, "00549": 381, "00562": 381, "00583": 381, "006": [340, 377, 385], "00601": 381, "0061": 381, "0064": [326, 333], "00652": 381, "00684": 381, "007": [323, 375, 377], "00793": 381, "008": [340, 370], "0084001": 22, "0084991": 22, "0085000": 22, "008716236651714974": 338, "0089": [326, 333], "009": 338, "0096": [326, 333], "00e": [327, 347, 362], "00it": [323, 329], "00m": 323, "01": [52, 53, 54, 60, 66, 107, 254, 322, 325, 329, 332, 334, 335, 343, 346, 350, 351, 353, 354, 355, 358, 360, 361, 362, 363, 364, 365, 366, 368, 375, 377, 379, 381, 382, 385, 386, 388, 393, 394, 406, 414], "0100": 332, "0109": [326, 333], "011": 338, "011435812804680449": 338, "0122": 381, "0144": 332, "0145": [326, 333], "0146": [183, 204, 332], "015": [340, 377], "0157": 332, "016": 354, "0164958180264647": 354, "017": [383, 388, 394], "01831": 92, "01985": [52, 53, 377], "01it": [351, 366], "02": [274, 334, 349, 351, 353, 358, 360, 361, 362, 363, 364, 365, 368, 370, 379, 381, 382, 386, 394], "020": 376, "020025727886898": 376, "0204": [326, 333], "024": 370, "0241": 183, "0247": [326, 333], "0271": 332, "029": 377, "02it": 351, "03": [312, 327, 335, 343, 351, 354, 355, 357, 358, 362, 363, 364, 365, 375, 379, 381, 382, 386, 388, 394], "0306": 332, "0318": [326, 333], "032": 375, "0322": [326, 333], "0335": [326, 333], "0349": [326, 333], "035": [351, 353, 394], "03521": 177, "03679": 78, "039": 338, "03942247927188873": 338, "0398": 183, "03981": 89, "03it": [327, 351], "03mb": 375, "04": [243, 245, 253, 334, 343, 351, 354, 364, 365, 368, 394], "0413": 334, "0420": 337, "0431": [326, 333], "04715": 273, "04it": 381, "05": [117, 154, 196, 263, 272, 273, 327, 336, 338, 340, 343, 346, 347, 351, 356, 357, 363, 364, 365, 369, 377, 384, 388, 394, 400, 412], "050": 377, "0501": [326, 333], "0515": [326, 333], "0519": [326, 333], "052": 375, "0523070216572739": 375, "0545": 338, "055": 377, "0559": [326, 333], "055923461914062": 375, "056": 375, "0568": [326, 333], "0588": 332, "05it": [327, 351, 381], "06": [327, 334, 343, 347, 349, 351, 364, 365, 375, 382, 394], "060": [329, 343, 394], "0603": 192, "0605": 337, "062": 382, "0623": [326, 333], "0642": [326, 333], "06474": [98, 99], "066": 377, "0667": 332, "0671": 332, "06mb": 351, "07": [343, 351, 357, 360, 363, 364, 365, 373, 382, 394], "0707": [326, 333], "071": [382, 388, 394], "0710": 334, "0712": [182, 189], "0732": [326, 333], "077": [214, 223, 338], "07730712890625": 338, "077b83af57538aa183971a2fe0971ec1": 47, "07886": 221, "07it": 351, "08": [320, 343, 351, 360, 363, 364, 365, 388, 394, 399], "0800": 15, "0801": 15, "082": 377, "0864": 204, "087": [355, 360, 394], "0872": 332, "08845": 272, "08995": 263, "08it": [339, 351], "09": [351, 364, 365, 379, 388, 394], "0900": 15, "09327": [281, 290], "094": 386, "094568888346355": 385, "095": 385, "09500349114552311": 333, "097": 377, "098": 339, "09it": [329, 351], "09m": 375, "0m": [334, 339, 364, 365, 370, 386], "0mb": [334, 339], "0mib": 386, "0x7f495d0b9db0": [329, 336, 366], "1": [12, 14, 16, 17, 20, 21, 23, 24, 26, 29, 32, 34, 35, 38, 39, 41, 42, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 70, 71, 73, 74, 75, 77, 81, 82, 85, 88, 90, 92, 93, 97, 100, 103, 105, 106, 107, 108, 109, 110, 112, 113, 115, 116, 117, 118, 119, 121, 122, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 147, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 167, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 196, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 260, 261, 262, 263, 264, 265, 267, 268, 270, 272, 273, 274, 275, 277, 279, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 310, 312, 313, 315, 316, 318, 320, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 345, 346, 347, 350, 351, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 393, 397, 399, 400, 401, 402, 404, 406, 407, 408, 410, 412, 413, 414, 417], "10": [35, 38, 50, 73, 77, 89, 94, 97, 113, 163, 167, 175, 176, 177, 183, 202, 204, 214, 223, 231, 232, 238, 252, 255, 260, 268, 272, 323, 326, 331, 333, 335, 337, 339, 341, 345, 350, 351, 357, 361, 362, 363, 364, 365, 366, 369, 370, 371, 372, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 389, 399, 412, 414], "100": [12, 15, 18, 27, 35, 38, 84, 117, 127, 129, 154, 168, 172, 173, 177, 190, 238, 260, 263, 274, 277, 323, 327, 328, 329, 330, 331, 332, 334, 337, 338, 339, 340, 346, 350, 351, 354, 355, 357, 358, 361, 362, 363, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 384, 385, 386, 412], "1000": [47, 79, 88, 106, 107, 149, 248, 261, 263, 334, 340, 363, 365, 371, 375, 381, 382, 383, 386, 412], "10000": 351, "1006": [189, 251], "100e": 239, "101": [323, 351, 364, 365, 370], "1010": 21, "1018": 21, "102": [351, 364, 365], "1024": [135, 136, 191, 338, 351], "1024x1024": 23, "103": [351, 364, 365], "1036": 331, "104": [329, 351, 364, 365], "104m": 334, "105": [329, 351, 364, 365], "106": [329, 351, 364, 365], "1068": 214, "106m": 365, "107": [329, 351, 364, 365], "108": [345, 351, 364, 365, 377], "1080": 333, "10847507169258835": 377, "109": [351, 364, 365], "109m": [334, 370], "109mb": 339, "10x": [382, 383], "11": [50, 107, 221, 323, 333, 334, 340, 351, 358, 363, 364, 365, 366, 371, 375, 377, 379, 382, 383, 389, 394], "110": [337, 351, 364, 365], "1102": 221, "110940551757814": 323, "111": [323, 351, 364, 365], "112": [351, 364, 365, 377], "11232": [34, 41], "113": [351, 364, 365], "1135": 184, "1137": 89, "114": [351, 364, 365], "1140": 335, "1145": 346, "115": [351, 364, 365], "115m": 334, "115mb": 364, "116": [351, 364, 365], "117": [351, 364, 365], "11793": 260, "118": [351, 364, 365], "11888": 362, "119": [351, 364, 365], "119510806875491": 385, "119mb": 323, "11it": 351, "12": [14, 16, 20, 50, 111, 116, 174, 320, 322, 323, 338, 339, 345, 351, 354, 362, 363, 364, 365, 382, 383, 386, 394], "120": [323, 337, 351, 364, 365, 385], "1200": [310, 312, 338], "12000": 412, "1200x1280": 412, "1202718281006854": 323, "120m": 334, "121": [351, 363, 364, 365], "12151": 42, "122": [351, 363, 364, 365], "12231": 337, "1227": 189, "123": [351, 364, 365], "124": [351, 364, 365], "124m": 334, "125": [326, 347, 349, 351, 364, 365, 394], "125m": 334, "125mb": 371, "126": [351, 364, 365], "1269": 337, "127": [351, 363, 364, 365, 369], "128": [66, 71, 84, 85, 88, 93, 97, 105, 188, 323, 335, 337, 339, 340, 341, 351, 354, 364, 365, 369, 371, 384, 385, 404, 411], "128x128": [188, 323, 337, 340, 369, 371, 385], "129": [343, 351, 364, 365], "129m": [323, 364, 370], "12it": 351, "12m": 334, "13": [169, 327, 333, 334, 351, 353, 363, 364, 365, 372, 375, 385, 412], "130": [337, 351, 363, 364, 365], "131": [351, 364, 365, 381, 388, 394], "132": [351, 364, 365], "1322": 384, "13247v2": [35, 38], "132mb": 323, "133": [339, 351, 364, 365], "1332": 384, "1336401602927466": 354, "133mb": 338, "134": [351, 354, 364, 365], "13456": 364, "135": [351, 364, 365], "135388067": [323, 370], "136": [323, 351, 364, 365], "137": [351, 364, 365], "138": [335, 343, 351, 364, 365, 394], "139": [351, 364, 365], "13m": 375, "14": [25, 221, 334, 340, 347, 351, 357, 363, 364, 365, 372, 377, 382, 412], "140": [337, 351, 364, 365, 386], "1406": 248, "140e": 333, "141": [351, 364, 365], "142": [351, 361, 364, 365, 368, 394], "1428": 338, "143": [351, 364, 365, 383], "144": [323, 351, 364, 365, 383], "144m": 365, "145": [351, 364, 365, 383], "146": [351, 364, 365, 383, 386], "14610": 337, "1468": 339, "14687": 261, "147": [351, 364, 365, 383], "14756": 34, "148": [351, 364, 365, 383], "149": [351, 364, 365], "14it": 351, "14m": [373, 376], "15": [45, 105, 186, 188, 240, 241, 327, 346, 351, 353, 354, 357, 360, 361, 363, 364, 365, 374, 375, 383, 384, 394, 411], "150": [23, 337, 351, 364, 365, 369, 371], "1500": 363, "1506": 177, "151": [351, 364, 365], "1510": 183, "1518": 204, "152": [351, 364, 365, 383], "153": [351, 364, 365], "154": [351, 364, 365], "155": [351, 364, 365, 383], "156": [351, 364, 365], "157": [351, 364, 365], "157m": 364, "158": [106, 107, 351, 364, 365], "159": [351, 364, 365], "15it": 351, "16": [16, 17, 22, 77, 90, 97, 125, 175, 176, 183, 190, 207, 208, 281, 288, 289, 290, 291, 295, 313, 315, 318, 326, 334, 339, 340, 343, 350, 351, 358, 363, 364, 365, 371, 375, 381, 385, 397, 399, 400, 410, 413, 414], "160": [337, 350, 351, 364, 365], "1608": 89, "161": [351, 364, 365], "1611": 78, "162": [351, 364, 365], "163": [351, 364, 365], "164": [351, 364, 365], "16461435953776": 354, "165": [332, 338, 343, 351, 354, 364, 365, 394], "1650": 214, "1653231025078767": 338, "1655": 130, "166": [323, 351, 364, 365], "1666": 214, "1668": 177, "167": [351, 364, 365], "168": [351, 364, 365], "168mb": 365, "169": [351, 364, 365], "1696": 337, "169877507234071e": 369, "16m": 369, "16x16": [175, 176, 281, 288, 289, 290, 291, 399], "17": [310, 313, 327, 340, 351, 361, 363, 364, 365, 370, 372, 377, 381], "170": [337, 351, 364, 365], "1707": [98, 99], "170mb": 339, "171": [351, 364, 365], "171mb": 365, "172": [351, 364, 365], "173": [326, 351, 364, 365], "173828125": 320, "174": [351, 364, 365, 377], "175": [351, 364, 365], "176": [351, 364, 365, 369], "177": [351, 364, 365], "178": [351, 364, 365, 385], "1788": [180, 189], "178mb": 323, "179": [351, 364, 365], "17it": [351, 362], "17m": 371, "18": [107, 327, 334, 340, 351, 363, 364, 365, 375, 386], "180": [105, 214, 222, 223, 281, 283, 288, 289, 290, 291, 337, 351, 364, 365], "181": [339, 351, 364, 365], "1814": 192, "181mb": 355, "182": [351, 364, 365], "1820": 189, "183": [351, 364, 365], "1830": 347, "183m": 365, "184": [351, 364, 365], "185": [351, 364, 365], "186": [323, 351, 364, 365], "186646143595378": 354, "187": [351, 354, 364, 365, 370, 383], "187019": [369, 371], "188": [336, 343, 351, 364, 365, 386, 394], "188174": 386, "188m": 364, "189": [323, 351, 364, 365], "18it": [351, 365], "19": [323, 329, 334, 339, 340, 351, 354, 363, 364, 365, 370, 373, 376, 377, 381, 384, 385], "190": [334, 337, 351, 364, 365], "1908": 272, "191": [351, 364, 365], "192": [77, 351, 364, 365, 370], "192mb": 364, "193": [351, 364, 365], "193mb": 366, "194": [323, 339, 351, 364, 365], "194541857761619e": 369, "195": [351, 364, 365], "196": [351, 364, 365, 370], "197": [351, 364, 365], "1975": 174, "198": [20, 351, 364, 365], "1982": 173, "1985": 182, "198mb": 369, "199": [20, 323, 351, 364, 365, 370], "1991": 333, "1992": 169, "199mb": 339, "19it": 365, "1_alex": 354, "1conv": 105, "1d": [92, 245, 246, 253, 341, 399], "1e": [35, 38, 52, 53, 54, 81, 86, 106, 107, 116, 117, 126, 127, 129, 144, 149, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 190, 196, 198, 265, 268, 272, 273, 292, 320, 323, 327, 329, 335, 340, 345, 346, 351, 357, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 384, 385, 386, 407], "1e10": 12, "1e16": 128, "1e2": [169, 170, 171, 174, 265, 361], "1e3": [268, 272, 273, 361], "1e4": 384, "1e8": 173, "1f": 160, "1j": [320, 334, 337], "1m": [364, 386], "1mb": [339, 351, 371, 375], "1mib": [385, 386], "1x1024x1024": 412, "1z2us9zhjdgolu6r1jee0s2bbej2xv5": 351, "2": [14, 16, 17, 21, 23, 26, 31, 32, 34, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 53, 54, 55, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 85, 86, 87, 88, 90, 92, 93, 95, 97, 103, 105, 106, 107, 108, 109, 110, 112, 113, 115, 116, 117, 119, 125, 126, 127, 129, 130, 131, 133, 134, 138, 144, 147, 149, 150, 151, 156, 157, 158, 162, 163, 166, 169, 172, 173, 175, 176, 177, 180, 183, 184, 186, 187, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 226, 236, 238, 239, 240, 241, 242, 243, 245, 246, 248, 253, 261, 262, 263, 264, 265, 267, 268, 270, 272, 273, 274, 275, 279, 282, 287, 289, 291, 310, 312, 313, 315, 318, 320, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 345, 346, 347, 350, 351, 353, 354, 355, 357, 358, 361, 362, 363, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 397, 399, 400, 401, 402, 406, 407, 408, 411, 412, 414, 417], "20": [16, 73, 88, 89, 263, 275, 320, 329, 332, 334, 336, 337, 340, 346, 350, 351, 354, 356, 362, 363, 364, 365, 374, 375, 377, 381, 382, 383, 385, 386, 407, 411], "200": [20, 90, 125, 337, 351, 355, 356, 364, 365, 382, 383, 385, 412], "2000": 346, "2000x2000": 412, "2007": 80, "2009": [107, 327, 345, 346, 354, 357], "201": [334, 364], "2010": 106, "2011": [125, 364], "2012": [35, 38], "2013": [106, 107], "2017": [100, 122, 235, 327, 354], "2018": [86, 329, 384], "20185546875": 375, "202": [347, 364, 375], "2020": 384, "2021": 47, "2022": [329, 361, 362, 366], "2023": 14, "2024": [320, 389], "2025": [354, 389], "203": [354, 364], "204": [354, 364], "2040": 15, "2040x2040": 412, "204661061157774": [340, 385], "2048": 336, "205": [327, 340, 343, 364, 385, 394], "206": 364, "2064": 182, "2067779": 340, "2069441": 372, "207": 364, "208": 364, "209": 364, "209mb": 370, "20m1387961": 89, "21": [221, 239, 241, 339, 341, 346, 351, 355, 363, 364, 365, 369, 370, 377, 381], "210": 364, "2103": [34, 273], "211": [320, 322, 323, 364, 370, 394], "212": 364, "213": [17, 339, 364], "2139": 182, "214": 364, "214mb": 339, "215": 364, "216": 364, "2160x2160": 412, "216m": 364, "217": [339, 364, 372, 379, 394], "218": 364, "218m": 365, "218mb": 376, "219": [364, 382], "2197": 177, "21it": [351, 365], "22": [323, 325, 340, 351, 362, 363, 364, 365, 368, 375, 377, 382, 394], "220": 364, "2201": [42, 260], "2206": 364, "2209": [261, 362], "220mb": 339, "221": 364, "222": 364, "223": [364, 365, 368, 394], "224": [330, 364], "224x224": 330, "225": 364, "226": 364, "226725059794363": 372, "227": [364, 372], "2270": 130, "228": [338, 364, 377], "229": 364, "22it": [351, 365], "23": [323, 338, 339, 351, 355, 356, 361, 363, 364, 365, 372, 376, 377, 381, 386], "230": 364, "2305": 263, "231": 364, "2312": [34, 41, 92], "232": 364, "232mb": 364, "233": 364, "234": 364, "2348": 130, "235": [323, 364], "236": 364, "236mb": 364, "237": 364, "2372": 339, "2376": 339, "238": [364, 375], "23841247558594": 375, "238mb": 364, "239": 364, "23it": [329, 339, 351, 365], "24": [323, 329, 338, 339, 340, 343, 346, 347, 351, 363, 364, 365, 373, 375, 376, 381, 382, 385, 389], "240": 364, "2402": [14, 337], "2403": [281, 290], "24033": 337, "2409": [52, 53, 377], "240m": 364, "241": 364, "2419": 107, "242": [364, 376], "243": 364, "2434": 107, "244": 364, "245": [331, 343, 364, 394], "246": 364, "24695321": 339, "247": 364, "248": [364, 412], "2489": [244, 337], "249": 364, "24966812133789": 323, "24it": [339, 351, 365], "24mb": 382, "25": [105, 202, 203, 240, 241, 248, 252, 256, 263, 320, 323, 332, 333, 334, 350, 351, 361, 363, 364, 365, 381, 384, 411], "250": [22, 323, 364], "2500": [81, 86, 175, 176, 399], "251": 364, "252": 364, "253": [323, 364], "2532": [251, 254], "254": 364, "2544": 337, "255": [105, 350, 351, 363, 364, 365, 366, 411], "2550": 335, "25592549641927": 357, "256": [14, 82, 85, 88, 93, 104, 139, 208, 240, 310, 323, 326, 327, 328, 336, 338, 339, 346, 347, 357, 363, 364, 365, 370, 404, 411], "256x256": [363, 365], "257": 364, "257m": 365, "258": [214, 223, 364], "25852": [121, 356], "2588": 204, "259": [360, 364], "25it": [351, 365, 366], "26": [323, 351, 362, 363, 364, 365, 370, 381, 385, 389], "260": 364, "260mb": 364, "261": 364, "262": 364, "263": [364, 384], "264": 364, "2640": 214, "264mb": 365, "265": [364, 383], "265mb": 375, "266": [364, 375], "267": 364, "2674": 214, "267mb": 364, "268": 364, "269": 364, "26it": [339, 365], "27": [351, 363, 364, 365, 381, 385], "270": [283, 357, 364], "2704836828395761": 357, "271": 364, "272": 364, "272mb": 364, "273": 364, "274": 364, "2744": 130, "275": [338, 364], "27505362033843994": 338, "276": [25, 364, 386], "277": 364, "278": 364, "279": 364, "27it": [339, 351, 365], "28": [323, 334, 338, 339, 350, 351, 361, 363, 364, 365, 372, 375, 381, 382, 383, 384, 386, 389, 400, 412], "280": [339, 364], "281": 364, "282": 364, "283": [345, 349, 364, 394], "284": 364, "285": [221, 364], "285mb": 373, "286": 364, "28690": 320, "287": 364, "287mb": 338, "288": [364, 382, 383], "288mb": 364, "289": 364, "2899": 337, "28crop": [329, 361, 362, 366], "28it": [351, 365], "29": [329, 336, 339, 351, 357, 361, 362, 363, 364, 365, 366, 375, 384, 385], "290": 364, "2905": 238, "2908": 192, "291": 364, "292": 364, "293": [340, 364], "294": 364, "295": 364, "296": [364, 382], "296m": 365, "297": 364, "298": 364, "298856479885389": 323, "2989": 335, "299": [323, 364], "29it": 351, "29mb": 375, "2_2": [61, 73, 323], "2a": 53, "2artifact": 32, "2ax_": 355, "2cm": 126, "2d": [14, 17, 21, 26, 112, 175, 178, 184, 192, 193, 194, 201, 202, 203, 205, 207, 211, 224, 225, 227, 228, 235, 237, 240, 246, 248, 249, 281, 283, 284, 285, 288, 289, 290, 291, 320, 326, 336, 341, 369, 370, 399, 412], "2e": [320, 323, 335], "2f": [35, 320, 329, 334, 335, 345, 346, 347, 350, 351, 355, 356, 358, 361, 362, 366], "2m": [177, 204, 323, 334, 339, 370, 386], "2mb": 334, "2mib": [340, 385, 386], "2nd": 106, "2t": 274, "2x": 369, "2x2": [175, 176, 192, 194, 400], "2x320x320": 26, "2x_": [355, 385], "3": [12, 16, 21, 23, 35, 38, 45, 46, 47, 49, 53, 54, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 83, 84, 85, 88, 89, 90, 93, 94, 96, 97, 98, 99, 101, 103, 104, 105, 106, 110, 112, 113, 125, 130, 133, 144, 148, 151, 158, 177, 179, 180, 181, 182, 186, 189, 190, 196, 204, 205, 206, 207, 214, 217, 218, 221, 238, 240, 241, 246, 247, 248, 251, 260, 263, 268, 272, 273, 277, 280, 281, 287, 288, 289, 290, 291, 310, 313, 315, 318, 320, 323, 326, 327, 328, 330, 331, 332, 333, 334, 335, 338, 340, 345, 346, 347, 349, 351, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 369, 370, 372, 374, 375, 377, 381, 382, 383, 384, 385, 386, 397, 399, 400, 404, 410, 412, 413, 414, 416, 417], "30": [287, 334, 337, 339, 351, 354, 357, 358, 362, 363, 364, 365, 381, 382, 384, 385, 389], "300": [334, 346, 347, 364, 400, 412], "301mb": 323, "307": 340, "309": 386, "30e": 327, "31": [249, 326, 329, 334, 346, 351, 364, 365, 368, 375, 381, 394], "311": [333, 343, 394], "311mb": 365, "3132": 335, "314": [328, 343, 394], "316": 339, "31it": [329, 351], "32": [32, 44, 75, 77, 79, 90, 98, 99, 125, 177, 178, 183, 186, 190, 196, 207, 208, 260, 263, 323, 326, 328, 329, 332, 334, 335, 340, 350, 351, 354, 357, 358, 361, 362, 363, 364, 365, 366, 371, 373, 374, 376, 377, 381, 384, 385, 386, 388, 394, 400, 404], "320": [17, 184, 192, 194, 205, 350], "320x320": [339, 369, 371, 412], "3223": 182, "323": 381, "326": 383, "328k": 382, "32it": [329, 351], "32m": 386, "32x32": [183, 190, 196, 207, 260, 263, 340, 385], "33": [327, 351, 357, 362, 363, 364, 365, 381], "3322": 337, "333": 235, "333m": 365, "334": 327, "334139506022137": 327, "334mb": 323, "34": [351, 357, 364, 365, 369, 370], "341mb": [323, 365], "3429": 337, "343": 338, "343307113647461": 338, "346": [373, 376], "346023559570312": [373, 376], "3467": 337, "348": 235, "3487": 337, "348mb": [323, 372], "349": 385, "35": [333, 334, 343, 350, 351, 363, 364, 365, 386, 394], "350mb": 365, "353mb": 323, "3542": 337, "355": 386, "356": 381, "357": 88, "357m": 365, "358mb": 370, "359": [330, 343, 394], "36": [351, 360, 364, 365, 369, 386], "360": [214, 283], "3608000": 323, "360k": 375, "3617": 369, "361mb": 357, "362": 351, "3624": 182, "3636": 130, "3637": 341, "363mb": 365, "364": [371, 379, 394], "364mb": 365, "3695": 130, "37": [239, 334, 339, 351, 363, 364, 365, 371, 384], "371": [382, 383], "372mb": 350, "3731": [189, 337], "373mb": 357, "374": 377, "3744": 192, "374mb": 350, "375": 372, "3750396285973236": 372, "378": [374, 379, 394], "378mb": 365, "38": [339, 351, 363, 364, 365], "3809": 337, "380mb": 370, "383": 384, "384": 339, "384mb": 370, "3856": 214, "385k": [328, 346, 354, 386], "385mb": 370, "387mb": 365, "3881": 130, "388mb": 365, "38e": 327, "38it": 329, "38m": 364, "39": [351, 364, 365, 386], "3929": [122, 354], "3938": [122, 354], "393k": 382, "394": 374, "395e": [239, 333], "398": [366, 368, 394], "3986": [180, 189], "398kb": 382, "3c353_gdth": 320, "3conv": 105, "3d": [17, 80, 87, 112, 113, 151, 175, 186, 190, 192, 193, 194, 195, 198, 226, 229, 239, 241, 249, 251, 290, 302, 310, 313, 342, 343, 344, 348, 349, 369, 370, 394, 397, 399, 401], "3f": [334, 377], "3k": [332, 375, 382], "3m": 323, "3mb": 334, "3mib": [328, 386], "3x3": [130, 177, 179, 182, 189, 190, 204, 214], "4": [14, 16, 17, 20, 21, 23, 28, 32, 44, 52, 53, 64, 77, 81, 82, 85, 90, 92, 95, 97, 100, 103, 104, 105, 108, 109, 110, 117, 125, 126, 130, 174, 175, 176, 181, 186, 188, 190, 193, 196, 198, 214, 217, 218, 221, 237, 241, 242, 243, 244, 245, 246, 253, 282, 287, 292, 310, 312, 313, 320, 323, 326, 327, 328, 331, 333, 334, 336, 338, 340, 341, 345, 347, 350, 351, 354, 355, 357, 358, 362, 363, 364, 365, 369, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 389, 397, 399, 400, 407, 412], "40": [323, 334, 337, 345, 349, 350, 351, 356, 362, 363, 364, 365, 370, 371, 379, 381, 394], "402": 354, "4024091561635335": 354, "4033": [180, 189], "406": 372, "406343078613281": 372, "4081": 130, "4099398": 52, "41": [351, 364, 365, 384], "411": 320, "412": [340, 343, 394], "413": [326, 343, 361, 394], "4133": 338, "42": [329, 330, 334, 351, 364, 365], "421": 340, "422kb": 375, "423": 384, "4249": 337, "4290": 192, "43": [173, 323, 334, 346, 351, 363, 364, 365], "430": 323, "430047607421876": 323, "4312": 337, "4322": 182, "4375": 320, "4385367335731565": 375, "439": [371, 375], "43928527832031": 371, "43it": 351, "44": [351, 364, 365, 386, 388], "444737": [373, 374, 375, 376, 377], "444867": [323, 370], "4453": 184, "4468237274226996": 354, "447": [335, 354], "449944205275518": 338, "44it": 351, "44m": 382, "45": [214, 334, 335, 336, 339, 351, 363, 364, 365, 385], "450": 338, "454": 384, "455": 412, "4564": 192, "4569": 334, "458": 383, "45e": 362, "46": [320, 334, 351, 364, 365, 382, 383, 386, 388, 394], "460": [106, 107], "465": 377, "4666": 130, "46mb": 375, "47": [20, 334, 340, 351, 361, 363, 364, 365, 385], "470": 361, "471": 379, "4710": 337, "4736": 338, "4746": 337, "475": [386, 388, 394], "4776": 130, "479": [106, 107, 341, 343, 394], "47m": 375, "48": [20, 103, 207, 334, 349, 351, 363, 364, 365, 412], "480": 339, "4805": 337, "481x321": 412, "482": 385, "485kb": 375, "486": 374, "4860": 214, "4864412761119534": 374, "488": [334, 343, 394], "4882": 214, "489e": [239, 333], "48it": [329, 351, 362], "48mb": 375, "49": [38, 323, 351, 364, 365, 394], "492": [106, 385, 388, 394], "493": [346, 349, 350, 353, 394], "4949": 130, "49mb": 382, "4a": 218, "4e": 323, "4k": 339, "4m": [334, 339, 365], "4mb": [323, 334, 375, 382], "4mib": 386, "4x": [14, 184, 339], "4x4": [181, 214], "5": [16, 23, 35, 38, 45, 47, 48, 49, 53, 54, 61, 65, 88, 94, 97, 98, 99, 100, 105, 106, 107, 110, 117, 126, 127, 129, 130, 139, 166, 167, 168, 169, 170, 171, 174, 176, 177, 178, 182, 186, 190, 193, 194, 211, 212, 214, 215, 217, 218, 219, 223, 240, 247, 248, 254, 260, 263, 273, 281, 284, 288, 289, 290, 291, 292, 293, 295, 312, 315, 318, 320, 323, 326, 327, 329, 332, 333, 334, 335, 336, 338, 340, 341, 345, 350, 351, 357, 360, 361, 362, 363, 364, 365, 366, 369, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 393, 399, 400, 404, 406, 407, 410, 412], "50": [16, 35, 38, 105, 126, 135, 136, 144, 163, 167, 190, 191, 198, 206, 221, 281, 288, 289, 290, 291, 292, 320, 323, 331, 332, 334, 336, 337, 338, 340, 350, 351, 362, 363, 364, 365, 372, 373, 381, 385, 400, 411], "500": [190, 327], "5000": [16, 320, 350], "501": 373, "5012940824804186": 373, "505": 383, "507": 375, "5073385957994816": 375, "50e": 239, "50it": [327, 329], "50mb": 382, "50th": 331, "51": [35, 38, 239, 241, 323, 333, 334, 347, 351, 364, 365, 386], "510": 412, "512": [14, 16, 17, 21, 25, 85, 88, 93, 239, 241, 339, 393, 406, 412], "512x256x12": 412, "512x512": 412, "51it": 351, "51m": 375, "52": [351, 364, 365, 386], "523": [362, 368, 394], "526": 106, "528": 353, "5281": [214, 223], "5282": 177, "529": 383, "52it": 351, "52mb": 382, "53": [329, 351, 357, 363, 364, 365], "531849308275818": 374, "532": 374, "534": 383, "5369": 130, "538": [340, 383], "539": 341, "54": [320, 334, 351, 363, 364, 365], "5410": [180, 189], "543": 383, "548": 384, "548789978027344": 375, "549": 375, "54it": [351, 362], "54k": [375, 382], "55": [23, 327, 333, 334, 337, 351, 363, 364, 365, 382], "5513": 130, "553": 383, "5567108": 187, "558": [373, 376, 377], "55m": [338, 355], "56": [334, 339, 351, 364, 365, 370, 386], "566": [323, 325, 339, 394], "568": 371, "5684": [177, 180, 189], "56m": 366, "56mb": 375, "57": [214, 223, 320, 334, 337, 351, 363, 364, 365], "572": [384, 388, 394], "5720": 214, "5748996872970398": 357, "575": 357, "576": 385, "5779": 177, "5782": 238, "579": 383, "57it": [329, 370], "58": [235, 334, 350, 351, 353, 363, 364, 365, 385, 386, 394], "5842": 221, "585": [373, 379, 394], "586": 340, "5870": 335, "58754328": 339, "58it": 362, "59": [334, 340, 351, 364, 365], "5955": 337, "5976": 320, "59it": [351, 362], "5a": 218, "5d": [32, 44, 287, 333, 404, 417], "5e": [340, 371, 372, 373, 376, 377, 383, 386], "5e3": 366, "5j": 334, "5k": 375, "5m": [323, 334, 357, 386], "5mb": [323, 334, 364, 382], "5mib": [346, 386], "5x5": [361, 363], "6": [16, 23, 24, 90, 99, 103, 105, 125, 139, 140, 172, 173, 174, 190, 196, 204, 238, 246, 320, 326, 333, 337, 340, 345, 346, 350, 351, 362, 363, 364, 365, 368, 370, 375, 377, 381, 382, 383, 384, 385, 386, 388, 389, 412], "60": [16, 23, 334, 337, 340, 347, 351, 362, 363, 364, 365, 381, 386], "604": 339, "61": [328, 334, 351, 354, 364, 365, 375, 385], "611": 384, "61101531982422": 384, "6160": 177, "617": 174, "6179": 337, "61it": 351, "61m": 385, "62": [323, 334, 351, 364, 365, 370, 371, 386], "6209": 192, "624": [364, 368, 394], "629": 174, "62it": [351, 362, 370], "62mb": 382, "63": [323, 334, 340, 351, 363, 364, 365, 370], "631": 169, "633": 373, "633206176757813": 373, "635": [376, 379, 394], "639": 385, "63it": 351, "64": [29, 70, 74, 77, 83, 84, 85, 89, 93, 94, 97, 101, 104, 188, 243, 245, 252, 253, 326, 329, 335, 336, 346, 347, 351, 355, 356, 357, 364, 365, 368, 369, 372, 382, 383, 386, 394, 404], "640k": 351, "640x320": 412, "641": [338, 343, 394], "6418031": 67, "644": 169, "645": [357, 360, 394], "64it": [351, 362], "64m": 382, "64x64": [77, 97, 336, 363], "65": [334, 340, 351, 364, 365, 375], "650": 412, "651": 381, "6536": 214, "6592": 337, "65it": 362, "65m": [375, 382], "65mb": 351, "66": [103, 351, 361, 364, 365], "668229": 381, "6687": 335, "66it": 362, "67": [327, 351, 357, 362, 363, 364, 365, 368], "671": 383, "6714502": [53, 54], "672": 374, "674": [377, 379, 394], "6752": 177, "677": 383, "678": 382, "679": 382, "68": [13, 351, 364, 365, 386, 412], "68080139160156": 369, "681": 369, "682": 384, "68878173828125": 377, "689": [372, 377], "68945770263672": 372, "68it": [351, 362, 381], "69": [334, 339, 351, 364, 365], "69037": 363, "696kb": 382, "697kb": 382, "6995": 214, "69it": [327, 351, 381], "6m": [323, 334, 339, 365, 385, 386], "6mb": 332, "6mib": 354, "7": [16, 82, 98, 175, 176, 178, 183, 189, 203, 221, 252, 263, 320, 327, 334, 338, 340, 350, 351, 356, 362, 363, 364, 365, 370, 377, 381, 383, 384, 386, 399], "70": [189, 334, 337, 351, 362, 363, 364, 365, 381, 386], "7012": 337, "702": 384, "705": 323, "7051143970949734": 323, "7061": 337, "708": [337, 343, 394], "70e": [327, 333], "70it": [351, 362, 381], "71": [173, 351, 364, 365, 386], "7125": 130, "7137": 214, "717": 386, "7193": [180, 189], "71it": 381, "72": [106, 351, 356, 364, 365, 370], "722": 383, "725": 372, "727": 394, "72it": [351, 381], "72mb": 375, "73": [351, 363, 364, 365, 386], "7302": 182, "7325177722415908": 323, "733": [323, 375, 379, 394], "7340": 214, "735636393229164": 327, "736": 327, "738": 375, "73807144244024": 375, "739k": 351, "73e": 335, "73it": [351, 381], "74": [323, 334, 351, 364, 365, 386], "7400": 337, "740kb": 375, "7412": 334, "7444": 248, "74856948852539": 371, "7488": 337, "749": 371, "74it": [323, 338, 351], "75": [77, 97, 184, 284, 329, 334, 336, 351, 363, 364, 365, 383, 386], "7510": 337, "752": 339, "754": 370, "75595": 384, "757126": 320, "758": 388, "75it": 370, "76": [323, 351, 362, 364, 365], "764": 384, "768": [25, 412], "769": 383, "77": [351, 357, 363, 364, 365], "77124": 338, "7715": 337, "775": 377, "776": 383, "7769": 177, "777": 384, "77it": 351, "78": [320, 351, 364, 365, 382, 383, 386], "786": [373, 376], "78632784200239": [373, 376], "7883": 130, "78it": [364, 370], "78m": 340, "79": [331, 334, 351, 362, 364, 365, 366, 384, 386, 394], "7914941": 338, "7930": 337, "7944": 337, "795": [382, 383], "7969": 184, "797": 383, "79it": 351, "7db": 375, "7m": [323, 340, 350], "7mb": [334, 339], "7mib": 386, "8": [16, 21, 23, 45, 48, 64, 65, 67, 68, 69, 72, 73, 76, 77, 90, 103, 105, 107, 108, 109, 125, 149, 170, 173, 175, 176, 196, 221, 243, 245, 246, 252, 253, 313, 315, 318, 320, 323, 326, 327, 329, 333, 334, 336, 338, 340, 341, 346, 347, 350, 351, 354, 355, 357, 362, 363, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 399, 400, 404, 412], "80": [73, 329, 334, 337, 350, 351, 362, 363, 364, 365, 381], "800": 412, "800x800": 412, "801k": [339, 371], "806": [356, 360, 394], "8064": 182, "8075": 204, "80it": [351, 364], "81": [351, 357, 364, 365], "8137": 184, "8181": 177, "81it": [329, 364], "82": [351, 354, 364, 365], "820529": [339, 371], "820534": 339, "823": 369, "826": 377, "82it": [351, 364], "83": [334, 351, 363, 364, 365], "8307932": [214, 223], "831": 384, "8343": 337, "8380": 189, "8395": 337, "83it": [351, 364], "84": [323, 351, 357, 364, 365, 370, 385], "8405": 204, "843": 384, "84390640258789": 369, "844": [369, 384], "84499": 412, "8457": 214, "8477": 337, "848": 384, "848833121419835": 340, "849": 340, "84it": 364, "85": [260, 320, 323, 351, 364, 365, 370, 386], "851647675037384": 369, "852": [358, 360, 369, 394], "852k": 382, "856": 384, "8567": 189, "859": 340, "86": [329, 334, 351, 364, 365, 366], "8622": 192, "864": 386, "868": [354, 360, 394], "86mb": 382, "87": [351, 355, 363, 364, 365], "872": 369, "8746174573898315": 369, "875": 369, "876": [369, 376], "876023864746095": 376, "87it": [351, 362], "88": [334, 351, 364, 365, 384], "881": 377, "8814043693576259": 377, "88it": [323, 339, 361], "88m": 334, "88mb": 382, "89": [329, 351, 364, 365, 375], "8986": 130, "8994": 251, "899650573730469": [340, 385], "8a": 218, "8m": [323, 334, 339, 340, 364, 372, 385], "8mb": 334, "8mib": [340, 385, 386], "8x64x64": [243, 245, 253], "9": [48, 52, 53, 95, 97, 117, 190, 238, 239, 246, 323, 326, 327, 329, 333, 338, 340, 341, 347, 351, 357, 362, 363, 364, 365, 366, 369, 370, 375, 377, 379, 381, 382, 383, 384, 385], "90": [23, 92, 283, 287, 326, 337, 341, 345, 351, 362, 363, 364, 365, 371, 381], "900": [100, 339, 340, 371, 385], "9000": 130, "9002": 214, "901": 349, "901527404785156": 374, "902": [334, 357, 368, 374], "902320861816406": 357, "9026750869443771": 327, "903": 327, "904": 338, "908": 340, "90it": 351, "90m": 370, "91": [351, 364, 365], "9127841": 206, "91it": [323, 351], "91m": [375, 382, 385], "92": [334, 350, 351, 364, 365, 366], "921": 340, "921340942382812": 340, "923": 374, "923002624511719": 374, "92it": 323, "93": [351, 363, 364, 365], "9332": 177, "9360": 214, "938": [370, 379, 394], "9387": 337, "93it": 351, "93m": 386, "94": [350, 351, 364, 365], "946": 339, "947": [369, 379, 394], "948": 384, "9493": 214, "94it": 351, "95": [221, 334, 340, 351, 364, 365], "952": [381, 384], "9531": 337, "9547": 412, "955k": 338, "9595": 35, "95it": [351, 361], "96": [334, 335, 351, 364, 365], "9605e": 399, "961": 384, "9648": 337, "968": 384, "97": [323, 329, 351, 356, 363, 364, 365, 386], "97177505493164": 384, "972": [339, 384], "973": 412, "978": 323, "978289794921874": 323, "9793": 214, "97it": [351, 370], "97m": 382, "98": [35, 334, 350, 351, 364, 365, 375, 382], "98084411621094": 377, "981": 377, "9860": 184, "989": 384, "9897": 214, "98it": 351, "99": [35, 107, 351, 355, 364, 365, 382, 384], "993": [363, 368, 394], "996": [339, 386], "9971": 214, "999": [334, 384], "9999": [35, 38, 50, 414], "99e": 347, "99it": 351, "9k": [351, 375, 382], "9m": [334, 357, 386], "9mb": 334, "A": [12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 35, 38, 40, 45, 48, 52, 53, 54, 78, 85, 87, 88, 100, 102, 106, 107, 112, 117, 123, 126, 127, 129, 138, 156, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 214, 217, 220, 221, 224, 225, 226, 227, 228, 229, 231, 232, 237, 240, 243, 245, 247, 248, 249, 251, 252, 253, 257, 259, 262, 266, 267, 269, 271, 272, 273, 274, 275, 276, 279, 293, 302, 303, 308, 310, 315, 318, 320, 327, 332, 335, 338, 340, 342, 343, 344, 345, 346, 347, 350, 351, 355, 356, 357, 358, 361, 363, 364, 365, 372, 380, 382, 383, 384, 385, 392, 394, 395, 396, 398, 400, 401, 402, 403, 405, 406, 407, 408, 410, 412, 416, 417], "AT": [172, 173], "And": [103, 110, 173], "As": [121, 145, 151, 188, 320, 323, 345, 350, 351, 354, 356, 363, 365, 369, 370, 371, 372], "At": [32, 44, 47, 48, 81, 103], "By": [12, 17, 20, 26, 28, 32, 34, 40, 41, 42, 43, 44, 47, 48, 51, 52, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 103, 117, 130, 138, 143, 144, 146, 190, 192, 196, 198, 268, 269, 272, 273, 281, 283, 284, 300, 326, 339, 341, 369, 371, 414], "For": [23, 45, 48, 56, 58, 92, 103, 106, 107, 111, 117, 145, 151, 161, 169, 170, 174, 177, 178, 191, 198, 206, 212, 225, 228, 238, 243, 245, 253, 272, 273, 281, 283, 287, 292, 294, 320, 323, 326, 329, 332, 333, 338, 339, 340, 341, 345, 346, 347, 351, 355, 356, 358, 363, 364, 365, 369, 370, 375, 381, 382, 383, 385, 386, 406, 407, 412, 414, 415, 416, 417], "If": [12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 25, 26, 27, 28, 32, 35, 38, 41, 42, 45, 47, 48, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 85, 86, 88, 89, 92, 93, 97, 100, 103, 104, 105, 111, 112, 117, 125, 128, 138, 139, 144, 147, 151, 154, 155, 156, 157, 164, 165, 166, 167, 169, 170, 172, 173, 174, 175, 177, 178, 180, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 211, 212, 213, 214, 216, 220, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 246, 249, 250, 251, 259, 268, 270, 272, 273, 276, 279, 287, 292, 293, 294, 295, 307, 308, 310, 313, 315, 318, 320, 332, 335, 351, 372, 382, 383, 385, 390, 391, 400, 405, 408, 416, 417], "In": [12, 20, 21, 28, 44, 78, 88, 107, 115, 122, 129, 156, 177, 179, 190, 207, 214, 270, 320, 323, 326, 327, 330, 331, 332, 333, 334, 336, 338, 340, 345, 346, 347, 350, 351, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 369, 371, 372, 373, 374, 376, 377, 381, 382, 383, 384, 385, 386, 395, 404, 407, 408, 410, 413, 414, 415, 416], "It": [12, 13, 20, 27, 28, 32, 34, 41, 44, 55, 70, 71, 80, 88, 89, 95, 109, 112, 113, 133, 139, 170, 175, 176, 183, 190, 191, 196, 198, 207, 208, 211, 212, 218, 219, 258, 260, 266, 269, 279, 298, 326, 333, 337, 339, 346, 347, 351, 364, 396, 397, 400, 404, 410], "No": [74, 90, 125, 192, 246, 287, 320, 404, 405, 407, 413, 417], "On": 351, "One": [35, 38, 326, 364, 365, 382], "Or": 339, "The": [12, 13, 14, 15, 16, 17, 20, 21, 22, 24, 25, 26, 27, 28, 30, 32, 34, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 57, 61, 70, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 94, 95, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 117, 119, 121, 122, 123, 125, 126, 128, 130, 131, 137, 138, 139, 142, 143, 145, 148, 158, 159, 160, 161, 162, 163, 166, 167, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 184, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 202, 203, 205, 206, 207, 209, 210, 212, 213, 214, 217, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 237, 239, 240, 241, 243, 244, 245, 247, 251, 252, 253, 254, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 279, 281, 287, 290, 292, 310, 312, 313, 314, 323, 326, 327, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 345, 346, 347, 351, 354, 355, 356, 357, 358, 361, 362, 364, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 390, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 410, 411, 412, 413, 416, 417], "Their": 384, "Then": [14, 92, 194, 221, 326, 351, 369], "There": [16, 20, 21, 135, 136, 203, 320, 365, 374, 376, 377, 402, 417], "These": [9, 12, 26, 111, 145, 214, 280, 288, 289, 291, 293, 323, 336, 338, 339, 341, 370, 382, 383, 400, 408, 413, 417], "To": [14, 17, 21, 28, 32, 44, 45, 48, 70, 73, 75, 103, 145, 167, 236, 250, 287, 315, 323, 326, 333, 336, 339, 350, 363, 364, 369, 375, 381, 385, 386, 404, 414], "With": [330, 334, 365], "_": [21, 35, 38, 41, 42, 59, 60, 61, 62, 63, 92, 106, 107, 117, 123, 127, 128, 129, 130, 131, 132, 133, 134, 138, 141, 144, 145, 146, 147, 148, 149, 151, 155, 156, 157, 158, 160, 162, 163, 180, 247, 261, 263, 267, 320, 323, 334, 339, 345, 346, 347, 351, 355, 363, 365, 369, 372, 374, 381, 382, 383, 385, 386, 399, 402, 406, 407], "_0": 365, "_1": [117, 126, 129, 131, 132, 345, 382, 407, 414], "_2": [35, 38, 45, 52, 53, 54, 55, 106, 107, 117, 119, 126, 127, 128, 129, 130, 131, 133, 134, 150, 214, 272, 273, 320, 323, 327, 345, 346, 347, 365, 372, 376, 377, 382, 383, 385, 402, 407, 414], "_4": 341, "__add__": [70, 186, 251, 287], "__class__": 370, "__getitem__": 20, "__init__": [56, 58, 59, 60, 61, 62, 63, 268, 320, 327, 330, 335, 355, 357, 361, 384], "__iter__": 330, "__mul__": [186, 189, 190, 195, 198, 287], "__name__": 370, "_c": [329, 336, 366], "_description_": 14, "_f": [138, 293, 410], "_g": [293, 410], "_gaussian": 186, "_get_param": 287, "_i": [49, 73, 188, 414], "_k": 323, "_m": 48, "_n": [112, 113], "_nois": 186, "_p": [67, 414], "_t": [261, 263, 363, 365], "_transform": 287, "_vf": 341, "_x": [123, 148, 190, 198], "_z": [323, 402], "a_": [41, 42, 177, 190, 197, 198, 372], "a_1": [41, 43, 48, 148, 189, 190, 198, 210, 257, 373, 375, 400], "a_2": [41, 43, 48, 148, 189, 190, 195, 198, 210, 257, 373, 375, 400], "a_a_adjoint": [180, 190], "a_adjoint": [12, 17, 117, 126, 175, 178, 180, 183, 184, 188, 190, 192, 194, 202, 203, 205, 208, 209, 217, 276, 320, 329, 332, 335, 336, 338, 339, 346, 347, 355, 356, 358, 361, 362, 363, 366, 369, 381, 382, 383, 385, 386, 398, 400], "a_adjoint_a": [180, 190, 339], "a_bi": 35, "a_dagg": [12, 52, 180, 187, 188, 190, 196, 197, 198, 206, 276, 320, 331, 334, 335, 336, 338, 351, 375, 384, 400], "a_forward": [117, 126], "a_g": 42, "a_i": [148, 209, 257], "a_n": [210, 257], "a_t": [261, 365], "a_vjp": [123, 148, 190, 197, 198], "aa": [180, 190], "aat": 172, "ab": [34, 35, 38, 41, 42, 52, 53, 89, 92, 98, 99, 177, 183, 207, 260, 261, 263, 272, 273, 281, 290, 326, 333, 337, 339, 362, 363, 364, 366, 377], "abc": 237, "aberr": [326, 333], "abl": [280, 330, 363, 365], "about": [20, 102, 166, 320, 334, 374, 376, 404, 412, 413], "about_mapstyle_vs_iter": 330, "abov": [12, 23, 50, 92, 117, 156, 178, 184, 192, 194, 205, 277, 315, 318, 320, 323, 339, 363, 370, 400, 401], "abs_angl": [114, 334], "absenc": [142, 143], "absolut": [68, 105, 114, 169, 170, 171, 174, 198], "abstract": [52, 53, 54, 67, 187, 206, 237], "abud": 338, "abund": [188, 338], "abus": 138, "ac": [18, 369], "acar": [48, 246], "acc": [14, 339], "acceler": [14, 82, 111, 117, 126, 184, 192, 194, 205, 226, 229, 237, 243, 245, 253, 272, 280, 292, 336, 361, 369, 371, 408], "accept": [9, 114, 287, 417], "access": [17, 20, 21, 25, 27, 271, 330, 370, 400], "accfactor04": 14, "accord": [12, 14, 81, 181, 193, 202, 207, 237, 238, 245, 246, 247, 408, 413], "accordingli": [90, 125, 416], "account": [85, 194, 361, 390, 413], "accur": 326, "achiev": [45, 117, 280, 375], "acknowledg": 390, "acm": 173, "acorss": 188, "acquir": [20, 334], "acquisit": [117, 190, 198, 207, 268, 270, 272, 273, 293, 364, 371, 395, 400], "across": [12, 28, 109, 117, 207, 213, 230, 237, 243, 245, 253, 256, 292, 293, 312, 332, 369, 382, 383, 385, 386, 399, 412, 413, 416, 417], "act": [108, 109, 117, 191, 287, 329, 376, 400, 407], "act_mod": [85, 93], "action": [92, 288, 289, 290, 291], "activ": [50, 85, 89, 93, 97, 101, 239, 240, 241, 326, 333, 393, 413], "actual": [44, 138, 365, 369], "ad": [45, 186, 191, 199, 200, 215, 216, 251, 344, 363, 396, 402], "adam": [86, 279, 323, 329, 338, 339, 340, 351, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386], "adapt": [12, 32, 33, 39, 43, 44, 45, 47, 48, 49, 52, 53, 54, 81, 88, 101, 103, 105, 106, 107, 108, 109, 111, 117, 122, 148, 173, 214, 223, 246, 328, 369, 375, 397, 402, 403, 404, 413], "adapt_model": [32, 33, 39, 44, 45, 47, 48, 369, 374, 375], "add": [12, 31, 45, 103, 105, 185, 186, 190, 191, 195, 198, 199, 200, 213, 215, 216, 245, 320, 327, 328, 339, 345, 346, 354, 357, 363, 381, 400, 412], "addit": [12, 35, 45, 85, 88, 93, 97, 103, 117, 133, 154, 164, 165, 190, 211, 212, 258, 264, 270, 279, 294, 295, 323, 334, 365, 407, 413], "addition": [279, 284, 365], "address": 390, "adj_project": 320, "adjnufftobj": 320, "adjoint": [78, 106, 107, 117, 125, 149, 172, 173, 175, 178, 179, 180, 183, 184, 190, 192, 194, 202, 203, 205, 208, 209, 214, 217, 224, 225, 226, 228, 229, 233, 234, 320, 335, 338, 339, 346, 347, 358, 384, 385, 396, 398, 399, 400, 403], "adjoint_funct": [190, 398], "adjointness_test": [190, 335], "adjust": [180, 193, 245, 327], "adler": 384, "admit": 345, "admm": [126, 154, 155, 293, 294, 295, 327, 392, 407], "admunet": 404, "adv": [59, 60, 61, 62, 63, 323, 402], "advanc": [12, 81, 322, 326, 333, 394, 413], "advantag": 361, "adversari": [12, 19, 27, 28, 39, 51, 56, 57, 58, 59, 60, 61, 62, 63, 81, 83, 84, 87, 91, 101, 102, 110, 175, 190, 198, 248, 249, 251, 278, 279, 300, 302, 325, 394, 395, 405], "adversarial_loss": [56, 58], "adversarialoptim": [279, 323], "adversarialschedul": 323, "adversarialtrain": [323, 402], "advis": 365, "af_": 329, "aff": [288, 370], "affect": [28, 127, 190, 198, 395, 400], "affin": [280, 281, 341, 370, 417], "after": [17, 20, 35, 38, 50, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 103, 105, 126, 143, 202, 203, 259, 268, 279, 287, 314, 315, 318, 320, 323, 332, 337, 345, 351, 361, 375, 384, 390], "afterward": 384, "ag_": 86, "again": [13, 15, 16, 18, 19, 22, 25, 26, 27], "against": 20, "aggreg": 12, "aghabigl": 320, "agnost": [108, 404], "agre": [17, 26, 339, 369, 371], "agreement": [17, 26, 339, 369, 371], "ahead": 279, "ai": [12, 75, 320], "aim": [188, 320, 390, 402, 408, 410], "airi": [239, 320, 326, 333], "al": [48, 59, 60, 61, 62, 63, 74, 80, 81, 83, 84, 86, 88, 91, 97, 100, 101, 106, 110, 111, 245, 246, 280, 281, 290, 320, 323, 327, 329, 338, 341, 346, 354, 357, 363, 364, 365, 369, 370, 411], "algebra": 361, "algorithm": [5, 7, 10, 12, 13, 19, 25, 28, 39, 51, 81, 87, 89, 95, 98, 99, 106, 107, 113, 117, 118, 121, 122, 123, 126, 127, 129, 133, 138, 141, 142, 144, 145, 146, 147, 151, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 180, 183, 186, 190, 195, 198, 200, 207, 213, 214, 220, 245, 261, 263, 265, 268, 269, 272, 273, 276, 292, 293, 294, 295, 300, 302, 303, 305, 306, 308, 310, 311, 314, 320, 332, 334, 335, 337, 344, 359, 360, 367, 368, 385, 387, 388, 392, 394, 395, 405, 412], "alia": [16, 17, 21, 277], "alias": 221, "align": [155, 156, 157, 158, 159, 160, 161, 162, 163, 167, 220, 261, 262, 263, 293, 345, 355, 363, 365, 385, 406, 410], "all": [9, 12, 13, 14, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 30, 33, 35, 38, 39, 41, 48, 68, 69, 70, 85, 86, 90, 92, 103, 112, 117, 124, 125, 140, 151, 153, 154, 169, 170, 172, 173, 174, 189, 193, 212, 214, 222, 223, 232, 238, 246, 279, 280, 282, 287, 293, 294, 295, 312, 315, 318, 320, 326, 327, 328, 329, 330, 334, 339, 340, 341, 344, 345, 354, 355, 356, 357, 358, 365, 369, 370, 371, 372, 373, 374, 376, 377, 381, 382, 383, 384, 385, 386, 390, 394, 395, 400, 401, 404, 405, 407, 408, 411, 412, 413, 414, 415, 416, 417], "allclos": [190, 217, 334, 339, 400], "allow": [17, 20, 107, 176, 184, 189, 207, 271, 279, 280, 298, 397, 417], "almost": 238, "alon": [34, 405, 413], "along": [14, 88, 99, 117, 126, 184, 220, 276, 281, 287, 288, 289, 290, 291, 320, 327, 346, 347, 355, 356, 358, 384], "alongsid": [279, 339], "alparon": 74, "alpha": [45, 65, 74, 88, 93, 261, 263, 264, 268, 270, 272, 273, 274, 275, 361, 363, 364, 365, 366, 408, 414], "alpha_j": 365, "alpha_k": [158, 407], "alpha_t": [88, 365], "alphas_cumprod": 363, "alreadi": [13, 15, 16, 18, 22, 25, 26, 27, 28, 109, 358, 376], "also": [12, 17, 19, 28, 32, 41, 44, 48, 52, 53, 70, 77, 85, 88, 89, 93, 97, 104, 105, 112, 131, 145, 147, 173, 180, 186, 189, 190, 194, 211, 212, 213, 232, 279, 287, 323, 326, 333, 334, 335, 336, 338, 339, 341, 358, 362, 364, 365, 369, 374, 375, 376, 377, 382, 383, 390, 398, 400, 401, 406, 407, 408, 410, 411, 412, 413, 414, 416, 417], "altern": [12, 36, 37, 138, 155, 184, 189, 205, 323, 330, 354, 358, 363, 365, 402, 407], "although": [48, 145], "altogeth": 375, "alwai": [70, 207, 246, 264, 270, 274, 275, 287, 339, 365, 407], "ambientgan": [62, 63, 81, 402], "among": [16, 21, 151, 326, 330, 346, 354, 381, 384, 407, 415], "amount": [188, 273, 286, 287, 358, 363, 396], "amplitud": [115, 116, 216, 239, 241, 333], "amplitudeloss": 407, "an": [12, 20, 21, 32, 35, 44, 52, 53, 54, 70, 77, 78, 81, 82, 84, 85, 86, 88, 89, 92, 93, 97, 101, 102, 104, 106, 107, 112, 113, 117, 123, 124, 133, 138, 139, 142, 144, 145, 151, 154, 156, 158, 161, 167, 168, 173, 177, 180, 186, 188, 189, 190, 192, 194, 195, 197, 198, 202, 204, 207, 211, 212, 220, 238, 239, 241, 246, 249, 261, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 284, 287, 290, 292, 293, 294, 295, 302, 305, 307, 308, 310, 313, 315, 318, 320, 323, 326, 327, 328, 330, 332, 334, 335, 336, 338, 340, 341, 342, 343, 344, 350, 351, 355, 356, 357, 361, 362, 364, 365, 366, 369, 370, 371, 372, 374, 376, 377, 382, 383, 385, 389, 390, 391, 394, 395, 397, 399, 400, 402, 403, 405, 407, 408, 410, 412, 413, 414, 417], "analog": 279, "analogi": 188, "analysi": [174, 389, 399], "analyz": [188, 397], "anatomi": [26, 339], "ancestr": 365, "anderson": [117, 126, 292], "anderson_acceler": [117, 126, 381], "anderson_acceleration_backward": [292, 381], "anderson_acceleration_step": 126, "andrew": 392, "angap": 333, "angl": [12, 24, 76, 90, 123, 125, 135, 139, 140, 144, 145, 180, 182, 190, 191, 195, 198, 214, 216, 220, 222, 223, 281, 283, 288, 289, 290, 291, 310, 326, 333, 334, 336, 337, 344, 350, 352, 353, 358, 375, 384, 394, 411, 417], "angular": 333, "ani": [12, 17, 28, 32, 34, 40, 41, 42, 43, 44, 48, 51, 52, 57, 68, 69, 81, 92, 94, 111, 139, 156, 184, 190, 192, 194, 198, 205, 213, 214, 223, 245, 253, 276, 277, 287, 292, 293, 323, 328, 330, 334, 335, 338, 341, 364, 390, 391, 401, 402, 404, 405, 406, 408, 410, 413], "anim": [315, 318, 369, 397], "anim_kwarg": 315, "anim_writ": [315, 318], "anisotrop": 220, "anneal": 47, "annoi": 213, "annot": [21, 412], "annual": 389, "anoth": 32, "ansi": 326, "ansi_standard_indic": 326, "anti": 221, "antiproportion": 191, "anyth": 369, "ap": 105, "apertur": [178, 239, 241, 333, 338], "appear": [320, 400], "append": [298, 334, 337, 363, 365], "appli": [14, 16, 19, 33, 44, 48, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 80, 87, 88, 92, 94, 100, 102, 106, 107, 110, 112, 114, 117, 147, 149, 151, 166, 175, 176, 178, 180, 183, 184, 186, 188, 189, 190, 192, 194, 196, 197, 202, 203, 206, 207, 208, 210, 213, 222, 226, 229, 238, 246, 259, 269, 281, 288, 289, 290, 291, 320, 323, 326, 329, 338, 345, 346, 347, 351, 355, 361, 362, 363, 365, 366, 375, 382, 386, 399, 402, 403, 405, 407], "applic": [106, 107, 202, 320, 338, 399, 400], "apply_mask": 14, "apply_nois": [34, 41, 42], "approach": [78, 81, 178, 188, 320, 341, 372, 384, 415], "appropri": [32, 44, 48, 66, 71, 112, 133, 363], "approx": [14, 35, 38, 47, 214, 361, 365, 366, 396, 402, 408, 412], "approxim": [20, 45, 47, 52, 53, 54, 92, 112, 125, 147, 151, 190, 214, 235, 238, 246, 261, 264, 266, 269, 270, 272, 274, 275, 320, 333, 336, 351, 358, 361, 364, 366, 383, 400, 408, 411], "ar": [3, 12, 14, 16, 17, 20, 21, 23, 26, 28, 29, 32, 33, 40, 41, 42, 44, 45, 47, 48, 50, 53, 57, 78, 81, 86, 87, 88, 89, 92, 98, 99, 102, 103, 107, 110, 111, 112, 113, 114, 117, 126, 138, 142, 143, 151, 155, 156, 157, 160, 169, 170, 172, 173, 174, 175, 177, 179, 180, 183, 184, 187, 189, 190, 192, 193, 194, 196, 198, 201, 202, 204, 205, 208, 209, 210, 211, 212, 214, 220, 222, 223, 227, 232, 235, 238, 240, 243, 245, 246, 251, 252, 257, 261, 268, 270, 272, 273, 276, 279, 281, 283, 287, 288, 289, 291, 293, 307, 308, 310, 312, 313, 314, 315, 318, 320, 323, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 345, 346, 347, 350, 351, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 370, 371, 372, 373, 374, 376, 377, 381, 382, 383, 384, 385, 386, 390, 393, 395, 397, 399, 400, 401, 402, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417], "arang": [32, 44, 222, 223], "arbitrari": [112, 259, 287, 334, 339, 363, 365, 412], "architectur": [10, 77, 78, 79, 82, 85, 89, 93, 97, 100, 103, 104, 105, 110, 295, 323, 329, 332, 339, 340, 363, 364, 369, 371, 373, 374, 375, 376, 377, 381, 385, 386, 392, 395, 402, 404, 405], "archiv": 20, "aren": [66, 71, 287], "arg": [30, 31, 34, 42, 64, 70, 74, 77, 81, 84, 88, 90, 92, 97, 100, 106, 107, 112, 113, 116, 117, 118, 119, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 143, 144, 146, 147, 148, 149, 150, 151, 153, 156, 157, 158, 159, 161, 163, 168, 190, 198, 237, 238, 243, 245, 246, 253, 258, 259, 262, 264, 269, 270, 274, 275, 277, 278, 280, 282, 283, 284, 285, 286, 287, 292, 293, 315, 320, 327, 339, 345, 351, 357, 383, 384, 385, 406, 407], "argentina": [329, 361, 362, 366], "argmin": [88, 127, 129, 131, 133, 134, 144, 263, 323, 363, 402], "args_model": 35, "argument": [19, 22, 23, 26, 35, 51, 70, 88, 90, 103, 117, 125, 126, 135, 136, 154, 164, 165, 172, 195, 213, 231, 258, 259, 264, 270, 277, 279, 287, 293, 294, 295, 330, 341, 412, 414], "aris": 351, "arithmet": [287, 341], "around": [220, 331, 389, 397], "arrai": [21, 88, 201, 202, 256, 263, 296, 320, 336, 363], "arridg": 384, "arriv": 416, "arrow": 13, "art": [320, 392], "artefact": 411, "artifact": [32, 78, 105, 214, 223, 276, 369, 372, 395, 402, 404, 405], "artifact2artifact": [12, 26, 32, 39, 44, 48, 96, 102, 117, 180, 184, 190, 192, 193, 198, 205, 213, 236, 237, 238, 245, 251, 253, 293, 300, 302, 310, 315, 344, 378, 379, 394], "artifact2artifactloss": [48, 236, 369, 413], "artifact2artifactsplittingmaskgener": 401, "artifact_remov": 385, "artifactremov": [49, 87, 111, 190, 340, 372, 373, 374, 375, 376, 377, 403, 415], "arxiv": [34, 35, 38, 41, 42, 52, 53, 78, 89, 92, 98, 99, 177, 183, 248, 260, 261, 263, 272, 273, 281, 290, 362, 364, 377], "asarrai": 363, "ascent": [52, 53], "ask": 390, "assert": [186, 320, 334, 339, 400], "assess": 74, "assign": [28, 196, 369, 401], "associ": [20, 28, 34, 39, 40, 41, 42, 43, 45, 47, 48, 52, 53, 54, 106, 107, 117, 126, 133, 144, 149, 202, 232, 242, 268, 320, 331, 336, 339, 363, 382, 411, 412, 416], "assum": [12, 34, 35, 38, 41, 60, 61, 63, 88, 109, 128, 174, 176, 188, 193, 213, 214, 222, 223, 272, 273, 287, 338, 339, 363, 365, 369, 408, 413, 416], "assumpt": [156, 261, 413], "astigmat": 326, "at_next": 365, "ata": 172, "atan": 358, "aten": [331, 341], "atmospher": 187, "attempt": [287, 302, 405], "attent": [77, 88, 97, 103, 105, 358], "attn_drop_r": 105, "attn_resolut": [77, 97], "attr": [271, 341], "attribut": [70, 81, 155, 156, 157, 178, 186, 191, 199, 200, 215, 216, 259, 271, 314, 328, 363, 401, 415], "atu": 99, "au": [127, 129, 133], "augment": [9, 24, 28, 34, 39, 41, 42, 77, 87, 92, 95, 97, 186, 195, 213, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 303, 308, 310, 315, 318, 342, 343, 344, 394, 395, 417], "augment_dim": [77, 97], "augment_label": [77, 97], "author": [88, 105, 363, 365, 384, 411], "authorship": 390, "auto_exampl": [322, 325, 343, 349, 353, 360, 368, 379, 380, 388], "auto_examples_jupyt": 344, "auto_examples_python": 344, "autocalibr": 246, "autoencod": [32, 44, 404], "autograd": [365, 398], "automat": [12, 144, 145, 146, 190, 198, 262, 279, 287, 323, 327, 333, 334, 339, 358, 365, 390, 398, 411, 416], "aux": 117, "aux_x": 365, "auxiliari": [106, 117, 126], "avail": [12, 77, 78, 85, 88, 89, 92, 93, 97, 104, 105, 112, 113, 127, 129, 151, 172, 190, 198, 235, 279, 320, 326, 330, 337, 338, 339, 340, 345, 371, 385, 397, 399, 401, 402, 404, 406, 410, 411, 412], "averag": [12, 16, 44, 45, 48, 85, 92, 93, 109, 135, 136, 175, 176, 178, 179, 190, 191, 196, 213, 276, 287, 296, 335, 341, 345, 362, 366, 369, 375, 397, 400, 404, 414, 417], "averagemet": [12, 397, 414], "avg": [351, 416], "avg16": 16, "avg2": 16, "avg4": 16, "avg8": 16, "avgpool": [85, 93], "avoid": [28, 86, 116, 140, 196, 268, 279, 329, 330, 361], "awar": 404, "award": 389, "awgn": 365, "ax": [117, 125, 126, 129, 133, 156, 169, 170, 172, 173, 174, 180, 190, 220, 282, 310, 320, 327, 346, 347, 350, 351, 366, 382, 383, 385, 399, 408], "ax_": 361, "ax_cur": 98, "ax_k": [382, 383], "axi": [14, 130, 214, 223, 281, 282, 288, 345, 363, 412], "axial": [239, 333], "b": [14, 32, 35, 38, 44, 52, 53, 54, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 88, 94, 95, 100, 105, 108, 109, 115, 116, 124, 127, 128, 134, 163, 167, 169, 170, 172, 173, 174, 175, 178, 179, 184, 186, 188, 192, 193, 194, 197, 201, 202, 204, 205, 206, 208, 213, 217, 224, 225, 226, 227, 228, 229, 233, 234, 235, 236, 237, 250, 252, 258, 268, 270, 271, 272, 273, 287, 310, 313, 315, 318, 323, 329, 331, 332, 333, 334, 337, 338, 339, 350, 351, 355, 357, 361, 362, 364, 365, 366, 369, 370, 371, 372, 373, 375, 376, 377, 382, 383, 385, 401, 404, 407, 414, 417], "b1hw": 74, "b4": [329, 361, 362, 366], "b_": [202, 204, 206, 331], "b_1": 202, "b_2": 202, "b_dagger": 197, "b_i": [52, 115, 407], "b_l": 202, "b_t": [261, 365], "back": [12, 28, 78, 119, 214, 294, 295, 320, 363, 382, 383], "backbon": [47, 78, 81, 100, 111, 329, 339, 340, 382, 410, 414, 415], "backbone_gener": 81, "backbone_infer": [78, 111], "backbone_net": [78, 100, 108, 109, 372], "backend": 320, "background": [142, 143, 206, 331], "backproject": [99, 320, 336, 351, 381, 382, 383, 384, 386], "backpropag": [35, 38, 80, 139, 365, 395, 408], "backtrack": [117, 327, 347, 357], "backtrak": 327, "backward": [12, 60, 61, 63, 127, 129, 214, 279, 292, 327, 351, 392, 408, 410, 416], "balanc": [402, 414], "ball": [127, 128, 129, 385], "band": [151, 178, 188, 196, 338, 382, 414], "bar": [12, 28, 81, 259, 263, 270, 276, 340, 365, 371, 372, 373, 374, 376, 377, 381, 382, 383, 384, 385, 386], "barbara": [326, 355], "bare": 20, "base": [1, 7, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 222, 223, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 296, 297, 304, 323, 329, 339, 350, 361, 365, 369, 384, 392, 399, 402, 404, 405, 406, 407, 408, 412, 413, 414], "base_dir": [323, 327, 328, 332, 334, 340, 345, 346, 347, 354, 355, 356, 357, 358, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386], "baseclass": 70, "basedeq": [294, 410], "baselin": [12, 323, 375], "baselossschedul": [36, 37, 46, 50, 413], "basemaskgener": [14, 243, 245, 253], "baseoptim": [122, 154, 293, 295, 354, 357, 358, 407], "basesd": [259, 264, 408], "basesdesolv": [258, 264, 266, 267, 270, 274, 275, 408], "baseunfold": [96, 292, 294, 295, 410], "bash": 302, "basi": [332, 345, 382, 385, 389], "basic": [12, 175, 176, 188, 190, 194, 279, 281, 336, 343, 392, 394, 399, 400], "basplib": 320, "batch": [12, 21, 24, 28, 30, 32, 35, 38, 39, 44, 47, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 80, 85, 86, 88, 89, 90, 101, 108, 110, 116, 117, 124, 125, 128, 134, 139, 168, 169, 170, 172, 173, 174, 184, 186, 188, 189, 192, 205, 206, 213, 217, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 250, 251, 253, 254, 276, 280, 281, 284, 287, 288, 289, 290, 291, 296, 310, 312, 313, 328, 330, 346, 351, 354, 357, 371, 372, 381, 382, 383, 404, 414], "batch_dimens": 168, "batch_gaussian_nois": 186, "batch_norm": [101, 110, 323, 340, 370], "batch_siz": [12, 21, 28, 35, 38, 52, 53, 54, 55, 85, 90, 98, 99, 125, 189, 202, 213, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 259, 323, 326, 327, 328, 330, 333, 339, 340, 350, 351, 354, 357, 365, 369, 371, 372, 373, 374, 376, 377, 381, 382, 383, 384, 385, 386, 400, 412], "batch_step": [238, 246], "batchnorm": 110, "batchnorm2d": 110, "batchwis": 287, "bay": [270, 364, 365, 408], "bayer": [181, 336], "bayer_filt": 181, "bayesian": 366, "bch": 74, "beam": [214, 223], "beat": 77, "becaus": [14, 332, 385], "beck": 107, "been": [12, 13, 15, 18, 22, 25, 27, 28, 35, 38, 43, 126, 320, 323, 327, 328, 329, 338, 339, 340, 354, 356, 357, 358, 363, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 385, 386], "befor": [14, 28, 32, 33, 38, 39, 44, 45, 48, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 86, 105, 109, 126, 154, 183, 189, 192, 194, 200, 205, 259, 279, 287, 293, 294, 295, 314, 323, 363, 365, 385], "begin": [12, 117, 127, 128, 151, 155, 156, 157, 158, 159, 160, 161, 162, 163, 167, 178, 190, 198, 202, 210, 218, 219, 220, 221, 257, 261, 262, 263, 269, 292, 293, 320, 345, 346, 347, 351, 355, 363, 365, 382, 385, 400, 406, 407, 410], "beginn": [83, 84], "behav": [106, 271], "behavior": 20, "behaviour": [68, 69, 287], "behind": 20, "being": [12, 20, 143, 334, 363, 412], "belong": 45, "below": [12, 14, 32, 44, 64, 70, 76, 189, 320, 326, 333, 390, 396, 405, 408, 413], "benchmark": [13, 20, 23, 191, 338, 412], "benefit": [70, 280], "bergman": 356, "berkelei": [13, 412], "bernoulli": [53, 54, 189, 238, 375, 376], "bernoullisplittingmaskgener": [48, 178, 189, 246, 250, 369, 375, 401], "besid": 334, "bessel": 203, "best": [12, 45, 48, 81, 323, 334, 340, 363, 365, 370, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 386], "beta": [74, 90, 125, 126, 138, 142, 143, 155, 156, 157, 187, 221, 261, 263, 275, 350, 363, 364, 365, 384, 386, 407, 414], "beta_": [275, 364, 365, 408], "beta_anderson_acc": [117, 126], "beta_anderson_acc_backward": 292, "beta_d": 408, "beta_end": [88, 263, 363, 365], "beta_max": 275, "beta_min": 275, "beta_start": [88, 263, 363, 365], "beta_t": 365, "better": [20, 45, 48, 70, 264, 270, 274, 275, 334, 339, 340, 345, 371, 372, 373, 374, 376, 377, 381, 382, 383, 384, 385, 386, 405, 414], "between": [12, 15, 16, 17, 20, 22, 34, 35, 36, 37, 41, 46, 48, 59, 60, 62, 63, 65, 66, 76, 79, 107, 110, 117, 123, 124, 138, 144, 190, 197, 198, 203, 209, 214, 223, 241, 252, 263, 268, 269, 273, 283, 310, 313, 320, 323, 327, 329, 337, 351, 354, 357, 358, 363, 365, 396, 402, 406, 407, 414, 417], "beyond": [341, 370, 371], "bfbatchnorm2d": 110, "bi": 169, "bia": [89, 98, 99, 101, 103, 105, 110, 340, 371, 372, 373, 374, 376, 381, 382, 383, 384, 385, 386, 402], "bias": [12, 89, 110], "biasfre": [103, 110], "bicgstab": [172, 190, 198], "biconjug": [169, 172], "biconjugate_gradient_stabilized_method": 169, "bicub": [183, 196, 218, 242, 284, 357], "bicubic_filt": 401, "bigcup_t": 205, "biggan": 77, "bigger": [48, 177, 207, 310, 313], "bilinear": [183, 196, 219, 242, 281, 288, 289, 290, 291], "bilinear_filt": 401, "bin": [206, 231, 232, 331], "binari": [178, 180, 184, 189, 192, 194, 205, 207, 238, 246, 336, 372], "binomi": 45, "biolog": 16, "birdcag": [194, 339], "bkg": [142, 143], "bkg_level": 331, "black": [175, 176, 183, 190, 390, 399], "blank": [17, 236, 250], "blind": [59, 60, 101, 104, 110, 323, 400, 412], "bling": 103, "blob": 411, "block": [57, 77, 85, 93, 97, 98, 99, 103, 105, 139, 246, 310, 404, 410, 415], "blue": [331, 338], "blur": [20, 176, 180, 183, 190, 196, 198, 208, 218, 219, 220, 221, 224, 227, 235, 240, 247, 248, 249, 251, 252, 303, 308, 310, 323, 333, 342, 343, 344, 347, 356, 357, 361, 363, 381, 386, 394, 400, 401], "blur_col": 333, "blur_confoc": 333, "blur_gener": 323, "blurfft": [326, 327, 346, 354, 356, 361, 381, 400, 401], "blurri": [20, 412], "blurry_shot": 20, "bm3d": 404, "bmatrix": [190, 198, 210, 257, 400], "boil": 270, "bologna": 389, "bool": [12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 26, 27, 28, 32, 34, 35, 38, 41, 42, 44, 47, 48, 52, 53, 57, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 81, 86, 88, 89, 92, 93, 94, 98, 99, 101, 103, 104, 105, 106, 107, 110, 117, 126, 138, 140, 142, 143, 151, 154, 164, 165, 166, 167, 168, 169, 170, 173, 174, 177, 178, 184, 189, 190, 192, 193, 194, 196, 200, 202, 203, 204, 205, 207, 212, 214, 222, 223, 224, 226, 227, 229, 232, 238, 246, 258, 259, 260, 261, 262, 263, 265, 268, 270, 272, 273, 276, 278, 279, 280, 283, 287, 292, 293, 294, 295, 302, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 320], "boolean": [95, 139, 268], "bora": [59, 60, 62, 63, 81, 323], "borrow": 232, "both": [20, 97, 172, 195, 207, 214, 246, 248, 249, 278, 279, 323, 333, 339, 351, 358, 369, 371, 375, 382, 383, 384, 400, 407, 416], "bottom": [17, 178, 312], "bound": [231, 232], "boundari": [140, 252, 320, 326], "box": [268, 272, 273, 361], "brain": [16, 17, 26, 339, 345, 412], "brain_dataset": 339, "brainweb": [339, 345], "brainweb_t1_icbm_1mm_subject_0": [333, 339, 345], "breath": [32, 44, 236, 250], "bredi": 106, "bregman": [119, 120, 121, 137, 144, 154, 161, 294, 295, 356], "bregman_icnn": 407, "bregman_potenti": [144, 154, 161, 294, 295, 356], "bregman_prox": 144, "bregmanl2": [161, 407], "briefli": 411, "briggs_weight": 320, "bright": 320, "broad": 103, "broadcast": [189, 224, 225, 227, 228, 233, 234], "brovei": [196, 338], "brownian": [258, 259, 270, 364, 408], "bsd68": 13, "bsds500": [90, 125, 350, 411], "buffer_s": 330, "bug": 391, "build": [24, 57, 85, 87, 88, 95, 97, 102, 123, 133, 140, 144, 145, 147, 153, 154, 176, 180, 186, 189, 190, 195, 198, 255, 258, 259, 262, 264, 266, 268, 269, 270, 273, 274, 275, 294, 295, 302, 303, 308, 310, 318, 320, 328, 341, 344, 355, 366, 367, 368, 392, 394, 400, 404, 408, 410, 415], "build_prob": [201, 202, 337, 401], "builder": 410, "built": [94, 139], "burg": [121, 356], "burgentropi": [356, 407], "burn": [268, 272, 273], "burnin": [265, 361], "burnin_ratio": [265, 268, 272, 273, 361], "butterfli": [356, 363, 364, 365], "bx": [197, 201], "byaman14": 246, "bz": 171, "c": [14, 23, 24, 32, 44, 53, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 86, 88, 94, 100, 103, 105, 108, 109, 128, 173, 174, 175, 176, 177, 178, 179, 180, 181, 184, 188, 189, 192, 193, 194, 196, 202, 203, 204, 205, 207, 208, 211, 212, 213, 217, 224, 225, 226, 227, 228, 229, 233, 234, 235, 236, 237, 238, 243, 245, 246, 250, 252, 253, 258, 270, 271, 287, 310, 313, 315, 318, 320, 333, 336, 339, 345, 364, 369, 383, 385, 400, 404, 412, 414, 417], "c2": 365, "c_": 151, "c_1": 414, "c_2": 414, "cach": [17, 323, 332, 334, 338, 339, 350, 351, 354, 355, 357, 364, 365, 366, 369, 370, 371, 372, 373, 375, 376], "cal": 190, "cal_psnr": 334, "calcul": [45, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 94, 119, 121, 123, 130, 132, 137, 144, 146, 148, 150, 192, 194, 205, 213, 287, 310, 315, 318, 337, 361, 414], "call": [12, 20, 33, 37, 39, 46, 51, 56, 58, 92, 107, 123, 126, 138, 148, 189, 190, 217, 236, 276, 287, 310, 315, 318, 326, 333, 334, 341, 364, 400, 404, 408, 410], "callabl": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 52, 70, 92, 117, 118, 123, 124, 126, 140, 141, 144, 145, 146, 154, 167, 169, 170, 171, 172, 173, 174, 180, 190, 195, 198, 210, 211, 213, 217, 251, 258, 264, 265, 268, 272, 273, 287, 294, 295, 305], "camera": [20, 188, 207, 288, 289, 290, 291, 355, 370, 411, 417], "cameraman": [393, 406], "can": [1, 9, 12, 14, 17, 20, 23, 26, 28, 32, 34, 35, 38, 40, 41, 42, 43, 44, 45, 48, 51, 52, 53, 54, 57, 70, 77, 79, 80, 81, 85, 86, 87, 88, 89, 92, 93, 94, 97, 104, 105, 108, 109, 110, 112, 113, 114, 117, 126, 130, 133, 139, 147, 151, 154, 177, 183, 184, 186, 189, 190, 192, 194, 195, 196, 197, 198, 203, 204, 205, 207, 208, 214, 217, 223, 224, 225, 226, 227, 228, 229, 233, 234, 237, 238, 242, 246, 251, 260, 261, 268, 270, 276, 277, 280, 292, 293, 294, 295, 300, 312, 314, 315, 318, 320, 323, 326, 327, 328, 330, 332, 333, 334, 335, 336, 338, 339, 340, 341, 344, 345, 346, 347, 354, 361, 362, 363, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 390, 392, 393, 395, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 412, 413, 414, 415, 416, 417], "cancer": [21, 412], "cancerimagingarch": 21, "capabl": 213, "capac": 330, "capitol": [121, 356], "captur": [188, 190, 198, 395, 396, 400], "cardiac": [339, 412], "care": [263, 361, 413, 416], "carefulli": 363, "carlo": [32, 45, 48, 52, 53, 54, 92, 265, 268, 272, 273, 287, 341, 361, 366, 404, 405], "cartesian": [184, 192, 194, 205, 243, 245, 253, 336, 339], "cascad": [111, 245, 339], "case": [28, 32, 44, 45, 47, 73, 75, 78, 88, 115, 127, 128, 129, 138, 167, 177, 178, 190, 198, 207, 214, 218, 219, 221, 261, 270, 288, 289, 290, 291, 320, 326, 328, 330, 331, 333, 339, 345, 346, 355, 365, 369, 375, 382, 404, 406, 407, 408, 412, 415, 416], "cassi": [178, 338], "cast": 19, "cat": [110, 331, 335, 336, 339, 365], "caus": [20, 110], "caveat": [12, 365], "cbar": [310, 320], "cbsb68": 13, "cbsbd68": 13, "cbsd500": [381, 386], "cbsd68": [327, 336, 340, 385, 412], "cbsd_0010": [326, 336, 337, 350], "cc": 47, "cdot": [112, 113, 117, 123, 127, 147, 148, 151, 163, 166, 167, 188, 193, 219, 221, 261, 263, 287, 323, 345, 363, 364, 365, 395, 402, 407, 408, 410, 414], "celeba": [28, 412], "celeba_exampl": [66, 71, 341, 364, 370], "cell": [16, 280], "center": [127, 128, 129, 175, 176, 183, 190, 193, 224, 226, 237, 243, 245, 246, 253, 385], "center_block": 246, "center_fract": [237, 243, 245, 253], "centercrop": [17, 323, 327, 328, 339, 340, 346, 347, 354, 357, 370, 381, 385, 386], "centr": 369, "certain": [20, 86, 287, 329, 330, 412], "cfloat": [19, 177, 204, 212, 320], "cg": [169, 170, 172, 190, 198], "cgan": 402, "cgstab": 169, "ch": 22, "chain": [123, 148, 265, 268, 272, 273, 287, 341, 405, 417], "challeng": [14, 15, 320, 339, 412], "chambol": [12, 19, 28, 39, 51, 87, 106, 107, 112, 123, 127, 141, 144, 145, 154, 156, 158, 180, 189, 190, 198, 276, 293, 294, 295, 302, 305, 332, 344, 384, 387, 388, 394, 407], "chang": [12, 117, 126, 175, 198, 287, 326, 364, 374, 390, 416], "channel": [17, 24, 29, 48, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 82, 83, 84, 85, 88, 89, 90, 93, 94, 97, 98, 99, 101, 103, 104, 105, 110, 125, 139, 166, 177, 178, 179, 181, 184, 188, 189, 192, 193, 194, 204, 205, 206, 207, 211, 213, 224, 225, 226, 227, 228, 229, 237, 238, 239, 240, 241, 243, 245, 246, 248, 249, 253, 310, 313, 326, 328, 329, 331, 335, 336, 337, 345, 346, 350, 354, 357, 369, 381, 384, 411], "channel_mult": [77, 97], "channel_mult_emb": [77, 97], "channel_mult_nois": 97, "channelwis": [177, 204, 336], "character": [190, 198, 395, 400], "characteris": 323, "cheap": 112, "chebyshev": [272, 408], "check": [12, 13, 15, 16, 18, 22, 25, 27, 103, 117, 126, 190, 192, 193, 194, 238, 279, 287, 320, 383, 385, 386, 390], "check_clip_grad": [12, 279], "check_clip_grad_d": 279, "check_conv_fn": [117, 126], "check_dataset_exist": [13, 18, 23, 25, 27], "check_grad": 12, "check_input_rang": [66, 71], "check_iteration_fn": [117, 126], "check_mask": [184, 192, 193, 194], "check_pixelwis": 238, "checkpoint": [12, 105, 323, 327, 332, 334, 338, 339, 350, 351, 355, 357, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376], "checksum": 15, "chen": [341, 370, 392], "child": [145, 237, 292, 293, 407], "choic": [20, 52, 53, 54, 90, 122, 125, 350, 351, 358, 396, 402, 404, 407], "choos": [23, 32, 36, 37, 43, 46, 84, 88, 117, 126, 151, 181, 190, 209, 224, 226, 227, 229, 327, 332, 336, 340, 351, 355, 363, 365, 371, 372, 373, 374, 376, 377, 381, 382, 383, 384, 385, 386, 410], "choosen": 351, "chose": [346, 354, 381], "chosen": [12, 28, 92, 105, 117, 172, 190, 191, 276, 350, 356, 358, 363, 381, 386, 406, 408], "christoph": 174, "chung": 365, "chunk": [32, 236, 369], "chw": 73, "cine": [14, 339, 412], "cine_lax": 14, "cine_lax_mask": 14, "cine_sax": 14, "cine_sax_mask": 14, "cine_xax_mask": 14, "circ": [67, 189, 190, 195, 198, 407], "circl": [214, 222, 223, 358, 384], "circular": [110, 175, 176, 183, 190, 196, 208, 214, 223, 224, 225, 226, 227, 228, 229, 235, 252, 285, 323, 326, 333, 399], "circular_pad": [110, 323, 370], "cirm": 389, "ckp_": 12, "ckp_10_demo_r2r_poisson": 374, "ckp_10_demo_sur": 376, "ckp_50_demo_n2n": 373, "ckp_best": 12, "ckp_interv": [12, 371, 372], "ckpt": [323, 332, 338, 339, 340, 356, 357, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 411], "ckpt_dir": [332, 340, 356, 371, 372, 373, 374, 376, 377, 381, 382, 383, 384, 385, 386], "ckpt_path": 78, "ckpt_pretrain": 12, "ckpt_state_dict": 332, "claim": 117, "clamp": [151, 320, 339, 347, 363], "clamp_max": 151, "clamp_min": [151, 320], "class": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 222, 223, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 304, 320, 326, 327, 328, 330, 333, 334, 335, 336, 338, 339, 340, 345, 346, 347, 351, 354, 355, 358, 362, 363, 364, 365, 366, 369, 377, 381, 382, 383, 384, 385, 386, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 412, 413, 414, 416], "class_label": [77, 97, 264], "classic": [196, 338, 395], "classif": 279, "classifi": [56, 58, 77, 97, 101, 168, 413, 414], "classmethod": 20, "clean": [16, 45, 184, 189, 192, 194, 198, 384, 386, 390, 402], "click": 21, "clip": [12, 30, 200, 262, 265, 268, 272, 273, 276, 279, 283, 310, 313, 334, 350, 351, 361, 364, 365, 393, 406, 407, 412], "clip_posit": [199, 200], "clone": [336, 345, 351, 356, 363, 365], "close": [112, 113, 127, 128, 129, 135, 136, 183, 190, 198, 335, 345, 361, 362, 398, 400, 402, 405], "closer": [190, 260, 263, 334], "cm": [214, 223], "cmap": [310, 312, 313, 320, 345], "cmrxrecon": [14, 339, 412], "cmrxreconslicedataset": [339, 412], "cnn": [122, 329, 354, 404], "co": [13, 18, 27, 220, 323, 330, 332, 333, 334, 338, 339, 345, 350, 351, 355, 357, 364, 365, 366, 369, 370, 371, 372, 373, 375, 376, 393, 406, 411], "code": [12, 14, 43, 73, 75, 88, 105, 106, 107, 111, 126, 173, 178, 243, 320, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 347, 350, 351, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 390, 398, 406, 407, 411, 415, 416], "coeff": [112, 240, 241, 326, 333], "coeff_col": [239, 333], "coeff_il": 239, "coeffic": 112, "coeffici": [112, 113, 151, 179, 239, 240, 241, 258, 259, 270, 326, 333, 334, 336, 364], "coil": [17, 111, 184, 192, 193, 194, 205, 339, 369, 371], "coil_map": [194, 339], "coil_map_0": 339, "coil_map_1": 339, "coil_map_2": 339, "coincid": 333, "colab": 344, "coll": 333, "collabor": 80, "collat": 287, "collate_batch": 287, "collect": [2, 4, 21, 92, 239, 287, 333, 369, 392, 400, 407, 410], "colon": 396, "color": [13, 77, 90, 97, 125, 181, 188, 196, 326, 327, 328, 334, 335, 336, 337, 340, 346, 347, 354, 355, 356, 357, 358, 381, 384, 385, 386, 411], "colorjitt": 341, "colormap": [310, 313, 320], "colour": [326, 335, 341], "column": [189, 245, 253, 310, 313, 382, 383], "com": [194, 344, 351, 393], "combett": 345, "combin": [65, 178, 188, 190, 195, 198, 209, 210, 251, 252, 263, 338, 341, 363, 398, 415], "come": [118, 124, 144, 145, 190, 269, 294, 295, 400, 407], "command": [302, 390], "comment": [323, 369], "commerci": 16, "common": [151, 258, 320, 329, 361, 362, 366, 381, 382, 386, 407, 417], "commonli": [25, 27, 126, 399], "commun": 390, "commut": 92, "compar": [12, 15, 20, 32, 57, 81, 236, 292, 323, 339, 361, 362, 364, 366], "compare_no_learn": [12, 338], "comparison": [12, 20, 57, 276], "compat": [14, 112, 174, 192, 194, 338, 339, 413, 415], "compens": 320, "compil": 23, "complet": [178, 279], "complex": [19, 28, 31, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 114, 151, 166, 177, 184, 192, 193, 194, 203, 207, 310, 313, 320, 332, 334, 336, 337, 339, 345, 412, 414], "complex64": [194, 337, 339], "complex_ab": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 339], "complex_denois": 404, "complex_dtyp": 19, "compliant": 390, "complic": 323, "compon": [90, 125, 168, 351, 365, 408], "component_log_likelihood": 168, "compos": [17, 21, 49, 57, 89, 113, 129, 148, 190, 287, 323, 327, 328, 330, 339, 340, 341, 346, 347, 354, 357, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 385, 386, 400, 412], "composit": [106, 107, 400], "compound": [9, 287, 417], "comprehens": [390, 393, 412], "compress": [12, 19, 28, 39, 51, 59, 60, 81, 105, 123, 133, 144, 145, 151, 162, 177, 178, 190, 198, 293, 295, 300, 302, 310, 314, 323, 338, 344, 387, 388, 394, 401, 412], "compressedsens": [336, 382, 383, 400, 401, 412], "compressivespectralimag": [338, 401], "comptu": 166, "comput": [12, 14, 21, 24, 32, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 52, 53, 54, 55, 57, 66, 71, 73, 75, 87, 89, 90, 95, 106, 107, 112, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 161, 169, 172, 177, 179, 180, 182, 183, 186, 189, 190, 191, 195, 196, 197, 198, 202, 203, 204, 205, 207, 209, 210, 212, 214, 216, 217, 221, 222, 223, 226, 229, 231, 232, 248, 256, 258, 261, 262, 263, 264, 265, 268, 269, 270, 272, 273, 274, 275, 276, 279, 292, 293, 295, 302, 303, 308, 310, 311, 320, 326, 327, 328, 329, 334, 335, 340, 344, 345, 346, 347, 350, 352, 354, 355, 356, 357, 359, 361, 362, 363, 365, 366, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 389, 398, 399, 400, 407, 408, 411, 416], "compute_alpha": [263, 365], "compute_alpha_beta": 261, "compute_invers": [204, 336], "compute_loss": [12, 279, 351, 416], "compute_metr": [12, 117, 126, 292, 293, 320, 334, 346, 347, 355, 356, 358, 416], "compute_norm": [190, 273, 320, 335, 407], "concaten": [98, 99, 105, 189, 190, 195, 198, 202, 281, 287, 288, 289, 290, 291], "conclus": 334, "cond": 77, "condat": [87, 89, 106, 107, 117, 123, 133, 138, 141, 144, 145, 154, 164, 165, 180, 186, 190, 195, 198, 207, 302, 303, 308, 310, 311, 344, 359, 360, 394, 406], "condatvu": 355, "condit": [12, 20, 59, 60, 77, 88, 97, 101, 173, 190, 226, 229, 252, 263, 264, 269, 270, 326, 363, 364, 372, 395, 400, 408], "condition_numb": 190, "confer": [122, 354, 357], "config": [104, 331, 363], "config_matplotlib": [331, 363], "confirm": [17, 26, 339, 369, 371], "confoc": [16, 239], "confocal_bpae_b": 16, "confocal_bpae_g": 16, "confocal_bpae_r": 16, "confocal_fish": 16, "confocal_mic": 16, "confocalblurgenerator3d": [333, 401], "conj": [163, 166, 167, 190, 407], "conj_model": 120, "conjug": [118, 119, 120, 121, 123, 124, 137, 144, 148, 156, 166, 170, 172, 183, 190, 196, 355, 407], "conjugate_gradi": 407, "conjugate_gradient_method": 170, "conjunct": [12, 276, 302], "conlim": 173, "connect": [77, 79, 97, 105, 110, 404], "consecut": [20, 144, 327, 357], "consequ": 191, "consid": [17, 90, 125, 139, 169, 170, 172, 173, 174, 225, 228, 238, 239, 240, 241, 246, 270, 283, 336, 350, 351, 364, 365, 384], "consider": 243, "consist": [16, 20, 21, 25, 28, 32, 40, 42, 43, 44, 48, 51, 59, 60, 61, 62, 63, 77, 81, 88, 97, 111, 117, 192, 196, 320, 332, 336, 338, 355, 363, 365, 369, 371, 372, 385, 396, 410, 412], "consol": [12, 28, 168, 169, 170, 173, 174, 276], "consortium": 21, "const": 351, "constant": [35, 52, 53, 54, 103, 106, 107, 135, 136, 166, 171, 187, 190, 191, 224, 261, 268, 272, 273, 274, 275, 287, 339, 350, 365, 381, 413, 416], "constant_batch": 280, "constant_shap": [283, 287], "constrain": [12, 19, 28, 39, 51, 87, 107, 112, 123, 127, 141, 144, 145, 180, 189, 190, 198, 276, 293, 295, 302, 305, 332, 341, 344, 387, 388, 394, 417], "constraint": [268, 272, 273, 411], "construct": [5, 28, 32, 44, 59, 60, 62, 63, 255, 323, 333, 336, 363, 369, 375, 405], "constructor": [20, 247, 277], "consumpt": [90, 125], "contain": [4, 7, 8, 9, 12, 13, 14, 16, 17, 18, 19, 21, 23, 25, 27, 28, 41, 42, 112, 113, 117, 126, 138, 154, 155, 156, 157, 158, 159, 161, 163, 168, 175, 176, 199, 203, 206, 214, 223, 252, 268, 271, 272, 273, 293, 294, 295, 306, 307, 308, 314, 326, 328, 331, 332, 333, 338, 355, 369, 382, 400, 407, 408, 410, 411, 412, 413, 414, 417], "content": [15, 339], "context": [47, 293, 323, 330], "continu": [280, 370, 417], "contrast": 351, "contribut": [232, 389], "contributor": [389, 390], "control": [20, 48, 52, 92, 110, 122, 185, 261, 273, 358, 361, 363, 364, 366, 375, 396, 413], "conv": [101, 103, 104, 105], "conv1d": 331, "conv2d": [175, 227, 399], "conv2d_fft": [228, 399], "conv3d": 175, "conv3d_fft": [175, 229, 399], "conv_transpose2d": [224, 399], "conv_transpose2d_fft": [225, 399], "conv_transpose3d_fft": [226, 399], "convdecod": [86, 329, 402], "conveni": [20, 193, 338, 339, 345, 346, 347, 361, 369, 371, 414], "convent": [64, 76, 112, 179, 240, 345], "converg": [12, 35, 38, 106, 107, 117, 126, 127, 129, 138, 144, 149, 160, 169, 190, 265, 268, 272, 273, 320, 327, 335, 345, 346, 347, 354, 355, 356, 357, 358, 362, 384, 407], "convers": 391, "convert": [17, 26, 31, 87, 88, 114, 179, 180, 184, 307, 308, 334, 335, 362, 369, 403, 404, 408], "convert_to_fp16": 88, "convert_to_fp32": 88, "convex": [94, 106, 107, 118, 119, 120, 121, 123, 124, 128, 137, 144, 148, 161, 356, 385, 407], "convolut": [77, 82, 83, 84, 85, 86, 89, 93, 94, 97, 98, 99, 103, 105, 110, 147, 175, 176, 203, 208, 224, 225, 226, 227, 228, 229, 235, 245, 320, 327, 329, 331, 346, 364, 366, 399, 400, 402, 407, 408], "convolv": [147, 224, 225, 226, 227, 228, 229, 326], "convtranspos": [85, 93], "coordin": [220, 248, 312, 320], "copi": [331, 333, 336, 345, 363, 381, 382, 383, 385, 386], "core": 330, "cornelliu": 174, "corner": 312, "correct": [81, 88, 166, 203, 320, 337, 358], "correct_global_phas": [334, 337], "correctli": [13, 15, 18, 22, 25, 27, 385], "correl": [224, 227, 373], "correspond": [16, 38, 44, 81, 103, 117, 119, 121, 135, 136, 137, 138, 156, 163, 166, 167, 184, 185, 190, 191, 192, 197, 198, 201, 202, 205, 209, 210, 211, 212, 224, 225, 226, 227, 228, 229, 251, 257, 262, 264, 270, 279, 288, 289, 290, 291, 312, 320, 326, 333, 336, 351, 355, 357, 363, 365, 382, 383, 386, 404, 407, 408], "corrupt": [45, 47, 356, 373, 374, 376, 377], "cosin": [167, 334], "cosine_similar": [167, 334], "cosineannealinglr": 384, "cost": [53, 117, 126, 138, 154, 155, 156, 157, 158, 159, 161, 190, 264, 270, 274, 275, 294, 295, 327, 334, 346, 347, 355, 357, 407], "cost_tv": 346, "cost_tv_prox": 346, "cost_wv": 347, "cost_wv_prox": 347, "could": 329, "count": 232, "coupl": 351, "cours": 369, "cov": 168, "cov_regular": 168, "covari": [163, 167, 168, 248, 274], "coverag": 320, "cp": [154, 293, 294, 295, 332, 385, 407], "cpab": 280, "cpabdiffeomorph": [339, 341, 417], "cpiter": [384, 385], "cpp": [331, 341], "cpu": [12, 28, 32, 44, 56, 57, 58, 59, 60, 61, 62, 63, 66, 71, 77, 78, 85, 87, 89, 90, 93, 94, 97, 100, 102, 103, 104, 108, 109, 112, 113, 122, 125, 139, 151, 168, 175, 176, 177, 178, 179, 181, 183, 184, 188, 189, 192, 193, 194, 196, 201, 202, 203, 204, 205, 206, 207, 208, 211, 212, 214, 217, 221, 222, 223, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 250, 251, 253, 254, 255, 258, 260, 261, 263, 264, 270, 274, 275, 276, 280, 281, 288, 289, 290, 291, 293, 295, 307, 308, 320, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 339, 340, 345, 346, 347, 350, 351, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 393, 406], "craft": [404, 405], "creat": [19, 28, 32, 35, 38, 42, 44, 48, 57, 70, 90, 92, 117, 125, 126, 177, 180, 182, 184, 186, 188, 189, 190, 192, 194, 195, 198, 204, 205, 213, 237, 238, 245, 246, 251, 253, 260, 268, 277, 287, 295, 302, 305, 310, 327, 334, 337, 341, 342, 343, 344, 354, 355, 394, 398, 400, 404, 407, 410], "create_sampl": 100, "creation": 335, "crit": [106, 107, 327, 347, 362], "crit_conv": [117, 127, 129, 268, 273, 327, 357], "criteria": [81, 268, 327, 354, 357], "criterion": [12, 106, 107, 117, 126, 127, 129, 149, 190, 345], "critic": [56, 58, 279], "crop": [17, 112, 178, 192, 193, 194, 211, 283, 287, 307, 308, 339], "crop_output": 112, "cropms": 339, "croppsnr": 339, "cross": [224, 227], "crucial": [358, 402], "csgm": [81, 402], "csgm_model": 323, "csgmgener": [323, 402], "csv": 21, "ct": [12, 21, 39, 48, 51, 87, 89, 90, 98, 99, 117, 123, 125, 133, 138, 139, 141, 144, 145, 154, 156, 164, 165, 186, 190, 191, 195, 198, 214, 293, 295, 302, 303, 308, 310, 311, 344, 350, 351, 359, 360, 387, 388, 392, 394, 399, 412], "ct_small": 351, "ct_toi": 351, "cth": 194, "cubic": [151, 345], "cuda": [12, 90, 122, 125, 175, 176, 208, 251, 260, 263, 302, 320, 323, 326, 327, 328, 329, 331, 332, 333, 334, 336, 337, 339, 340, 345, 346, 347, 350, 351, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 415], "cumprod": [363, 365], "cup_": [329, 361, 362, 366], "cur_data_fidel": [126, 138, 155, 156, 157, 158, 159, 161, 334, 355, 384], "cur_param": [126, 138, 155, 156, 157, 158, 159, 161, 163, 334, 355], "cur_prior": [126, 138, 155, 156, 157, 158, 159, 161, 163, 334, 355, 384], "current": [12, 33, 72, 98, 99, 117, 126, 138, 155, 156, 157, 158, 159, 161, 163, 168, 175, 176, 180, 183, 185, 186, 188, 191, 195, 199, 200, 208, 216, 251, 258, 259, 262, 264, 269, 270, 279, 304, 327, 347, 355, 361, 362, 365, 384, 397], "current_log": 351, "curv": [320, 327, 334, 337, 340, 346, 347, 355, 356, 358, 371, 372, 373, 374, 376, 381, 382, 383, 384, 385, 386, 397], "custom": [12, 19, 26, 28, 39, 51, 87, 89, 95, 117, 123, 133, 138, 141, 144, 145, 147, 154, 162, 164, 165, 176, 177, 180, 183, 186, 190, 195, 196, 198, 207, 220, 268, 273, 276, 287, 293, 294, 295, 300, 302, 303, 305, 308, 310, 311, 314, 328, 332, 334, 339, 342, 343, 344, 358, 359, 360, 367, 368, 375, 385, 387, 388, 394, 395, 400, 406, 408, 412, 416], "custom_init": [117, 320, 332, 358, 384, 385], "custom_init_cp": [332, 385], "custom_metr": 117, "custom_output": [357, 384], "customis": 341, "customtrain": 416, "cutoff": [240, 241, 326, 333], "cv": 18, "cviter": 355, "cx256x256": [23, 412], "cyclegan": 323, "d": [35, 45, 55, 56, 58, 59, 60, 61, 62, 63, 67, 74, 88, 92, 106, 107, 119, 121, 123, 124, 125, 137, 141, 146, 147, 148, 149, 175, 177, 187, 192, 193, 194, 203, 204, 206, 226, 229, 232, 242, 258, 259, 264, 269, 270, 274, 275, 278, 279, 313, 320, 323, 331, 333, 339, 345, 355, 361, 364, 366, 385, 402, 407, 408], "d_": [74, 118, 144, 206, 261, 263, 331, 356, 385, 414], "d_i": [148, 211, 212], "d_lambda": 74, "dabov": 80, "dagger": [52, 78, 180, 403], "damp": [173, 272], "daniil": [106, 107], "data": [9, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 32, 34, 40, 42, 43, 44, 48, 51, 52, 53, 54, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 90, 94, 97, 104, 108, 109, 111, 115, 116, 117, 122, 123, 125, 126, 127, 129, 131, 133, 134, 138, 148, 151, 153, 154, 155, 156, 157, 158, 159, 161, 163, 164, 168, 188, 192, 193, 194, 202, 203, 213, 222, 223, 236, 242, 244, 246, 250, 251, 254, 258, 261, 262, 263, 264, 269, 270, 274, 275, 276, 277, 279, 293, 294, 295, 300, 320, 323, 329, 334, 337, 338, 351, 364, 370, 395, 396, 397, 399, 400, 404, 405, 406, 410, 413, 415, 416, 417], "data_dir": [14, 305, 306, 323, 327, 328, 332, 338, 340, 345, 346, 347, 354, 356, 357, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386], "data_fidel": [117, 121, 126, 133, 138, 148, 154, 155, 156, 157, 158, 159, 161, 261, 263, 268, 270, 272, 273, 293, 294, 295, 320, 327, 332, 334, 337, 346, 347, 351, 354, 355, 356, 357, 358, 361, 363, 364, 365, 366, 381, 382, 383, 384, 385, 386, 393, 406, 407, 410], "data_fidelity_list": 148, "data_fold": 14, "data_init": 168, "data_test": 412, "data_train": 412, "databas": 21, "datafid": [117, 123, 131, 133, 134, 135, 142, 148, 153, 351, 396, 406, 407, 410], "datafidel": [115, 117, 126, 127, 129, 133, 135, 138, 142, 148, 153, 154, 155, 156, 157, 158, 159, 161, 261, 263, 268, 269, 272, 273, 293, 294, 295, 355, 384, 407], "datafidnam": [117, 123, 133, 148, 406, 407], "datagener": 376, "dataload": [12, 14, 21, 168, 276, 277, 279, 323, 327, 338, 339, 340, 351, 354, 355, 356, 357, 358, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 412, 416], "dataparallel": 415, "datapoint": 28, "dataset": [0, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 48, 90, 125, 180, 182, 186, 190, 191, 192, 193, 194, 195, 198, 276, 277, 279, 300, 302, 305, 306, 310, 333, 334, 336, 338, 339, 342, 343, 344, 345, 350, 351, 356, 358, 365, 369, 370, 375, 390, 392, 393, 394, 395, 397, 399, 406, 411, 413, 414, 416], "dataset_cach": [14, 17], "dataset_filenam": [28, 340, 371, 372, 373, 374, 376, 377, 381, 382, 383, 385, 386], "dataset_info": 13, "dataset_nam": [305, 327, 328, 346, 347, 354, 355, 357], "dataset_path": [17, 323, 339], "dataweight": [203, 320], "daubechi": 320, "db": [320, 329, 334, 345, 346, 347, 355, 356, 358, 361, 362, 366], "db1": [151, 320, 345], "db2": [112, 151, 320, 345], "db3": [320, 345], "db4": [113, 151, 320, 345], "db5": 320, "db6": 320, "db7": 320, "db8": [112, 113, 151, 320, 332, 345, 347, 382, 385], "dcgan": [81, 83, 84, 323, 402], "dcgan_faces_tutori": [83, 84], "dcgandiscrimin": [60, 61, 63, 323, 402], "dcgangener": [81, 323, 402], "dcm": 21, "dd_hh": 12, "ddim": [261, 365], "ddpm": [97, 364, 365], "ddrm": [335, 362, 408], "deal": [12, 213, 339], "deblock": 22, "deblur": [12, 19, 20, 22, 28, 39, 51, 59, 60, 85, 87, 89, 101, 103, 107, 117, 122, 123, 133, 141, 144, 145, 149, 154, 176, 180, 186, 190, 195, 198, 220, 276, 284, 292, 294, 302, 305, 306, 310, 311, 323, 342, 343, 344, 348, 349, 356, 359, 360, 363, 370, 387, 388, 392, 394, 404, 412], "deblurgan": [59, 60, 101, 323], "deblurgan_model": 323, "debug": 79, "dec": 112, "decid": 390, "decod": [82, 85, 86, 97, 103, 329, 402], "decoder_typ": 97, "decolor": [196, 335, 338, 401], "decolorizesvd": 335, "decompos": [178, 203, 270, 320, 364, 408], "decomposablephys": [176, 179, 182, 184, 189, 192, 205, 207, 260, 326, 335, 361, 362, 398, 400, 416], "decomposit": [112, 113, 151, 176, 180, 184, 189, 192, 205, 207, 240, 241, 260, 326, 333, 335, 361, 362, 398, 400], "deconvolut": [399, 410], "decor": 287, "decreas": [117, 168, 260, 261, 263, 363, 365], "dedic": 16, "deep": [12, 19, 28, 32, 39, 44, 51, 66, 78, 82, 83, 84, 85, 86, 87, 89, 100, 102, 117, 120, 122, 123, 133, 141, 144, 145, 154, 176, 180, 186, 189, 190, 195, 198, 220, 236, 245, 250, 276, 292, 293, 294, 302, 305, 306, 308, 310, 328, 334, 342, 343, 344, 354, 369, 387, 388, 390, 394, 395, 405], "deepimageprior": [82, 329], "deepinv": [0, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 347, 350, 351, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 389, 390, 392, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417], "deepinv_data": 300, "deepinv_dataset_path": 327, "deepinv_datasets_path": [340, 371, 372, 373, 374, 375, 376, 377, 385], "deepinvers": [12, 14, 17, 19, 26, 28, 34, 39, 51, 78, 87, 89, 96, 102, 110, 111, 117, 123, 133, 144, 145, 151, 154, 174, 180, 184, 190, 192, 193, 194, 198, 203, 213, 237, 243, 245, 251, 253, 280, 287, 293, 299, 300, 301, 302, 303, 305, 306, 310, 311, 312, 313, 315, 321, 322, 336, 338, 342, 343, 344, 390, 394, 397, 407, 411], "def": [35, 268, 320, 323, 327, 330, 332, 335, 339, 351, 355, 357, 361, 363, 365, 383, 384, 385, 416], "def_crit": 149, "default": [12, 13, 14, 15, 16, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 83, 84, 85, 88, 89, 92, 93, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 112, 113, 117, 122, 123, 124, 126, 127, 128, 130, 134, 138, 139, 142, 143, 144, 146, 149, 151, 154, 155, 156, 157, 164, 165, 166, 167, 175, 177, 178, 179, 188, 189, 190, 192, 193, 196, 198, 203, 204, 207, 211, 212, 213, 214, 222, 223, 224, 226, 227, 229, 236, 237, 238, 239, 240, 241, 242, 246, 248, 249, 250, 251, 252, 258, 259, 261, 262, 263, 265, 268, 269, 270, 272, 273, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 300, 305, 306, 310, 312, 313, 314, 315, 318, 320, 326, 334, 350, 397, 400, 411, 414, 415], "default_preprocess": 167, "defin": [33, 34, 40, 41, 42, 45, 47, 49, 51, 61, 67, 81, 87, 90, 95, 102, 112, 113, 115, 116, 117, 125, 126, 128, 129, 130, 131, 133, 138, 139, 147, 148, 155, 156, 157, 158, 159, 161, 163, 175, 176, 177, 179, 180, 182, 183, 184, 187, 189, 190, 192, 193, 194, 196, 197, 198, 201, 203, 204, 205, 207, 209, 214, 218, 219, 220, 223, 248, 258, 259, 260, 261, 263, 264, 267, 268, 269, 270, 274, 275, 279, 287, 315, 318, 320, 326, 330, 331, 333, 334, 335, 339, 341, 345, 350, 351, 358, 363, 364, 370, 371, 372, 373, 374, 376, 377, 395, 399, 400, 402, 405, 406, 407, 408, 410, 412, 416, 417], "definit": [174, 326, 355, 365, 398, 414], "defocu": 103, "defocus_deblur": 103, "deform": 417, "deg2rad": 333, "deg_dir": [327, 332, 345, 346, 347, 354, 357, 381], "degrad": [301, 306, 332, 345, 356, 358, 397, 411], "degre": [92, 214, 220, 281, 283, 287, 288, 289, 290, 291, 333, 336, 341, 351, 371], "dehaz": 401, "delet": 369, "delta": [47, 208, 221, 320, 326], "demo": [14, 17, 26, 66, 71, 205, 320, 323, 326, 327, 328, 332, 333, 334, 336, 337, 338, 339, 340, 341, 345, 346, 347, 350, 351, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 385, 386, 411, 412], "demo_3d_wavelet": [345, 349, 394], "demo_artifact2artifact": [369, 379, 394], "demo_artifact2artifact_mri": 369, "demo_blur_tour": [326, 343, 394], "demo_custom_kernel": [361, 368, 394], "demo_custom_prior": [327, 343, 394], "demo_custom_prior_unfold": [383, 388, 394], "demo_dataset": [328, 343, 394], "demo_ddrm": [362, 368, 394], "demo_deq": [381, 388, 394], "demo_deq0": 381, "demo_diffpir": [363, 368, 394], "demo_diffusion_sd": [364, 368, 394], "demo_dip": [329, 343, 394], "demo_dp": [365, 368, 394], "demo_ei_transform": [370, 379, 394], "demo_epl": [350, 353, 394], "demo_equivariant_imag": [371, 379, 394], "demo_equivariant_imaging0": 371, "demo_fastmri_brain_multicoil": [17, 339], "demo_gan_imag": [323, 325, 394], "demo_hf_dataset": [330, 343, 394], "demo_learned_primal_du": [384, 388, 394], "demo_licp": 383, "demo_licp0": 383, "demo_lidar": [331, 343, 394], "demo_lista": [382, 388, 394], "demo_lista0": 382, "demo_load": [332, 343, 394], "demo_measplit_mnist_tomographi": 375, "demo_microscopy_3d": [333, 343, 394], "demo_moi_ckp_10": 372, "demo_multioperator_imag": [372, 379, 394], "demo_multioperator_imaging0": 372, "demo_multioperator_imaging1": 372, "demo_multioperator_imaging2": 372, "demo_multioperator_imaging3": 372, "demo_multioperator_imaging4": 372, "demo_multioperator_imaging5": 372, "demo_multioperator_imaging6": 372, "demo_multioperator_imaging7": 372, "demo_multioperator_imaging8": 372, "demo_multioperator_imaging9": 372, "demo_n2n": 373, "demo_n2n0": 373, "demo_n2n_denois": [373, 379, 394], "demo_nbu_pansharpen": 338, "demo_patch_priors_ct": [351, 353, 394], "demo_phase_retriev": [334, 343, 394], "demo_phys": [335, 343, 394], "demo_physics_tour": [336, 343, 394], "demo_pnp_custom_optim": [355, 360, 394], "demo_pnp_dpir_deblur": [354, 360, 394], "demo_pnp_mirror_desc": [356, 360, 394], "demo_ptychographi": [337, 343, 394], "demo_r2r": 374, "demo_r2r0": 374, "demo_r2r_denois": [374, 379, 394], "demo_red_gspnp_sr": [357, 360, 394], "demo_remote_sens": [338, 343, 394], "demo_ri_bas": [320, 322, 394], "demo_sampl": [366, 368, 394], "demo_splitting_loss": [375, 379, 394], "demo_sur": [376, 377], "demo_sure0": [376, 377], "demo_sure_denois": [376, 379, 394], "demo_tour_mri": [339, 343, 394], "demo_train_inpaint": [340, 343, 394], "demo_training_inpaint": [340, 385], "demo_training_inpainting0": [340, 385], "demo_transform": [341, 343, 394], "demo_tv_minimis": [346, 349, 394], "demo_unfolded_constrained_lista": [385, 388, 394], "demo_unfolded_cp": 332, "demo_unfolded_cp_ptwt": 332, "demo_unfolded_sr": 386, "demo_unfolded_sr0": 386, "demo_unsur": [377, 379, 394], "demo_vanilla_pnp": [358, 360, 394], "demo_vanilla_unfold": [386, 388, 394], "demo_wavelet_prior": [347, 349, 394], "demonstr": [323, 338, 341, 369, 370, 375, 417], "demosa": 401, "demosaick": 22, "den": 363, "denois": [12, 16, 19, 22, 28, 39, 43, 45, 47, 49, 52, 53, 54, 77, 78, 79, 80, 85, 88, 89, 90, 92, 93, 95, 96, 97, 102, 103, 104, 105, 106, 107, 110, 111, 112, 113, 114, 117, 122, 123, 125, 133, 141, 144, 145, 146, 147, 148, 149, 151, 154, 180, 183, 185, 186, 189, 190, 191, 195, 198, 199, 200, 215, 216, 260, 261, 262, 263, 264, 268, 270, 272, 273, 274, 275, 276, 293, 294, 295, 300, 302, 303, 305, 306, 308, 310, 328, 329, 332, 339, 344, 348, 349, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 366, 369, 371, 375, 378, 379, 381, 382, 385, 386, 390, 392, 393, 394, 395, 396, 401, 403, 405, 406, 407, 408, 410, 411, 417], "denoised_imag": 404, "denoiser_arg": 92, "denoiser_complex": 334, "denoiser_kwarg": 92, "denoiser_nam": 357, "denoisernam": [87, 92, 262, 406], "denoising_color": 103, "denoising_gamma": 374, "denoising_grai": 103, "denoising_r": 103, "denorm": [142, 143], "denot": [35, 67, 128, 160, 175, 176, 187, 193, 333, 408], "dens": 139, "densiti": [142, 245, 253, 351], "dep": 393, "depend": [17, 47, 56, 57, 58, 88, 117, 214, 251, 258, 263, 264, 268, 320, 351, 361, 364, 390, 396, 405, 407, 410], "deploi": 405, "deprec": [12, 45, 48, 78, 177, 277], "depth": [47, 89, 98, 99, 104, 105, 187, 192, 194, 198, 206, 239, 241, 302, 313, 333, 339, 342, 343, 344, 345, 356, 381, 386, 394], "deq": [12, 19, 28, 39, 51, 87, 89, 123, 133, 141, 144, 145, 176, 180, 186, 190, 195, 198, 292, 294, 302, 305, 306, 310, 344, 387, 388, 394, 405, 410], "deq_build": [381, 410], "der": 169, "derain": [103, 404], "deriv": [53, 417], "descent": [87, 89, 94, 117, 118, 121, 123, 142, 144, 145, 146, 154, 159, 161, 162, 171, 176, 180, 190, 195, 198, 200, 220, 293, 294, 295, 302, 303, 308, 310, 311, 327, 344, 346, 347, 358, 359, 360, 377, 383, 394, 406, 407], "describ": [12, 77, 97, 122, 139, 189, 190, 191, 198, 260, 261, 263, 332, 354, 366, 372, 395, 400, 401, 404], "descript": [106, 107, 151, 243, 245, 253, 369, 390, 399, 402, 405, 406, 408, 409, 412, 413, 416, 417], "design": [47, 52, 53, 54, 77, 87, 97, 334, 339, 404, 413], "desir": [12, 17, 28, 84, 213, 243, 310, 323, 364, 390], "detach": [331, 336, 337, 351, 363, 365], "detail": [5, 6, 7, 10, 12, 17, 32, 35, 38, 41, 43, 44, 45, 53, 54, 70, 77, 85, 88, 89, 90, 93, 97, 104, 105, 106, 107, 113, 117, 122, 125, 151, 154, 169, 170, 174, 178, 185, 188, 190, 191, 196, 198, 235, 240, 241, 248, 252, 276, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 310, 313, 363, 365, 369, 371, 375, 385, 398, 400, 406, 410, 411, 413, 414], "detect": 412, "detector": [214, 223, 333], "detector_radiu": [214, 223], "detector_spac": [214, 223], "determin": [139, 166, 168, 179, 237, 304], "determinist": [190, 198, 287, 395, 396, 400, 416, 417], "dev": [362, 366], "develop": [390, 392, 393], "deviat": [52, 53, 77, 97, 117, 122, 133, 154, 182, 186, 196, 199, 206, 215, 220, 248, 262, 276, 293, 294, 295, 296, 327, 331, 336, 345, 346, 347, 350, 354, 355, 357, 358, 362, 363, 365, 396, 404, 407, 414], "devic": [12, 28, 32, 44, 56, 57, 58, 59, 60, 61, 62, 63, 66, 71, 77, 78, 81, 85, 87, 89, 90, 93, 94, 97, 100, 102, 103, 104, 108, 109, 112, 113, 122, 125, 139, 151, 168, 175, 176, 177, 178, 179, 181, 183, 184, 188, 189, 192, 193, 194, 195, 196, 201, 202, 203, 204, 205, 206, 207, 208, 211, 212, 214, 217, 221, 222, 223, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 250, 251, 253, 254, 255, 258, 260, 261, 263, 264, 270, 274, 275, 276, 280, 281, 288, 289, 290, 291, 293, 295, 302, 307, 308, 320, 323, 326, 327, 328, 329, 331, 332, 333, 334, 336, 337, 339, 340, 345, 346, 347, 350, 351, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 393, 406, 415, 416], "device_count": 415, "device_id": 415, "df": 38, "df73285e": 354, "dft": 212, "dhariw": [77, 411], "diag": [35, 38, 163, 167, 177, 180, 189, 194, 197, 202, 326, 407], "diagnost": 21, "diagon": [35, 38, 48, 189, 211, 212, 233, 234, 361, 399], "diagonal_mod": 212, "dicom": 21, "dict": [12, 14, 17, 19, 75, 117, 126, 138, 154, 155, 156, 157, 158, 159, 161, 163, 198, 209, 210, 214, 223, 237, 238, 239, 240, 241, 244, 254, 271, 278, 287, 292, 293, 294, 295, 310, 311, 314, 315, 339, 355, 374, 416], "dict_kei": [239, 240, 241, 242, 247, 248, 251, 252, 254, 326, 333], "dict_param": 400, "dictat": [78, 111], "dictionari": [12, 117, 126, 138, 154, 155, 156, 157, 158, 159, 161, 163, 198, 209, 210, 237, 238, 239, 240, 241, 244, 247, 248, 251, 252, 254, 276, 293, 294, 295, 311, 314, 326, 333, 345, 355, 356, 381, 382, 383, 386, 400, 407], "dictionnari": 320, "diff": [248, 269, 362], "diffeomorph": [280, 341, 417], "differ": [9, 12, 16, 23, 41, 42, 43, 47, 55, 78, 86, 105, 106, 107, 149, 178, 186, 196, 236, 248, 260, 261, 269, 283, 298, 323, 326, 327, 329, 333, 334, 350, 357, 363, 364, 365, 372, 373, 382, 383, 386, 400, 407, 412, 413, 414, 417], "differenti": [34, 41, 97, 144, 145, 146, 156, 190, 198, 258, 259, 261, 262, 264, 270, 272, 273, 274, 275, 365, 407], "difficulti": 400, "diffpir": [87, 88, 123, 133, 142, 144, 180, 186, 189, 190, 195, 198, 302, 303, 308, 310, 344, 365, 367, 368, 394, 408], "diffract": [175, 190, 198, 239, 240, 241, 249, 251, 302, 310, 313, 342, 343, 344, 394], "diffraction_gener": [326, 333], "diffractionblur": 326, "diffractionblurgener": [208, 239, 241, 247, 252, 326, 401], "diffractionblurgenerator3d": 333, "diffunet": [363, 364, 365, 404, 411], "diffus": [77, 85, 87, 88, 97, 102, 123, 144, 153, 180, 186, 189, 190, 195, 198, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 274, 275, 302, 303, 308, 310, 318, 344, 363, 367, 368, 392, 394, 395, 404, 405], "diffusion_ffhq_10m": 365, "diffusion_step": 363, "diffusionsampl": [362, 408], "diffusionsd": [270, 274, 275, 364, 408], "digit": 336, "dih": 341, "dihedr": 341, "dilat": [284, 331], "dim": [68, 69, 70, 92, 103, 104, 105, 109, 178, 186, 190, 192, 193, 194, 213, 217, 246, 282, 286, 287, 327, 331, 335, 336, 337, 339, 341, 362, 365, 366, 399], "dim_hid": 79, "dim_input": 79, "dim_mid": 79, "dimens": [9, 17, 30, 31, 32, 35, 38, 44, 48, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 81, 84, 88, 90, 94, 99, 105, 108, 109, 112, 123, 124, 125, 127, 128, 129, 130, 131, 148, 149, 151, 163, 167, 168, 169, 170, 172, 173, 174, 178, 180, 184, 189, 192, 193, 194, 203, 205, 213, 217, 230, 232, 236, 237, 238, 243, 245, 246, 249, 250, 253, 280, 281, 286, 287, 288, 289, 290, 291, 312, 315, 318, 320, 328, 339, 346, 354, 357, 369, 381, 382, 397, 404, 412, 413, 414, 417], "dimension": [77, 97, 214, 245, 253, 399], "dimensionless": [64, 414], "dinv": [45, 47, 48, 49, 100, 117, 126, 133, 148, 260, 263, 295, 320, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 345, 346, 347, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 393, 399, 400, 404, 406, 407, 410, 412, 413, 414, 415], "dinv_dataset": 28, "dinv_dataset0": [323, 327, 328, 339, 354, 357, 375], "dinv_dataset_path": [328, 354, 357], "dir": [17, 354, 357, 412], "dirac": 320, "dirac_comb": [208, 326], "dirac_lik": 320, "direct": [78, 100, 155, 178, 202, 239, 241, 287, 333, 369, 403, 407], "directli": [14, 20, 70, 88, 105, 123, 148, 154, 184, 192, 194, 205, 293, 294, 295, 320, 326, 333, 334, 339, 384, 393, 397, 408, 414], "directori": [12, 13, 14, 15, 16, 18, 20, 21, 22, 23, 25, 26, 27, 276, 305, 306, 314, 390, 397, 412], "disabl": [48, 340, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386], "disast": 338, "discard": [81, 268, 272, 273, 384], "discord": [390, 391], "discourag": 414, "discrep": [117, 396, 406, 407], "discret": [177, 184, 192, 203, 205, 212, 230, 258, 259, 264, 270, 274, 275, 320, 351], "discrimin": [56, 57, 58, 59, 60, 61, 62, 63, 83, 91, 101, 278, 279, 323, 413], "discriminatorloss": [59, 62, 413], "disk": [13, 15, 16, 25, 27, 201, 202, 255, 330, 337], "dispers": 178, "displai": [12, 81, 175, 176, 183, 259, 270, 315, 318, 328, 330, 369, 370], "display_losses_ev": 12, "distanc": [3, 65, 116, 117, 119, 121, 123, 128, 131, 134, 136, 143, 144, 148, 152, 214, 223, 262, 356, 396, 407, 414, 417], "distancenam": [123, 134, 148, 156, 407], "distancename_i": 148, "distinct": [117, 154, 293, 294, 295, 332, 382, 383, 384, 385, 386, 407], "distort": [74, 338, 395, 402, 405, 413, 414, 417], "distribut": [45, 47, 77, 90, 97, 102, 125, 143, 147, 182, 185, 188, 189, 212, 238, 245, 246, 258, 259, 260, 263, 264, 265, 268, 270, 272, 273, 274, 275, 333, 351, 361, 362, 364, 366, 374, 376, 377, 395, 396, 399, 402, 408, 413], "distributeddataparallel": 415, "div": [118, 119, 363], "div2k": 412, "div2k_train_hr": 15, "div2k_valid_hr": 15, "diverg": [52, 53, 54, 118, 119, 121, 137, 143, 144, 407], "divers": [323, 412], "divid": [32, 143, 236], "divis": [88, 103, 116, 196], "dncnn": [47, 111, 295, 339, 355, 356, 358, 366, 369, 371, 381, 386, 404, 410, 411, 413], "dncnn_sigma2_lipschitz_color": 366, "dncnn_sigma2_lipschitz_grai": 355, "do": [20, 32, 44, 78, 111, 112, 117, 145, 166, 287, 323, 330, 339, 341, 354, 357, 358, 363, 364, 369, 403, 404, 405, 414, 416], "doc": [12, 47, 70, 75, 92, 184, 193, 280, 330, 341, 370, 371, 390, 400], "doctor": 389, "document": [52, 53, 54, 67, 156, 187, 206, 385, 389, 390, 396, 415], "doe": [20, 28, 34, 35, 38, 41, 47, 68, 69, 70, 74, 80, 89, 127, 160, 185, 190, 198, 246, 280, 292, 293, 295, 323, 345, 375, 381, 400], "doesn": [12, 147, 213, 328, 413], "doi": [89, 214, 223, 333], "domain": [48, 80, 203, 320, 351, 382, 383, 403, 404], "don": [13, 74, 213, 302, 312, 405], "done": [12, 48, 112, 196, 326, 334, 340, 346, 347, 362, 363, 365, 375, 377, 381, 382, 383, 384, 385, 386, 390, 400, 402, 412, 416], "dongdong": 392, "dose": 191, "dossal": 158, "dot": [41, 42, 113, 194, 202, 372], "doubl": [21, 190], "dougla": [154, 157, 293, 294, 295, 386, 407], "down": [77, 97, 100, 270, 287, 357], "download": [13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 77, 85, 88, 89, 90, 93, 97, 103, 104, 105, 125, 260, 263, 305, 306, 320, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 347, 350, 351, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 390, 393, 406, 411, 412], "download_and_extract_arch": 323, "download_arch": [14, 17, 339], "download_lipschitz": [89, 355, 366], "downsampl": [85, 93, 100, 110, 190, 196, 218, 219, 221, 242, 336, 338, 351, 357, 381, 386, 400, 401], "downsample_mod": [85, 93], "downsamplinggener": 401, "downscal": 370, "dp": [87, 88, 123, 133, 144, 180, 189, 190, 198, 262, 302, 303, 308, 310, 344, 367, 368, 394, 408], "dpi": [310, 312, 315, 338, 363], "dpir": [19, 28, 85, 87, 117, 123, 133, 141, 144, 145, 154, 176, 180, 186, 190, 195, 198, 276, 302, 305, 306, 344, 359, 360, 394, 406, 411], "dpsdatafidel": [364, 408], "dr": [154, 157, 293, 294, 295, 320, 347, 386, 407], "draw": 364, "drawback": 415, "drawn": 212, "drift": [258, 259, 264, 270, 364], "drive": [23, 351], "driven": [94, 390], "drop": 104, "drop_last": 351, "drop_path_r": [104, 105], "drop_rat": 105, "dropout": [77, 97, 105], "drunet": [93, 122, 260, 263, 334, 354, 362, 364, 381, 386, 404, 411, 415], "drunet_dataset": 330, "drunet_deepinv_gray_finetune_26k": 334, "dst": [177, 230], "dst1": 211, "dt": [258, 259, 264, 266, 267, 274, 275, 408], "dtype": [19, 28, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 117, 126, 177, 190, 193, 194, 204, 207, 212, 214, 217, 222, 223, 238, 239, 240, 241, 242, 244, 248, 251, 254, 258, 264, 270, 274, 275, 307, 308, 326, 333, 336, 339, 351, 363, 364, 365, 383], "du": [35, 38], "dual": [12, 39, 51, 87, 89, 98, 99, 103, 106, 107, 117, 123, 127, 129, 133, 138, 141, 144, 145, 154, 156, 164, 165, 180, 186, 190, 195, 198, 207, 214, 293, 295, 302, 303, 308, 310, 311, 344, 359, 360, 385, 387, 388, 394, 406, 407, 410], "dual_pixel_task": 103, "due": [177, 178, 214, 230, 356, 369], "dummi": 400, "dure": [12, 19, 20, 28, 41, 42, 45, 47, 48, 103, 110, 117, 189, 259, 270, 271, 326, 339, 363, 365, 370, 382, 384, 408, 413], "dwt": 112, "dx": [106, 107, 149, 346, 383, 407], "dynam": [14, 32, 44, 48, 108, 109, 184, 213, 236, 245, 246, 250, 320, 326, 336, 401, 412], "dynamic_model": [32, 44, 369], "dynamicmri": [14, 32, 44, 205, 339, 401], "e": [12, 13, 15, 16, 17, 18, 19, 20, 22, 25, 27, 28, 30, 32, 34, 35, 38, 40, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 60, 61, 62, 63, 65, 70, 73, 78, 81, 85, 88, 89, 90, 92, 93, 100, 106, 107, 109, 112, 113, 116, 117, 123, 125, 126, 127, 128, 129, 131, 133, 134, 147, 148, 151, 154, 166, 175, 176, 177, 178, 179, 181, 182, 184, 188, 189, 190, 192, 194, 196, 197, 200, 203, 205, 211, 212, 213, 214, 217, 225, 228, 236, 238, 246, 250, 251, 252, 255, 259, 260, 264, 268, 272, 273, 279, 281, 282, 283, 286, 287, 289, 292, 293, 294, 295, 296, 310, 315, 318, 320, 323, 328, 331, 333, 334, 335, 338, 341, 344, 345, 351, 355, 361, 362, 363, 364, 369, 370, 371, 372, 373, 376, 377, 402, 404, 405, 407, 408, 410, 412, 413, 414, 416, 417], "e2": [111, 339, 409], "each": [12, 16, 17, 20, 21, 23, 26, 28, 32, 33, 36, 37, 43, 44, 46, 49, 53, 54, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 86, 88, 92, 97, 98, 99, 101, 103, 104, 105, 112, 113, 117, 122, 125, 126, 138, 148, 154, 168, 188, 190, 198, 203, 209, 210, 224, 225, 226, 227, 228, 229, 232, 236, 238, 242, 247, 252, 257, 259, 276, 282, 284, 287, 293, 294, 295, 310, 312, 313, 320, 326, 332, 339, 350, 361, 363, 369, 372, 373, 376, 382, 383, 384, 385, 386, 400, 407, 412, 414, 416], "earli": [12, 86, 122, 167, 329, 357, 406], "early_stop": [12, 117, 126, 167, 320, 327, 334, 346, 347, 354, 355, 356, 357, 358], "easi": [339, 361, 392, 400, 412], "easili": [9, 28, 323, 339, 340, 341, 363, 365, 369, 371, 375, 385, 390, 393, 406, 412, 414, 416, 417], "edg": [178, 232], "edinburgh": 389, "edm": 364, "edongdongchen": 91, "edsr": 18, "edu": [17, 369], "ee": 22, "effect": [12, 16, 48, 90, 125, 140, 178, 189, 281, 284, 287, 290, 326, 363, 370, 375, 399, 417], "effic": 327, "effici": [45, 48, 103, 172, 178, 180, 190, 198, 207, 287, 361, 398, 399, 400, 411], "effort": 329, "eg": [185, 407], "egg": [344, 393], "ei": [34, 41, 91, 341, 370, 371, 417], "eigen": 252, "eigenvalu": [35, 38], "eigenvector": [163, 167], "eiloss": [41, 338, 339, 341, 370, 371, 413, 417], "either": [14, 17, 20, 26, 28, 30, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 88, 97, 103, 105, 109, 111, 112, 113, 114, 117, 122, 151, 154, 172, 179, 184, 192, 194, 205, 224, 225, 226, 227, 228, 229, 232, 233, 234, 237, 238, 246, 293, 294, 295, 296, 310, 312, 313, 315, 318, 339, 350, 404, 407, 410, 412, 413, 414, 415, 416], "elaps": [335, 361, 362, 366], "element": [20, 67, 79, 100, 112, 177, 186, 187, 196, 202, 204, 212, 242, 247, 282, 334, 345, 382, 386, 396, 399], "elementari": 397, "elementwis": [53, 54, 189, 376, 377], "ell": [47, 185, 345], "ell_": 130, "ell_0": [112, 113], "ell_1": [34, 40, 41, 42, 43, 51, 106, 112, 113, 129, 131, 132, 406, 407], "ell_2": [55, 122, 125, 127, 128, 129, 130, 133, 134, 190, 365, 385, 407], "ell_p": 67, "els": [12, 117, 127, 128, 194, 260, 263, 292, 293, 320, 323, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 339, 340, 345, 346, 347, 350, 351, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 416], "elu": [85, 93], "elucid": [77, 97], "em": 168, "email": 390, "embed": [77, 88, 97, 105], "embed_dim": 105, "embedding_typ": 97, "emiss": [239, 320, 333], "emission_wavelength": [240, 241], "emit": 333, "empti": [31, 189, 205, 237, 412], "en": [45, 75, 169, 170, 174, 181, 185, 240, 326, 333, 389], "enabl": [20, 103, 292, 293, 327, 330, 365, 399, 400], "enable_grad": 365, "encapsul": [278, 279], "encod": [85, 97, 103, 178, 203, 320], "encoder_typ": 97, "encompass": [293, 295], "encount": 110, "end": [12, 90, 101, 111, 117, 125, 127, 128, 151, 155, 156, 157, 158, 159, 160, 161, 162, 163, 167, 178, 190, 198, 202, 210, 218, 219, 220, 221, 257, 258, 259, 261, 262, 263, 269, 270, 292, 293, 320, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 347, 350, 351, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 400, 406, 407, 408, 410], "endmemb": [188, 338], "enforc": [40, 95, 117, 396, 406, 407], "enhanc": [91, 402], "enough": [395, 407], "ensur": [20, 168, 245, 326, 327, 328, 329, 333, 334, 336, 339, 340, 345, 346, 347, 354, 355, 356, 357, 358, 364, 366, 369, 371, 372, 373, 374, 376, 377, 381, 382, 383, 384, 385, 386, 411], "entir": [287, 404], "entri": [52, 53, 54, 115, 116, 168, 177, 189, 190, 198, 207, 209, 210, 257, 273, 361, 407], "entropi": [121, 137, 356], "enumer": 416, "envelop": [147, 160, 408], "environ": [300, 310], "environment": 338, "ep": [170, 174, 196, 363], "epfl": 389, "epll": [168, 180, 182, 186, 189, 190, 195, 198, 303, 308, 310, 344, 352, 353, 394, 404, 406], "epll_batch_s": 351, "epll_dataload": 351, "epll_max_it": 351, "epll_num_compon": 351, "epll_prior": 351, "eplldenois": [404, 411], "epoch": [12, 33, 36, 47, 50, 277, 279, 323, 338, 339, 340, 351, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 413, 416], "epoch_thresh": 50, "eprint": [121, 356], "eps_anderson_acc": [117, 126], "eps_anderson_acc_backward": 292, "epsilon": [47, 53, 88, 106, 116, 186, 188, 199, 215, 216, 320, 346, 347, 350, 361, 365, 401, 407], "epsilon_adjoint": 106, "epub": 89, "eq": [92, 117, 333, 351, 406, 407], "equal": [12, 32, 44, 57, 112, 147, 187, 189, 196, 207, 214, 217, 243, 245, 312, 341, 375], "equat": [97, 117, 151, 155, 156, 157, 158, 159, 160, 161, 162, 163, 167, 172, 173, 174, 218, 219, 220, 221, 258, 259, 261, 263, 264, 269, 270, 274, 275, 292, 320, 345, 346, 347, 351, 363, 365, 382, 385, 395, 406, 407, 410], "equilibrium": [12, 19, 28, 39, 51, 87, 89, 123, 133, 141, 144, 145, 176, 180, 186, 190, 195, 198, 292, 294, 302, 305, 306, 310, 344, 387, 388, 392, 394], "equispac": [243, 351], "equispacedmaskgener": [336, 339, 401], "equival": [20, 45, 68, 69, 77, 97, 195, 259, 363, 364, 365, 400], "equivari": [9, 12, 17, 19, 26, 27, 28, 34, 39, 40, 41, 87, 92, 95, 96, 102, 110, 117, 180, 186, 189, 190, 192, 193, 195, 198, 213, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 293, 300, 302, 303, 306, 308, 310, 338, 339, 342, 343, 344, 378, 379, 394, 413, 417], "equivariantdenois": [341, 404, 417], "erga": [338, 414], "ergas_std": 338, "error": [32, 34, 40, 41, 42, 43, 44, 48, 51, 64, 66, 67, 68, 69, 71, 72, 145, 214, 264, 270, 274, 275, 287, 340, 362, 363, 366, 377, 385, 402, 414], "escand": 235, "especi": 413, "esrgan": 91, "esrgandiscrimin": 402, "essenti": 188, "est": [117, 126, 138, 155, 156, 157, 158, 159, 161, 320, 332, 334, 355, 357, 358, 384, 385], "est_sigma": 377, "estim": [28, 47, 52, 53, 54, 70, 71, 76, 78, 88, 90, 102, 108, 111, 116, 125, 138, 142, 155, 156, 157, 158, 159, 161, 167, 168, 180, 187, 188, 190, 263, 268, 269, 273, 276, 323, 334, 338, 339, 350, 351, 355, 363, 365, 376, 377, 393, 402, 404, 406, 407, 408, 411], "estimt": 350, "et": [48, 59, 60, 61, 62, 63, 74, 80, 81, 83, 84, 86, 88, 91, 97, 100, 101, 106, 110, 111, 245, 246, 280, 281, 290, 320, 323, 327, 329, 338, 341, 346, 354, 357, 363, 364, 365, 369, 370, 411], "eta": [45, 103, 117, 173, 190, 198, 260, 261, 272, 273, 361, 365, 366], "eta_0": 361, "eta_backtrack": 117, "etab": [260, 362], "etc": [17, 28, 34, 57, 126, 276, 283, 298, 323, 335, 338, 361, 389, 392, 395, 397, 400, 407, 410, 417], "ethz": 22, "euclidean": [119, 154, 281, 294, 295, 341, 370, 417], "eugenesiow": 27, "euler": [266, 364, 408], "eulersolv": [364, 408], "eval": [12, 48, 323, 338, 339, 340, 354, 357, 358, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386], "eval_dataload": [12, 277, 323, 340, 370, 372, 373, 374, 376, 381, 382, 383, 384, 386], "eval_interv": 12, "eval_metr": 12, "eval_mod": [35, 38], "eval_n_sampl": [45, 48, 375], "eval_psnr": 279, "eval_split_input": [48, 375], "eval_split_output": [48, 375], "evalu": [3, 12, 23, 27, 28, 38, 44, 47, 48, 71, 73, 75, 100, 107, 109, 126, 139, 140, 168, 190, 198, 245, 253, 264, 266, 267, 270, 271, 274, 275, 276, 277, 279, 287, 323, 335, 338, 351, 362, 365, 375, 381, 382, 383, 395, 410, 414, 416], "even": [44, 103, 224, 250, 331, 356, 365], "evenli": 28, "eventu": 323, "everi": [12, 86, 279, 334, 365, 416, 417], "everywher": 363, "evid": 361, "evlauaton": 126, "exact": [12, 190, 214, 283, 287, 323, 330, 404, 417], "exactli": [32, 168, 236, 238], "exampl": [13, 15, 16, 18, 20, 21, 22, 25, 36, 37, 38, 46, 47, 50, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 90, 108, 109, 126, 130, 148, 215, 217, 244, 254, 286, 320, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 345, 346, 347, 349, 350, 351, 353, 354, 355, 356, 357, 358, 360, 361, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 388, 390, 392, 393, 394, 398, 400, 402, 406, 407, 408, 410, 411, 412, 413, 414, 416, 417], "except": [68, 69, 70, 232, 264, 270, 274, 275, 404], "excit": [239, 333], "exclus": [236, 250], "execut": [322, 325, 343, 349, 353, 360, 368, 379, 380, 388, 394], "exist": [13, 15, 18, 19, 22, 23, 25, 27, 28, 32, 44, 70, 177, 184, 189, 190, 197, 198, 204, 207, 302, 339, 369, 375, 376, 395, 398, 400, 404, 405, 410, 414, 417], "exp": [45, 135, 136, 187, 191, 220, 248, 334, 337, 401, 407, 408], "expand": [287, 326, 333], "expans": [35, 235, 366, 411, 413], "expect": [12, 15, 22, 30, 31, 90, 103, 125, 168, 180, 182, 186, 189, 190, 195, 198, 245, 277, 303, 308, 310, 344, 351, 352, 353, 369, 394], "expens": 177, "experi": [86, 320, 329, 338, 339, 370, 393, 397], "explain": [315, 329, 392, 408], "explan": 414, "explicit": [19, 28, 117, 123, 133, 144, 145, 154, 176, 180, 186, 190, 195, 198, 220, 272, 276, 302, 305, 336, 342, 343, 344, 357, 383, 394, 400, 406, 407], "explicit_prior": [145, 327, 357], "explicitli": [351, 364], "explod": [274, 364, 408], "exploit": [334, 335, 361, 373, 374, 376], "explor": [326, 333], "expon": 74, "exponenti": 45, "exponential_famili": 45, "export": 351, "exposit": 20, "express": [180, 333], "ext": 412, "extend": [41, 45, 178, 320, 323, 345, 350, 369, 384, 415], "extens": [17, 28, 305, 306, 315, 318], "extern": 412, "extra": [45, 190, 287, 369, 400], "extract": [14, 20, 90, 100, 125, 312, 323, 334, 337, 338, 339, 350, 351, 370, 397, 399], "extract_loc": [312, 320], "extract_s": [312, 320], "ey": [35, 192], "f": [35, 38, 53, 95, 106, 115, 116, 117, 118, 126, 129, 131, 133, 134, 138, 144, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 171, 180, 184, 190, 192, 194, 202, 203, 205, 211, 212, 213, 221, 258, 259, 263, 264, 266, 267, 268, 270, 287, 293, 294, 295, 296, 320, 326, 329, 331, 333, 334, 335, 337, 339, 341, 346, 347, 351, 355, 356, 358, 361, 362, 363, 364, 366, 374, 377, 406, 407, 408, 410, 412, 414, 416, 417], "f_": [287, 329, 340, 341, 417], "f_0": 117, "f_1": 148, "f_2": 148, "f_fn": [117, 138, 154, 294, 295, 355], "f_k": 126, "f_matern": 248, "f_step": [354, 355, 357, 358, 384], "f_x": 248, "f_y": 248, "face": [330, 365], "facebookresearch": [111, 243], "factor": [45, 64, 82, 100, 105, 127, 133, 179, 183, 186, 190, 196, 218, 219, 221, 237, 242, 265, 274, 275, 281, 284, 288, 291, 320, 336, 338, 350, 357, 369, 382, 383, 386, 400], "factory_kwarg": [239, 241], "fail": 110, "faint": 320, "faintest": 320, "fake": [56, 57, 58, 101], "fake_label": 57, "fall": 119, "fals": [12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 26, 27, 28, 32, 34, 35, 38, 41, 44, 47, 48, 52, 53, 57, 66, 67, 68, 69, 70, 71, 75, 76, 78, 81, 86, 88, 92, 101, 103, 104, 105, 106, 107, 110, 117, 126, 138, 139, 140, 143, 151, 154, 155, 156, 157, 164, 165, 166, 167, 168, 169, 170, 173, 174, 177, 178, 179, 184, 190, 192, 193, 194, 196, 199, 200, 203, 204, 205, 207, 212, 214, 222, 223, 224, 227, 232, 238, 258, 259, 260, 261, 263, 265, 268, 270, 272, 273, 276, 278, 279, 283, 287, 292, 293, 294, 295, 307, 308, 310, 312, 313, 315, 320, 323, 326, 327, 328, 332, 336, 337, 338, 339, 340, 345, 347, 350, 351, 354, 355, 357, 358, 363, 365, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 407, 412, 416], "famili": [45, 326, 401, 405], "familiar": 390, "fan": [214, 223], "fan_beam": [214, 223], "fan_paramet": [214, 223], "fashion": [177, 189, 197, 204, 207, 238, 246, 298, 385, 410], "fast": [79, 107, 158, 169, 176, 177, 184, 189, 192, 205, 207, 280, 285, 336, 382, 383, 390, 399, 407], "fasten": [327, 328, 340, 354, 355, 357, 358, 373, 374, 376, 377, 381, 382, 383, 385, 386], "faster": [17, 214, 222, 223, 320, 326, 346, 347, 371, 390, 399], "fastmri": [17, 26, 73, 75, 111, 192, 193, 194, 243, 369, 371, 412], "fastmri_brain_singlecoil": 17, "fastmri_knee_singlecoil": 17, "fastmrislicedataset": [14, 26, 192, 193, 194, 339, 369, 371, 412], "fbp": 351, "fbpconvnet": 78, "fc": [240, 241, 252, 326, 333], "fdfd": 212, "featur": [79, 98, 99, 100, 392, 399], "feb": 389, "feed": 81, "feedforward": 103, "fenchel": [156, 355], "fetch": [327, 328, 346, 347, 354, 355, 358], "few": [190, 330, 340, 351, 369, 385], "ffhq": [88, 97, 364, 365, 411], "ffhq64": [97, 364], "ffn_expansion_factor": 103, "fft": [175, 176, 193, 203, 212, 225, 226, 228, 229, 320, 326, 333, 399], "fftn": 193, "fid1": 148, "fid2": 148, "fidel": [28, 90, 115, 117, 122, 123, 125, 126, 127, 129, 133, 134, 138, 148, 153, 154, 156, 164, 261, 262, 263, 269, 270, 293, 294, 295, 320, 327, 332, 334, 337, 346, 347, 354, 355, 356, 357, 358, 364, 381, 382, 383, 385, 386, 395, 396, 400, 406, 410], "field": [16, 17, 21, 106, 107, 252, 256, 280], "fifa": [329, 361, 362, 366], "fig": 310, "figsiz": [310, 312, 313, 315, 318, 333, 337, 345, 363, 364], "figur": [103, 310, 312, 313, 315, 318, 331, 363], "file": [12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 25, 27, 28, 47, 90, 103, 125, 139, 177, 189, 197, 204, 207, 305, 306, 307, 308, 315, 318, 322, 325, 330, 343, 349, 353, 360, 368, 379, 380, 388, 390, 394, 397, 412], "file1000005": 17, "file_nam": [26, 301, 303, 332, 338, 339, 369, 371, 372, 373, 374, 375, 376], "file_typ": 305, "filenam": [12, 16, 21, 28, 301, 303, 312, 315, 318], "fill": [259, 299, 309, 316, 317, 319, 339, 369], "filter": [78, 80, 95, 97, 175, 176, 183, 190, 196, 206, 208, 214, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 239, 240, 241, 242, 247, 248, 251, 252, 326, 327, 329, 333, 336, 341, 346, 351, 354, 356, 357, 361, 381, 384, 386, 399, 400, 404, 406], "filter_0": [326, 333], "filter_90": 326, "filter_nam": 242, "filter_rgb": 326, "filter_str": 242, "filter_torch": 327, "final": [77, 85, 88, 89, 93, 97, 104, 105, 271, 326, 333, 334, 339, 351, 403, 414], "final_est": 337, "find": [81, 88, 163, 167, 198, 206, 263, 292, 323, 384, 397], "find_nearest": [88, 263, 363], "find_spec": 332, "fine": [323, 351, 369], "finish": [138, 164, 165, 357, 361, 362, 366], "finit": [106, 107, 149, 383, 407], "firm": [35, 411], "firmli": [35, 366, 413], "first": [12, 17, 20, 38, 45, 46, 55, 88, 90, 103, 117, 124, 125, 138, 168, 184, 186, 192, 196, 205, 206, 207, 211, 212, 213, 217, 266, 270, 276, 287, 310, 313, 320, 323, 326, 331, 333, 334, 336, 338, 339, 341, 345, 346, 347, 363, 364, 365, 369, 383, 384, 400, 403, 407, 408], "firstli": 363, "fista": [158, 320, 407], "fit": [81, 168, 351, 416], "fix": [20, 117, 126, 138, 184, 190, 192, 198, 205, 237, 243, 245, 253, 259, 281, 287, 292, 293, 330, 332, 354, 381, 382, 383, 385, 386, 407, 408, 410], "fixed_point": [354, 357, 358], "fixedpoint": [117, 138, 292, 354, 357, 358, 407, 410], "flat": [179, 184, 192, 194, 196, 205, 238, 338, 339], "flatten": [108, 112, 113, 139, 151, 178, 184, 205, 213, 287, 298, 345, 362, 366, 369, 404, 407], "flatten_c": 213, "flatten_coeff": 112, "flatten_video_input": 287, "flavour": [57, 413], "fledg": 362, "flexibl": [310, 404, 416], "flickr": 412, "flickr2k": 18, "flickr2khr": 412, "flip": [92, 177, 282], "float": [12, 17, 19, 26, 34, 35, 38, 41, 42, 43, 45, 47, 48, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 73, 74, 75, 77, 80, 81, 82, 85, 86, 87, 89, 90, 93, 94, 97, 100, 103, 104, 105, 106, 107, 110, 112, 113, 116, 117, 118, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 141, 142, 143, 144, 147, 149, 150, 151, 154, 158, 166, 167, 168, 169, 170, 171, 172, 173, 174, 177, 178, 180, 184, 185, 186, 187, 189, 190, 191, 194, 196, 198, 199, 200, 203, 205, 206, 211, 212, 214, 215, 216, 217, 220, 221, 222, 223, 231, 232, 237, 238, 239, 240, 241, 244, 246, 247, 248, 254, 258, 259, 260, 261, 262, 263, 264, 265, 268, 270, 272, 273, 274, 275, 281, 283, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 312, 320, 336, 383, 407], "float16": 88, "float32": [88, 207, 238, 239, 240, 241, 242, 244, 248, 251, 254, 258, 264, 270, 274, 275, 307, 308, 326, 333, 351, 363, 364, 365], "float64": [117, 126, 264, 270, 274, 275, 323, 327, 338, 340, 354, 357, 364, 369, 371, 372, 373, 374, 375, 376, 377, 384, 385], "flow": [139, 351, 407], "fluoresc": [16, 239, 333, 412], "fly": [73, 75, 178, 184, 189, 192, 194, 205, 237, 326, 339, 384], "fmd": 412, "fmt": 296, "fn": [116, 119, 120, 121, 123, 124, 128, 130, 132, 134, 137, 139, 143, 144, 148, 149, 150, 151, 153, 327], "fname": [16, 17], "fne": 35, "fne_model": 35, "fnejacobianspectralnorm": [366, 413], "focu": 333, "folder": [12, 13, 14, 15, 16, 18, 19, 23, 25, 27, 28, 300, 354, 357, 381, 382, 383, 412], "foldernam": [16, 21], "follow": [9, 12, 13, 15, 18, 22, 23, 25, 27, 39, 52, 53, 54, 57, 61, 64, 76, 112, 117, 151, 179, 185, 221, 235, 240, 261, 263, 264, 266, 270, 273, 274, 275, 293, 320, 323, 326, 327, 332, 333, 338, 345, 346, 347, 351, 354, 355, 358, 361, 363, 364, 365, 366, 382, 384, 385, 390, 393, 396, 400, 402, 404, 406, 407, 408, 410, 411, 417], "font": 363, "fontsiz": [310, 313, 345], "forc": [94, 393], "forget": 145, "fork": [280, 390], "form": [112, 113, 117, 126, 127, 129, 135, 136, 138, 176, 178, 190, 198, 237, 258, 259, 264, 293, 335, 340, 345, 362, 370, 383, 390, 398, 400, 406, 407, 410], "formal": [45, 345], "format": [12, 14, 28, 112, 296, 320, 330, 345, 350, 351, 412], "former": [365, 415], "formul": 417, "formula": [47, 56, 58, 144, 147, 183, 190, 198, 270, 364, 365, 366, 408], "forw": [34, 40, 41, 42, 48, 61, 123, 127, 129, 133, 148, 197, 198, 201, 262, 269, 270, 323, 364, 395, 396, 400, 402, 406], "forw_model": 120, "forward": [6, 12, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 70, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 123, 124, 125, 126, 127, 129, 138, 139, 144, 155, 156, 157, 158, 159, 161, 163, 167, 168, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 214, 215, 216, 217, 220, 222, 223, 235, 237, 243, 245, 251, 253, 257, 258, 260, 261, 262, 263, 264, 268, 269, 270, 273, 274, 275, 276, 277, 279, 287, 292, 293, 295, 302, 303, 308, 310, 323, 326, 327, 328, 338, 339, 342, 343, 344, 356, 357, 364, 365, 371, 375, 382, 383, 384, 392, 394, 395, 398, 400, 401, 402, 404, 407, 408, 410, 412, 413, 415, 417], "forward_denois": 88, "forward_diffus": [88, 264], "forward_drift": 264, "forward_restorm": 103, "forward_unet": [77, 97], "found": [113, 336, 362, 369, 400], "four": 334, "fourier": [97, 184, 192, 194, 202, 203, 205, 212, 320, 327, 336, 339, 399], "fov": [16, 256, 337], "fr": [121, 356], "frac": [35, 38, 45, 47, 48, 52, 53, 54, 73, 92, 106, 107, 116, 117, 119, 123, 127, 129, 130, 131, 133, 134, 144, 147, 148, 150, 166, 167, 172, 177, 180, 190, 191, 198, 199, 200, 204, 214, 220, 248, 261, 262, 263, 264, 267, 270, 272, 273, 274, 275, 292, 320, 327, 345, 346, 347, 361, 363, 364, 365, 366, 375, 376, 377, 382, 383, 401, 406, 408, 410, 414], "fraction": [188, 237, 285, 312], "frame": [20, 44, 108, 205, 213, 315, 318, 339, 369, 412], "framework": [118, 279, 281, 288, 289, 290, 291, 334, 338, 364, 370, 392, 408, 413], "franc": 389, "fraunhoff": [240, 241], "free": [32, 44, 77, 97, 103, 110, 236, 250, 302, 370, 375], "freeli": 365, "freia": 139, "freifeld": 280, "french": 389, "freq": [237, 243], "freq_plot": 12, "frequenc": [12, 100, 237, 240, 241, 243, 245, 253, 320, 326, 333, 355], "fresnel": [240, 241, 326, 333], "frobeniu": 106, "from": [1, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 123, 125, 126, 130, 138, 139, 145, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 202, 204, 205, 207, 208, 212, 213, 214, 215, 216, 217, 222, 223, 232, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 258, 259, 260, 261, 263, 264, 270, 273, 274, 275, 279, 280, 281, 282, 283, 287, 288, 289, 290, 291, 292, 300, 301, 302, 303, 305, 306, 307, 308, 310, 312, 313, 315, 318, 320, 322, 323, 325, 326, 327, 328, 331, 332, 333, 338, 339, 340, 341, 343, 344, 345, 346, 347, 349, 350, 351, 353, 354, 355, 356, 357, 358, 360, 363, 364, 365, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 392, 393, 394, 395, 397, 398, 399, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417], "from_numpi": [320, 333, 339, 345, 363, 365], "from_torch_complex": 193, "front": [127, 144], "fstep": [384, 407], "fstepcv": 355, "fstephq": 354, "fsteppdnet": 384, "fsteppgd": [357, 358], "full": [14, 18, 26, 32, 34, 41, 42, 44, 47, 48, 88, 192, 194, 258, 259, 270, 281, 288, 289, 291, 320, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 345, 346, 347, 350, 351, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 404, 412, 416], "full_trajectori": 271, "fulli": [26, 48, 79, 94, 110, 111, 339, 362, 363, 371, 372, 373, 374, 376, 377, 404, 412], "fullsampl": 14, "funcanim": 315, "function": [2, 3, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 33, 34, 35, 38, 39, 41, 42, 43, 45, 48, 49, 51, 56, 57, 58, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 81, 86, 87, 88, 89, 92, 94, 96, 100, 102, 107, 110, 111, 116, 117, 118, 123, 124, 125, 126, 127, 128, 130, 133, 134, 138, 139, 140, 142, 143, 144, 145, 147, 148, 151, 153, 154, 155, 156, 157, 163, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 179, 180, 184, 190, 192, 193, 194, 195, 196, 198, 201, 202, 206, 211, 213, 214, 217, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 239, 240, 241, 243, 245, 248, 249, 251, 253, 258, 259, 264, 265, 268, 270, 271, 272, 273, 276, 277, 279, 280, 287, 292, 293, 294, 295, 300, 302, 303, 310, 313, 315, 318, 320, 323, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 346, 347, 351, 354, 355, 357, 363, 364, 365, 370, 372, 377, 381, 382, 383, 384, 385, 386, 394, 395, 396, 402, 404, 405, 407, 408, 410, 413, 414, 417], "functool": 70, "further": [280, 282, 283, 285, 286, 323, 334, 393, 413, 417], "furthermor": [80, 375], "fusion": 74, "futur": [45, 78, 177, 277, 390], "fx": [211, 212], "fx_t": 184, "g": [12, 13, 15, 16, 17, 18, 19, 20, 22, 25, 27, 28, 32, 34, 40, 41, 42, 43, 44, 46, 48, 51, 57, 70, 73, 78, 81, 90, 92, 100, 106, 107, 109, 117, 125, 126, 130, 132, 138, 140, 145, 146, 149, 150, 151, 154, 156, 161, 163, 164, 165, 175, 176, 178, 179, 181, 182, 184, 185, 188, 189, 190, 192, 194, 200, 203, 205, 212, 213, 214, 217, 220, 238, 246, 251, 252, 255, 258, 259, 261, 264, 265, 266, 267, 270, 274, 278, 279, 282, 287, 293, 294, 295, 315, 318, 320, 323, 328, 331, 333, 339, 341, 344, 345, 346, 347, 351, 355, 357, 361, 364, 365, 369, 372, 382, 383, 402, 404, 405, 406, 407, 408, 410, 412, 413, 414, 416, 417], "g1": 247, "g2": 247, "g_": [86, 345, 382, 406, 407], "g_first": [138, 154, 155, 156, 157, 164, 165, 293, 294, 295, 327, 332, 357, 383, 385, 407], "g_i": [42, 287, 372], "g_param": [126, 154, 293, 295, 332, 334, 354, 355, 356, 357, 358, 361, 381, 383, 385, 386, 393, 406, 407, 410], "g_statist": [265, 268, 272, 273], "g_step": [354, 355, 357, 358, 384], "gain": [53, 54, 142, 143, 199, 200, 244, 336, 356, 374, 376], "gain_max": 244, "gain_min": 244, "galleri": [310, 313, 320, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 347, 350, 351, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 394], "game": [323, 402, 413], "gamma": [43, 45, 47, 52, 53, 54, 107, 112, 117, 118, 123, 127, 128, 129, 130, 131, 132, 133, 134, 141, 143, 144, 148, 149, 150, 151, 155, 157, 158, 159, 160, 161, 162, 163, 172, 180, 183, 185, 190, 199, 200, 244, 293, 323, 346, 347, 355, 363, 373, 374, 376, 382, 383, 401, 406, 407, 413], "gamma_": 244, "gamma_backtrack": 117, "gamma_distribut": 185, "gammanois": [45, 47, 374], "gan": [56, 57, 58, 59, 60, 77, 395, 413], "gaofen": [23, 338], "gaussian": [16, 45, 47, 49, 52, 53, 87, 90, 125, 133, 147, 148, 168, 177, 182, 183, 186, 190, 196, 199, 204, 206, 215, 220, 242, 245, 246, 248, 254, 263, 266, 267, 273, 274, 275, 317, 320, 327, 328, 329, 331, 334, 336, 338, 341, 345, 346, 347, 350, 351, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 369, 374, 376, 377, 381, 382, 383, 386, 396, 400, 402, 408, 413], "gaussian_blur": [175, 176, 326, 327, 336, 356, 400, 401], "gaussian_nois": 186, "gaussian_noise_1": 186, "gaussian_noise_2": 186, "gaussianmaskgener": [336, 339, 369, 401], "gaussianmixturemodel": [90, 125], "gaussiannois": [45, 47, 49, 148, 182, 196, 260, 263, 327, 328, 329, 335, 336, 341, 345, 346, 347, 350, 354, 355, 357, 358, 361, 362, 363, 366, 374, 375, 377, 381, 384, 386, 393, 400, 401, 406, 412], "gaussiansplittingmaskgener": [375, 401], "gb": 88, "gd": [154, 159, 161, 292, 293, 294, 295, 334, 381, 407], "gdfn": 103, "gditer": 334, "gen": [189, 238, 246], "geneal": 45, "gener": [3, 12, 14, 17, 19, 26, 28, 32, 33, 34, 36, 39, 41, 42, 44, 45, 46, 47, 48, 52, 53, 54, 57, 58, 59, 60, 61, 62, 63, 74, 77, 78, 81, 83, 84, 86, 87, 90, 91, 97, 102, 106, 110, 125, 127, 129, 138, 139, 156, 177, 178, 180, 182, 184, 185, 186, 189, 190, 191, 192, 194, 195, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 211, 215, 216, 217, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259, 260, 261, 263, 266, 267, 268, 270, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 300, 302, 320, 330, 332, 336, 338, 339, 341, 344, 345, 350, 351, 355, 356, 357, 358, 364, 365, 369, 370, 375, 378, 379, 384, 390, 394, 395, 398, 402, 403, 404, 405, 406, 407, 408, 410, 411, 413, 414, 416, 417], "generalis": 106, "generate_coeff": 240, "generate_dataset": [12, 14, 19, 323, 327, 328, 339, 340, 354, 357, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 385, 386, 412, 416], "generate_shift": [201, 202, 337, 401], "generated_dataset_path": 412, "generated_datasets_path": [381, 382, 383, 386], "generator2d": [239, 241], "generator_col": 333, "generator_il": 239, "generatorloss": [60, 61, 63, 413], "generatormixtur": [251, 326, 400], "geometr": [9, 92, 188, 281, 288, 289, 291, 370, 417], "geometri": [214, 223, 370], "geq": [45, 48, 52, 88, 142, 173, 268, 272, 273, 320], "get": [12, 14, 20, 88, 117, 168, 261, 263, 287, 301, 302, 303, 304, 305, 323, 331, 363, 365, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 386, 390, 397], "get_alpha": 363, "get_alpha_beta": 263, "get_alpha_prod": [88, 263], "get_beta": 365, "get_chain": 268, "get_cov": 168, "get_cov_inv_reg": 168, "get_data_hom": [14, 17, 26, 323, 338, 339, 369, 370, 371, 372, 373, 374, 375, 376, 377, 382, 383, 397, 412], "get_degradation_url": [320, 397], "get_dpir_param": 354, "get_freer_gpu": [260, 263, 323, 327, 328, 329, 331, 332, 333, 334, 336, 337, 339, 340, 345, 346, 347, 354, 355, 356, 357, 358, 361, 362, 363, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 397], "get_gspnp_param": 357, "get_image_url": [14, 17, 66, 71, 305, 320, 326, 334, 336, 337, 339, 341, 350, 355, 356, 358, 363, 364, 365, 370, 397], "get_item": 20, "get_kernel": 242, "get_model": 323, "get_noise_schedul": [263, 363], "get_output": [117, 357, 384], "get_overlap_img": [202, 337], "get_param": 287, "get_pdf": [245, 253], "get_sampl": 12, "get_samples_offlin": [12, 416], "get_samples_onlin": [12, 339, 416], "get_structur": 212, "get_timestamp": 397, "get_trajectori": [258, 259, 270, 364], "get_weight": 168, "get_weights_url": [323, 332, 338, 339, 369, 370, 371, 372, 373, 374, 375, 376], "gfp": 333, "gfz": [203, 320], "gif": [315, 318, 364], "gif_frequ": 364, "git": [344, 393], "github": [106, 107, 344, 384, 390, 392, 393, 411], "give": [20, 21, 25, 27, 239, 241, 281, 362, 364, 408], "given": [12, 35, 38, 48, 117, 126, 140, 147, 156, 157, 158, 159, 160, 161, 162, 163, 167, 184, 185, 189, 190, 205, 206, 214, 223, 237, 238, 239, 240, 241, 242, 246, 247, 249, 258, 259, 264, 270, 287, 323, 327, 333, 334, 337, 338, 345, 350, 351, 363, 364, 395, 405, 408], "global": [64, 166, 280, 326, 327, 328, 329, 333, 334, 336, 337, 340, 345, 346, 347, 354, 355, 356, 357, 358, 366, 371, 372, 373, 374, 376, 377, 381, 382, 383, 384, 385, 386, 414], "gmm": [90, 125, 168, 350, 351], "gmm_bsds_color2": 350, "gmm_lodopab_smal": [90, 125], "gmm_lodopab_small2": 351, "go": [17, 320, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 345, 346, 347, 350, 351, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386], "goal": [346, 347], "good": [103, 214, 329, 334, 340, 385, 402, 405], "goodfellowliu": 18, "googl": [344, 351], "gopro": 20, "gp": [174, 248], "gpu": [28, 77, 78, 85, 89, 93, 97, 103, 104, 108, 109, 112, 113, 168, 181, 184, 188, 189, 192, 194, 201, 202, 205, 206, 214, 222, 223, 255, 260, 276, 280, 302, 307, 308, 327, 328, 337, 340, 354, 355, 357, 358, 371, 372, 373, 374, 376, 377, 381, 382, 383, 385, 386, 397], "gpu_numb": 415, "gr2r": [45, 374], "grad": [94, 111, 116, 118, 119, 121, 123, 131, 133, 134, 137, 143, 144, 145, 146, 147, 148, 150, 153, 262, 269, 320, 337, 361, 365, 407], "grad_clip": 12, "grad_conj": [119, 121, 137, 144], "grad_d": [123, 148, 153], "grad_f": 171, "grad_ll": 365, "gradient": [12, 34, 41, 43, 52, 53, 81, 93, 94, 106, 107, 116, 118, 119, 121, 123, 124, 126, 131, 133, 134, 137, 143, 144, 145, 146, 148, 150, 154, 159, 162, 169, 170, 171, 172, 183, 190, 196, 198, 261, 269, 278, 279, 292, 293, 294, 295, 327, 346, 347, 351, 355, 357, 358, 365, 366, 373, 377, 384, 386, 406, 407, 410, 411, 416], "gradient_desc": [198, 407], "gradientstep": [357, 411], "grai": [90, 125, 260, 263, 310, 312, 313, 327, 328, 334, 336, 340, 346, 347, 354, 355, 356, 357, 358, 381, 384, 385, 386], "grayscal": [179, 196, 307, 308, 326, 333, 334, 335, 336, 337, 350, 355, 358, 393, 400, 404, 406, 411], "great": 323, "greater": [48, 158, 241], "green": 181, "grid": [203, 206, 252, 284, 310, 313, 320, 350, 351], "grid_siz": 320, "ground": [12, 14, 16, 17, 19, 20, 32, 33, 44, 51, 59, 60, 72, 117, 126, 236, 250, 276, 279, 292, 293, 323, 329, 338, 339, 340, 346, 347, 350, 351, 355, 356, 358, 361, 362, 363, 365, 366, 369, 370, 375, 381, 382, 383, 385, 386, 402, 405, 413, 416], "groundtruth": [345, 365, 369], "group": [12, 34, 41, 92, 282, 287, 341, 370, 371, 404, 417], "grow": 345, "gsdrunet": [357, 404, 411], "gsdrunet_grayscale_torch": 411, "gsdrunet_torch": 357, "gspnp": 357, "gstep": [384, 407], "gstepcv": 355, "gstephq": 354, "gsteppdnet": 384, "gsteppgd": [357, 358], "gt": [16, 320, 338, 346, 347, 355, 356, 358, 382, 383], "gu": [122, 333, 354], "guess": [81, 167, 169, 170, 173, 174, 198, 263, 320, 334, 377, 407], "guid": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 48, 77, 338, 364, 393, 400], "guidanc": [77, 97], "gz": [22, 27], "h": [14, 17, 30, 31, 32, 44, 45, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 86, 88, 94, 100, 103, 105, 108, 109, 118, 119, 121, 126, 140, 144, 161, 169, 175, 176, 177, 178, 179, 181, 183, 184, 188, 189, 192, 193, 194, 196, 203, 204, 205, 206, 207, 208, 211, 212, 213, 217, 224, 225, 226, 227, 228, 229, 235, 236, 237, 238, 240, 243, 245, 246, 250, 252, 253, 258, 270, 271, 287, 310, 313, 315, 318, 320, 331, 333, 336, 339, 345, 351, 364, 369, 383, 404, 407, 414, 417], "h5": [17, 323, 327, 328, 339, 340, 354, 357, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 385, 386, 412], "h5py": [19, 28, 412], "h_": [144, 333], "h_k": [208, 235], "ha": [13, 15, 16, 18, 22, 25, 27, 38, 43, 48, 77, 85, 88, 97, 112, 117, 126, 144, 170, 175, 176, 177, 178, 183, 184, 189, 192, 193, 196, 205, 207, 208, 214, 218, 219, 224, 226, 227, 228, 229, 235, 238, 242, 260, 261, 310, 312, 313, 320, 323, 327, 328, 329, 331, 335, 338, 339, 340, 354, 356, 357, 362, 363, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 400, 402, 416], "haar": 345, "hackathon": 389, "hadamard": [207, 208, 235, 336, 355], "hal": 156, "half": [90, 122, 125, 154, 160, 232, 263, 293, 294, 295, 350, 351, 354, 369, 371, 381, 407], "hammernik": 111, "hand": [404, 405], "handl": [87, 88, 203, 246, 260, 261, 287], "hard": [112, 113], "hard_threshold_topk": 112, "has_cost": [117, 138, 355], "hash": 251, "hat": [34, 41, 42, 45, 48, 55, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 166, 323, 365, 372, 395, 402, 405, 414], "hauptmann": 384, "have": [12, 13, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 35, 38, 48, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 81, 88, 92, 103, 124, 180, 184, 190, 192, 193, 194, 196, 198, 203, 205, 206, 207, 217, 230, 260, 269, 278, 279, 293, 315, 318, 320, 327, 329, 330, 331, 334, 338, 339, 344, 350, 358, 362, 363, 364, 365, 369, 370, 371, 372, 375, 391, 400, 404, 405, 408, 411, 413, 414, 416, 417], "haze": 401, "hazi": 187, "hd5": 28, "hd5dataset": 28, "hdf5": [19, 354, 357, 381, 382, 383, 412], "hdf5dataset": [28, 323, 327, 328, 339, 340, 354, 357, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 385, 386, 412], "head": [77, 97, 103, 105], "head_dim": 105, "height": [24, 29, 88, 98, 99, 125, 178, 184, 192, 193, 202, 205, 214, 239, 241, 285, 310, 313, 345], "help": [320, 337, 366, 390], "helper": [100, 154, 180, 190, 193, 224, 225, 226, 227, 228, 229, 294, 295, 381, 386], "henc": 282, "hendriksen": 48, "here": [14, 21, 74, 113, 119, 191, 197, 320, 323, 326, 327, 328, 329, 330, 332, 333, 335, 336, 338, 339, 344, 350, 351, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 371, 372, 374, 375, 381, 382, 385, 386, 407, 412, 416], "hereaft": 365, "hermit": 174, "hessian": 106, "heun": [267, 408], "heunsolv": 408, "hf": 13, "hf_dataset": 330, "hf_train_dataset": 330, "hfdataset": 330, "hh": 224, "hidden": [83, 84, 88, 94, 101, 105, 139, 351, 411], "high": [25, 27, 74, 100, 103, 178, 188, 196, 237, 243, 245, 253, 320, 323, 336, 338, 411, 412], "higher": [70, 185, 239, 240, 241, 320, 334, 414], "highest": 320, "highli": [175, 382, 383], "highpass_kernel_s": 100, "histogram": [206, 232, 399], "histogramdd": [231, 399], "histori": [12, 117, 126, 292], "history_s": [117, 126, 381], "history_size_backward": [292, 381], "ho": [88, 363, 411], "hold": 117, "home": [300, 320, 323, 331, 332, 334, 336, 338, 339, 350, 351, 354, 355, 357, 363, 364, 365, 366, 369, 370, 371, 372, 373, 375, 376, 384], "homographi": [288, 289, 290, 291, 370, 417], "hood": [88, 333, 341], "horizont": [15, 55, 92, 312, 369], "host": [22, 411], "hostedtoolcach": [341, 369], "how": [12, 14, 48, 81, 83, 84, 91, 101, 117, 122, 126, 208, 209, 277, 315, 318, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 339, 340, 345, 346, 347, 350, 354, 355, 356, 358, 361, 362, 363, 364, 365, 366, 369, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 386, 395, 400, 402, 416], "howev": [32, 34, 40, 41, 42, 43, 44, 48, 51, 86, 196, 287, 329, 345, 369, 384, 398, 404, 414, 415], "hp": 126, "hq": [122, 154, 160, 263, 292, 293, 294, 295, 354, 381, 393, 407], "hqsiter": 354, "hr": [18, 22, 100], "hr_shape": 100, "hrm": [74, 100, 338], "hrms_shape": [100, 338], "hspace": 126, "html": [75, 83, 84, 106, 107, 194, 310, 313, 315, 318, 390], "http": [12, 13, 17, 18, 21, 22, 27, 34, 35, 38, 41, 42, 45, 47, 52, 53, 54, 67, 75, 78, 83, 84, 89, 92, 98, 99, 106, 107, 121, 156, 169, 170, 174, 177, 181, 183, 185, 187, 194, 206, 214, 223, 240, 248, 260, 261, 263, 272, 273, 281, 290, 310, 313, 315, 323, 326, 329, 330, 332, 333, 334, 338, 339, 344, 345, 350, 351, 355, 356, 357, 361, 362, 364, 365, 366, 369, 370, 371, 372, 373, 375, 376, 377, 384, 393, 406, 411], "hu": 188, "hub": [103, 323, 332, 334, 338, 339, 350, 351, 354, 355, 357, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376], "hue": 341, "hug": 330, "hugginfacehub": 411, "huggingfac": [13, 18, 27, 103, 301, 303, 305, 306, 310, 323, 332, 333, 334, 338, 339, 342, 343, 344, 345, 350, 351, 355, 357, 364, 365, 366, 369, 370, 371, 372, 373, 375, 376, 393, 394, 397, 406, 411], "human": 365, "hurault": [357, 392], "hv110_p0500510000": 16, "hv110_p0500510049": 16, "hybrid": 404, "hyperparamet": [52, 112, 113, 122, 180, 190, 260, 261, 263, 350, 361, 365, 366, 382, 383, 396, 400, 402, 407], "hyperspectr": [178, 188, 338], "hyperspectralunmix": [338, 401], "i": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 85, 86, 87, 88, 89, 90, 92, 94, 95, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 166, 167, 168, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 300, 307, 308, 310, 312, 313, 315, 318, 320, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 345, 346, 347, 350, 351, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 369, 370, 371, 372, 373, 375, 376, 377, 381, 382, 383, 384, 385, 386, 390, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417], "ib": [328, 340, 346, 354, 385, 386], "iccv": [100, 125], "icm": 389, "icnn": [120, 404], "id": [17, 35, 121, 264, 269, 274, 345, 351, 356], "idea": 390, "ideal": [57, 364], "ident": [35, 52, 117, 126, 163, 167, 180, 182, 190, 198, 268, 272, 273, 287, 336, 350, 355], "identif": 400, "identifi": [16, 21], "idri": 21, "idx": 363, "ie": [211, 247, 400], "ieee": [52, 53, 54, 67, 80, 107, 122, 187, 206, 354, 384], "ieeexplor": [52, 53, 54, 67, 187, 206], "ifft": [111, 193], "ignor": [12, 19, 28, 41, 42, 48, 92, 184, 188, 192, 194, 195, 205, 237, 238, 245, 253, 259, 287, 320, 328, 341, 404], "ii": 320, "iid": [177, 207], "ikono": 23, "ill": [333, 413], "illumin": [239, 333], "illustr": [326, 407], "ilvr_adm": 88, "im": [320, 365], "im_siz": 320, "im_to_kspac": 193, "im_width": 214, "imag": [6, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 39, 40, 41, 42, 43, 44, 45, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 122, 123, 125, 127, 130, 133, 139, 140, 141, 144, 145, 148, 149, 151, 153, 154, 166, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 213, 214, 217, 220, 222, 223, 224, 225, 226, 227, 228, 229, 233, 234, 235, 236, 237, 240, 241, 245, 246, 248, 249, 250, 251, 252, 255, 256, 260, 262, 263, 265, 268, 269, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 315, 318, 321, 322, 324, 325, 326, 330, 332, 333, 339, 342, 343, 344, 348, 349, 356, 359, 360, 363, 364, 365, 367, 368, 369, 375, 378, 379, 384, 387, 388, 389, 393, 394, 395, 396, 397, 399, 400, 401, 403, 404, 405, 406, 408, 411, 412, 413, 414, 417], "image_gdth": 320, "image_srf_2": 25, "image_srf_3": 25, "image_srf_4": 25, "imagefold": [305, 323, 328, 397, 412], "imagenet": 77, "imagenet128": [88, 411], "imagenet64": 77, "imageri": [23, 338], "images_contours_and_field": [310, 313], "imagin": 188, "imaginari": [26, 31, 114, 184, 192, 193, 194, 205, 336, 339, 412], "imbalanc": 279, "img": [16, 24, 202, 310, 313, 315, 318, 320, 334, 346, 347, 351, 355, 356, 358, 361, 362, 363, 365, 366], "img1": 310, "img2": 310, "img3": 310, "img_001": 27, "img_001_srf_2_bicub": 25, "img_014_srf_2_srcnn": 25, "img_100": 27, "img_list": [310, 312, 313], "img_rang": 105, "img_resolut": [77, 97], "img_shap": [82, 177, 204, 207, 329, 334, 336, 339, 355, 382, 383, 400, 412], "img_siz": [66, 71, 105, 176, 178, 181, 183, 184, 190, 192, 193, 194, 196, 201, 202, 203, 205, 208, 237, 243, 245, 252, 253, 255, 256, 307, 308, 320, 326, 327, 328, 329, 332, 334, 336, 337, 339, 340, 346, 347, 351, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 371, 381, 382, 383, 384, 385, 386, 393, 400, 406], "img_transform": 330, "img_typ": 16, "img_width": [214, 336, 351, 358, 375, 384], "immers": [239, 241, 333], "implement": [20, 32, 35, 38, 44, 45, 48, 66, 70, 71, 74, 77, 83, 84, 87, 88, 89, 91, 92, 94, 97, 101, 105, 107, 109, 111, 122, 123, 126, 133, 134, 138, 142, 144, 145, 156, 168, 172, 173, 175, 178, 180, 186, 189, 190, 195, 198, 203, 208, 213, 231, 232, 233, 234, 237, 260, 261, 263, 270, 280, 287, 302, 303, 308, 310, 320, 323, 326, 333, 335, 336, 337, 339, 341, 344, 345, 355, 364, 367, 368, 369, 370, 375, 382, 383, 384, 394, 395, 399, 402, 407, 408, 413, 414, 416, 417], "implicit": [145, 292, 329, 407, 410], "implicitli": [106, 107, 358, 406, 407], "import": [13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 32, 35, 36, 37, 38, 44, 45, 46, 47, 48, 49, 50, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 108, 109, 117, 126, 130, 133, 148, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 188, 189, 190, 191, 192, 194, 196, 199, 200, 205, 207, 208, 214, 215, 216, 217, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 260, 263, 279, 281, 287, 288, 289, 290, 291, 295, 310, 313, 315, 318, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 345, 346, 347, 350, 351, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 393, 397, 399, 400, 404, 406, 407, 410, 412, 413, 414, 415, 417], "importlib": 332, "impos": 370, "improv": [12, 44, 52, 78, 250, 323, 329, 334, 339, 375, 384, 395], "impuls": [206, 208, 326, 331], "in_chan": 105, "in_channel": [77, 85, 88, 89, 93, 94, 97, 98, 99, 103, 110, 295, 323, 334, 339, 340, 355, 358, 370, 372, 373, 374, 375, 376, 377], "in_nc": 104, "in_shap": [201, 337], "in_siz": [82, 214, 222, 223, 329], "includ": [7, 12, 17, 19, 28, 32, 34, 44, 45, 48, 70, 74, 89, 102, 168, 179, 197, 211, 212, 226, 229, 232, 238, 276, 281, 287, 288, 289, 291, 334, 337, 338, 339, 350, 363, 370, 374, 389, 400, 402, 406, 412, 414], "incom": [292, 410], "incomplet": [12, 19, 28, 34, 39, 40, 41, 42, 78, 87, 102, 110, 172, 180, 189, 190, 198, 300, 302, 329, 344, 362, 366, 378, 379, 394, 413], "incorpor": [184, 189, 190, 192, 194, 198, 203, 320, 334], "increas": [48, 90, 110, 125, 320, 323, 326, 345, 364, 369], "inde": [190, 358], "indefinit": 174, "independ": [17, 26, 108, 177, 204, 207, 248, 284, 404, 413], "index": [12, 17, 20, 49, 74, 75, 168, 210, 239, 241, 287, 302, 306, 315, 318, 333, 341, 346, 354, 357, 381, 400], "index_select": 365, "indic": [17, 20, 112, 126, 127, 128, 151, 240, 268, 270, 336, 385, 407], "indicatorl2": [332, 385, 407], "individu": [12, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 310, 315, 318], "induc": [20, 320, 347], "induct": 402, "inexact": 53, "inf_lr": 81, "inf_max_it": 81, "inf_progress_bar": 81, "inf_tol": [81, 323], "inf_z": [147, 408], "infer": [12, 47, 78, 81, 111, 222, 223, 232, 323, 364, 402], "inferno": 320, "infinit": [292, 410], "info": [280, 354, 404], "inform": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 17, 28, 75, 102, 117, 166, 167, 168, 169, 170, 173, 174, 190, 198, 209, 210, 276, 320, 334, 337, 338, 340, 371, 372, 373, 374, 376, 377, 385, 404, 413], "infti": [127, 128, 151, 385], "inherit": [70, 87, 102, 184, 192, 205, 326, 327, 335, 357, 361, 384, 398, 400, 405, 407, 408, 413, 414, 415, 417], "init": [12, 42, 169, 170, 172, 174, 315, 332, 377], "init_anderson_acceler": 126, "init_iterate_fn": [117, 126], "init_metrics_fn": [117, 126], "init_param": [314, 382, 383, 386], "initi": [12, 52, 53, 77, 81, 85, 86, 88, 89, 93, 97, 104, 105, 117, 125, 126, 139, 167, 168, 169, 170, 173, 174, 195, 197, 198, 251, 258, 259, 263, 270, 274, 275, 314, 332, 337, 345, 351, 357, 358, 363, 364, 365, 369, 371, 372, 373, 374, 376, 377, 382, 383, 385, 386, 401, 407], "initialis": [17, 48, 126, 179, 184, 190, 192, 205], "inner": [149, 272], "inner_it": 272, "inpaint": [12, 19, 28, 39, 48, 51, 87, 112, 117, 123, 125, 127, 133, 141, 144, 145, 151, 154, 180, 181, 182, 186, 190, 195, 198, 238, 246, 260, 263, 276, 293, 295, 302, 303, 305, 308, 310, 311, 329, 332, 340, 341, 344, 348, 349, 352, 353, 362, 363, 364, 365, 366, 369, 370, 372, 387, 388, 392, 393, 394, 400, 401, 406, 407, 410], "input": [9, 12, 32, 33, 35, 38, 39, 44, 45, 48, 52, 53, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 103, 104, 105, 108, 109, 110, 111, 112, 114, 121, 126, 137, 138, 139, 147, 153, 154, 155, 156, 157, 158, 159, 161, 163, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 187, 188, 189, 190, 192, 193, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 208, 211, 212, 213, 214, 217, 222, 223, 230, 236, 238, 246, 250, 255, 259, 262, 269, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 323, 327, 329, 331, 336, 338, 345, 346, 347, 354, 355, 356, 357, 358, 363, 365, 375, 384, 386, 399, 400, 401, 402, 404, 407, 417], "input_mask": [236, 238, 246, 250, 369], "input_nc": 101, "input_resolut": 104, "input_s": [86, 217, 329], "input_shap": [91, 211, 212], "inria": 389, "inscrib": 214, "inset": [312, 397], "inset_loc": [312, 320], "inset_s": [312, 320], "insid": [3, 12, 14, 103, 128, 214, 268, 333, 339, 377, 414], "inspir": [78, 126, 263], "instal": [21, 80, 112, 113, 194, 280, 315, 320, 344, 369, 390, 393, 417], "instanc": [117, 126, 138, 145, 154, 155, 156, 157, 158, 159, 161, 163, 167, 186, 277, 293, 294, 295, 326, 327, 333, 355, 363, 383, 384, 407, 415, 416], "instanti": [13, 15, 16, 17, 18, 21, 22, 23, 25, 27, 117, 208, 247, 320, 326, 327, 333, 334, 346, 347, 354, 355, 357, 358, 400], "instead": [20, 35, 45, 48, 78, 107, 160, 175, 177, 194, 204, 231, 232, 236, 250, 277, 280, 320, 323, 345, 384, 402, 415], "institut": 389, "instruct": [77, 97, 103], "int": [12, 14, 16, 17, 20, 24, 26, 28, 29, 32, 33, 35, 38, 44, 45, 47, 48, 50, 64, 67, 77, 79, 81, 82, 83, 84, 85, 86, 88, 89, 90, 93, 94, 95, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 110, 111, 112, 113, 117, 125, 126, 127, 129, 130, 139, 140, 144, 149, 151, 154, 167, 168, 169, 170, 171, 172, 173, 174, 177, 179, 183, 186, 188, 190, 191, 194, 195, 196, 198, 199, 200, 202, 203, 204, 206, 207, 210, 213, 214, 215, 216, 218, 219, 221, 222, 223, 231, 232, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 263, 265, 268, 270, 271, 272, 273, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 306, 307, 308, 310, 312, 313, 315, 318, 320, 334, 336, 340, 361, 363, 366, 371, 372, 373, 374, 376, 381, 384, 385, 386, 416], "int_0": 408, "intanc": 161, "integ": [194, 268, 272, 273, 283, 285, 339, 370], "integr": [15, 22, 214, 235, 259, 266, 267, 271, 377, 417], "intend": [193, 369], "intens": [187, 202, 206, 331, 333, 399], "interact": [315, 318], "interest": [117, 287, 320, 355, 363], "interfac": [20, 258, 361, 407], "interferometr": [117, 123, 133, 144, 145, 151, 154, 190, 198, 203, 299, 301, 303, 310, 311, 312, 321, 322, 344, 394, 401], "interferometri": [203, 320], "interleavedepochlossschedul": 413, "interleavedlossschedul": 413, "intermedi": [79, 97, 110, 357], "intern": [144, 168, 331, 341, 357, 389], "internet": [13, 15, 16, 18, 22, 23, 25, 26, 27], "interp_point": [203, 320], "interpol": [35, 203, 214, 252, 281, 283, 284, 287, 288, 289, 290, 291, 310, 313, 320, 326, 333, 336, 338, 357, 365, 399, 417], "interpolation_method": [310, 313], "interpolation_mod": 283, "interpolationmod": 283, "interpret": [103, 110, 112, 191], "interv": [151, 212, 244, 254, 259, 262, 273], "intial": 334, "intiliaz": 156, "intract": 365, "introduc": [45, 52, 53, 80, 82, 89, 104, 105, 236, 272, 320, 365, 369, 377], "introduct": [4, 6, 395], "inv": [35, 351], "invari": [34, 41, 127, 370, 413], "invers": [12, 19, 23, 27, 28, 34, 39, 40, 41, 42, 47, 49, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 81, 83, 84, 87, 89, 91, 101, 102, 110, 117, 118, 121, 123, 139, 142, 144, 145, 146, 154, 168, 172, 175, 176, 180, 184, 187, 188, 189, 190, 192, 193, 195, 197, 198, 200, 204, 205, 211, 214, 220, 222, 248, 249, 251, 260, 269, 270, 278, 279, 280, 287, 292, 300, 302, 303, 308, 310, 311, 315, 318, 320, 324, 325, 326, 328, 329, 335, 336, 338, 339, 340, 341, 344, 350, 351, 357, 359, 360, 361, 362, 364, 366, 371, 372, 375, 376, 377, 381, 390, 392, 394, 395, 396, 397, 399, 400, 402, 403, 405, 406, 409, 410, 413, 414, 417], "inversef": [12, 48, 78, 102, 375, 403, 405], "invert": [70, 139, 155, 156, 157, 287, 341, 351, 417], "invert_metr": 70, "invert_param": 287, "investig": 320, "involv": [106, 107, 370, 382], "io": [106, 107, 384], "iota_": [127, 128, 151, 385], "ip": [327, 334, 354, 355, 357, 358], "ipynb": [320, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 345, 346, 347, 350, 351, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386], "ipython": [315, 369], "iradon": 399, "irf": 331, "irf_sigma": 331, "is_avail": [260, 263, 302, 320, 323, 327, 328, 329, 331, 332, 333, 334, 336, 337, 339, 340, 345, 346, 347, 350, 351, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386], "is_standard_deblurring_network": 103, "is_standard_denoising_network": 103, "is_standard_deraining_network": 103, "is_valid_fil": 412, "isn": 22, "isola": 101, "isomorph": 290, "isotrop": [107, 220, 284], "issu": [287, 361, 390, 391], "itakura": 121, "itali": 389, "item": [20, 32, 44, 45, 47, 48, 186, 207, 210, 320, 329, 333, 334, 345, 346, 347, 350, 351, 355, 356, 358, 361, 362, 366, 377, 407, 416], "iter": [12, 14, 17, 19, 21, 28, 32, 35, 38, 39, 51, 81, 86, 106, 107, 111, 113, 117, 122, 123, 126, 127, 129, 133, 138, 144, 145, 149, 151, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 177, 190, 198, 259, 261, 262, 263, 265, 268, 269, 272, 273, 276, 279, 292, 293, 294, 295, 300, 302, 310, 314, 320, 327, 328, 329, 330, 332, 334, 335, 337, 339, 344, 346, 347, 354, 355, 356, 357, 358, 362, 363, 365, 366, 369, 370, 375, 381, 385, 386, 387, 388, 393, 394, 395, 397, 405, 410, 412, 416], "iterable_dataset": 330, "iterabledataset": 330, "iteratbl": 330, "iterator_param": 268, "ith": [90, 125], "its": [12, 15, 16, 20, 48, 94, 106, 107, 117, 118, 139, 144, 168, 177, 180, 195, 212, 232, 238, 248, 251, 259, 287, 315, 318, 332, 334, 335, 346, 347, 355, 363, 375, 382, 383, 384, 385, 395, 400, 407, 413, 417], "itself": 320, "iwt": 112, "j": [48, 106, 107, 117, 151, 169, 177, 204, 206, 331, 365, 382, 384], "jac_inv": 351, "jacobian": [35, 38, 106, 123, 139, 148, 190, 197, 198, 292, 381, 413], "jacobian_fre": [292, 381], "jacobianspectralnorm": [35, 413], "jbhuang0604": 25, "jingyunliang": 105, "jitter": 341, "jmo": 333, "join": [391, 417], "joint": 179, "jointli": [111, 279, 338, 386, 413], "jona": 384, "journal": [174, 235], "jpeg": [22, 326, 355], "jpg": [66, 71, 329, 341, 361, 362, 364, 366, 370], "json": 13, "julian": 392, "june": 389, "jupyt": [320, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 347, 350, 351, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386], "just": [12, 23, 182, 190, 320, 326, 338, 351], "jychoi118": 88, "k": [17, 32, 44, 106, 111, 112, 113, 117, 122, 126, 138, 155, 156, 157, 158, 159, 160, 161, 162, 163, 167, 203, 205, 208, 213, 235, 237, 243, 245, 248, 253, 272, 273, 293, 320, 332, 336, 339, 354, 355, 356, 361, 366, 369, 382, 383, 384, 385, 401, 406, 407, 410, 412, 416], "k_adjoint": [332, 384, 385], "k_oversampl": [203, 320], "kaiser": [203, 221], "kappa": 400, "kargs_model": 35, "kb": [241, 333], "kbnufft": 320, "kbnufftadjoint": 320, "keep": [17, 112, 177, 189, 190, 195, 198, 207, 268, 272, 273, 287, 296, 340, 365, 381, 385, 397, 414], "keep_time_dim": [205, 369], "kei": [12, 105, 117, 214, 223, 237, 238, 239, 240, 241, 244, 247, 248, 251, 252, 254, 276, 278, 293, 295, 326, 330, 333, 355, 365, 400, 407], "kept": [107, 112, 113, 238, 246], "kernel": [94, 95, 100, 147, 175, 203, 224, 225, 226, 227, 228, 229, 240, 241, 268, 326, 327, 331, 333, 336, 346, 354, 357, 361, 363, 381, 399, 400, 408], "kernel_dim": 94, "kernel_index": [346, 354, 357, 381], "kernel_s": [95, 248, 249], "kernel_torch": [346, 354, 357, 381], "kernels_12": 357, "keyword": [35, 88, 117, 126, 164, 165, 172, 231, 258, 259, 264, 270, 277, 287, 293, 315], "kindli": 320, "kl": 351, "knee": [17, 26, 339, 369, 412], "knee_dataset": 339, "knowledg": [28, 74, 374, 376, 395, 406], "known": [131, 135, 136, 270, 287, 362, 364], "kohler": 412, "kornia": [281, 288, 289, 290, 291, 417], "kr": 18, "kspace": [14, 17, 111, 184, 192, 193, 194, 339], "kspace_shap": 339, "kspace_to_im": 193, "kullback": [137, 143, 351], "kunisch": 106, "kupyn": [59, 60, 101, 323], "kutta": [272, 408], "kwarg": [12, 30, 31, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 77, 78, 80, 81, 84, 86, 87, 88, 92, 97, 100, 102, 103, 105, 106, 107, 108, 109, 110, 112, 113, 116, 117, 118, 119, 121, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 143, 144, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 231, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 258, 259, 262, 264, 269, 270, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 292, 293, 294, 295, 315, 318, 320, 327, 335, 339, 341, 355, 357, 383, 384], "kwargs_model": 35, "kx": 156, "k\u00f6hler": 20, "l": [32, 36, 37, 44, 45, 46, 47, 48, 49, 50, 59, 60, 61, 62, 63, 85, 93, 95, 106, 107, 122, 185, 202, 221, 248, 272, 273, 323, 326, 345, 351, 354, 372, 374, 402, 413, 414, 416], "l1": [65, 103, 132, 337, 407], "l12prior": 407, "l1l2": 414, "l1loss": [68, 383, 414], "l1prior": [126, 407], "l2": [64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 90, 103, 117, 119, 126, 130, 144, 148, 263, 294, 295, 320, 327, 334, 346, 347, 354, 355, 357, 358, 361, 363, 365, 366, 381, 382, 383, 386, 393, 406, 407, 410], "l2_axi": 130, "l2_loss": 365, "l2_prior": 327, "l2prior": 327, "l3": [67, 103], "l4": 103, "l_1": 65, "l_2": 65, "l_p": 67, "label": [56, 57, 58, 77, 88, 97, 117, 312, 323, 328, 351, 406, 407, 412], "label_dim": [77, 97], "label_dropout": [77, 97], "label_loc": 312, "lam": 351, "lam_epl": 351, "lam_patchnr": 351, "lamb": [144, 163, 167, 320, 332, 346, 347, 357, 382, 383], "lambd": 407, "lambda": [52, 112, 113, 117, 126, 138, 144, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 167, 169, 174, 180, 186, 190, 198, 217, 251, 263, 265, 268, 272, 273, 287, 293, 294, 295, 320, 323, 327, 332, 333, 334, 338, 339, 341, 345, 346, 347, 351, 355, 357, 358, 369, 371, 372, 373, 374, 375, 376, 382, 383, 386, 396, 402, 406, 407, 414, 417], "lambda_": [263, 333, 345, 363, 382], "lambda_1": [106, 186], "lambda_2": 106, "lambda_b": 186, "lambda_col": [239, 333], "lambda_i": 345, "lambda_il": [239, 333], "langevin": [272, 273, 361, 366, 392, 408], "langl": [118, 119, 144], "larg": [22, 23, 35, 38, 52, 86, 88, 90, 106, 125, 151, 175, 177, 320, 323, 334, 335, 338, 364, 392, 395, 399, 400, 405, 408, 412], "large_model": [88, 363, 365], "larger": [28, 88, 172, 191, 251, 272, 273, 369, 370, 371, 381, 386], "largest": [35, 38, 112, 117], "laser": 239, "last": [12, 20, 53, 126, 189, 192, 194, 230, 232, 258, 259, 270, 326, 363], "last_batch": 12, "latent": [79, 81, 84, 323, 351, 402], "later": [45, 239, 334, 363, 365], "latest": 393, "latter": [28, 365], "laurent": [106, 107], "law": 177, "lax": 14, "layer": [77, 79, 82, 83, 84, 85, 88, 89, 94, 97, 98, 99, 101, 103, 104, 105, 110, 211, 212, 329, 339, 384, 386, 410, 411], "layernorm": [103, 105], "layernorm_typ": 103, "layout": [310, 313], "lcondat": [106, 107], "ldot": [205, 218, 219, 345], "lead": [214, 223, 290, 392], "leaki": 200, "leakyrelu": [85, 93], "learn": [4, 12, 17, 19, 26, 28, 32, 34, 39, 40, 42, 44, 47, 48, 51, 52, 53, 66, 78, 81, 83, 84, 86, 87, 96, 98, 99, 102, 110, 111, 117, 122, 123, 125, 133, 138, 144, 145, 151, 156, 162, 164, 165, 177, 179, 180, 186, 189, 190, 192, 193, 195, 198, 213, 214, 236, 238, 246, 250, 276, 279, 283, 284, 287, 293, 295, 300, 302, 306, 310, 314, 323, 325, 327, 329, 338, 339, 340, 341, 350, 351, 354, 357, 369, 370, 373, 374, 376, 379, 381, 385, 386, 387, 388, 389, 390, 394, 395, 402, 403, 405, 411, 417], "learnabl": [105, 110, 293, 382, 383, 385, 410], "learning_r": [86, 329, 340, 371, 372, 373, 374, 376, 377, 381, 382, 383, 384, 385, 386], "learning_std": [323, 327, 338, 340, 354, 357, 369, 371, 372, 373, 374, 375, 376, 377, 384, 385], "learnt": 28, "least": [12, 57, 172, 173, 190, 198, 340, 369, 385, 407], "least_squar": [190, 198], "leclair": 357, "left": [45, 52, 53, 54, 59, 60, 61, 62, 63, 118, 123, 127, 128, 147, 148, 151, 169, 177, 190, 198, 201, 202, 204, 220, 248, 262, 263, 264, 270, 273, 274, 275, 292, 312, 323, 333, 361, 363, 364, 366, 372, 376, 377, 382, 402, 407, 408, 410, 414], "left_precon": 169, "leftarrow": 117, "legendr": [156, 355], "leibler": [137, 143, 351], "len": [13, 15, 16, 17, 18, 22, 23, 25, 26, 27, 239, 240, 241, 282, 287, 320, 326, 333, 345, 363, 400], "lenght": 386, "length": [12, 32, 35, 38, 81, 117, 179, 221, 236, 248, 259, 310, 312, 313, 315, 318, 326, 331, 332, 382, 383, 384, 385, 386], "leq": [127, 128, 156, 158, 162, 163, 172, 218, 219, 221, 363, 407], "lesion": 21, "less": [239, 246, 264, 270, 274, 275, 287, 413], "let": [92, 205, 213, 283, 326, 330, 333, 339, 341, 345, 363, 364, 365, 369, 408], "level": [16, 47, 52, 53, 77, 80, 85, 87, 88, 89, 92, 97, 103, 105, 110, 112, 113, 122, 133, 141, 142, 143, 147, 151, 185, 186, 191, 194, 198, 200, 206, 216, 244, 251, 254, 260, 261, 262, 263, 264, 272, 273, 274, 275, 320, 329, 331, 332, 336, 345, 347, 350, 355, 356, 358, 361, 362, 363, 364, 365, 366, 381, 382, 385, 386, 404, 407, 408, 411], "leverag": [38, 180, 292, 395, 405, 408, 410, 413], "levin": [327, 346, 354, 357], "levin09": [346, 354, 381], "lexicograph": 20, "lhood": 361, "lib": [341, 369], "libcpab": 280, "librari": [12, 80, 139, 194, 276, 277, 323, 333, 337, 338, 363, 381, 383, 384, 389, 390, 395, 404, 405, 408, 417], "licenc": 21, "lidar": [198, 206, 302, 342, 343, 344, 394, 401], "lidc": 21, "lidcidrislicedataset": 412, "light": [20, 187, 188, 239, 241, 333], "lightn": 75, "lightweight": 339, "like": [46, 85, 106, 168, 188, 246, 271, 287, 320, 323, 337, 369, 399, 412, 414], "likelihood": [90, 121, 125, 133, 135, 136, 139, 140, 142, 143, 168, 180, 182, 186, 189, 190, 195, 198, 268, 272, 273, 303, 308, 310, 344, 351, 352, 353, 356, 361, 365, 394, 396, 406, 408], "limit": [12, 24, 90, 103, 123, 125, 135, 139, 140, 144, 145, 180, 182, 190, 191, 195, 198, 214, 216, 240, 241, 283, 310, 330, 344, 345, 350, 352, 353, 370, 394, 408, 411], "linalg": [35, 345], "line": [14, 189, 205, 214, 237, 243, 245, 253, 344, 369, 400, 406, 407, 417], "linear": [12, 52, 55, 77, 90, 97, 106, 107, 115, 125, 126, 149, 163, 167, 169, 170, 172, 173, 174, 178, 180, 182, 184, 186, 187, 188, 189, 190, 192, 194, 197, 198, 201, 202, 207, 209, 210, 211, 214, 217, 252, 273, 320, 329, 336, 338, 340, 341, 346, 347, 351, 355, 356, 358, 361, 362, 363, 365, 366, 381, 382, 383, 385, 386, 395, 398, 403, 407, 408], "linear_oper": 174, "linearli": [310, 313], "linearphys": [52, 90, 117, 125, 126, 175, 177, 178, 180, 183, 188, 189, 194, 197, 202, 203, 208, 209, 211, 214, 263, 273, 279, 320, 335, 398, 400], "linefmt": 331, "linewidth": 320, "link": [88, 268, 272, 273, 329, 344, 363, 396], "linspac": [214, 260, 351, 362, 363, 364, 365], "lionel": [329, 361, 362, 366], "lip": [158, 162, 163], "lipschitz": [35, 106, 107, 142, 143, 190, 272, 273, 355, 411, 413], "lipschitzian": [106, 107], "list": [12, 16, 17, 20, 28, 33, 36, 37, 41, 42, 46, 49, 50, 77, 85, 86, 90, 92, 93, 97, 103, 104, 112, 113, 117, 125, 148, 151, 154, 169, 170, 172, 173, 174, 179, 187, 196, 197, 198, 209, 210, 211, 232, 239, 240, 241, 242, 247, 258, 259, 260, 276, 277, 279, 282, 284, 293, 294, 295, 298, 310, 312, 313, 315, 318, 332, 336, 341, 363, 365, 370, 371, 372, 382, 383, 385, 386, 397, 401, 402, 404, 407, 408, 415], "list_denois": 363, "list_factor": 242, "list_filt": 242, "list_imag": 345, "list_noisi": 363, "list_param": [239, 240, 241, 326, 333], "list_prox": [345, 363], "list_rhos_algo": 363, "list_sigmas_algo": 363, "list_wv": [113, 345], "lista": [12, 19, 28, 39, 51, 123, 133, 144, 145, 151, 162, 177, 190, 198, 293, 295, 300, 302, 310, 314, 344, 383, 385, 387, 388, 394], "listtensor": 187, "literatur": [364, 409], "liu": 369, "live": [214, 315, 318, 358], "liver": [44, 250], "ll": [320, 345, 365], "lmm": 188, "load": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 87, 103, 112, 123, 127, 141, 144, 145, 177, 180, 189, 190, 192, 194, 197, 198, 204, 207, 278, 293, 295, 302, 305, 306, 307, 308, 320, 323, 326, 333, 341, 342, 343, 344, 363, 375, 394, 395, 397, 400, 406, 412, 416], "load_best_model": [12, 340, 381], "load_dataset": [327, 328, 330, 340, 346, 347, 354, 357, 381, 385, 386, 397], "load_dataset_hf": 330, "load_degrad": [346, 347, 354, 357, 371, 381, 397], "load_imag": [395, 397], "load_metadata_from_cach": [14, 17], "load_model": 12, "load_np_url": [320, 333, 339, 345], "load_physics_generator_param": [19, 339, 412], "load_state_dict": [168, 177, 189, 197, 204, 207, 278, 323, 332, 338, 339, 369, 370, 371, 372, 373, 374, 375, 376, 385], "load_state_dict_from_url": [323, 332, 338, 339, 369, 370, 371, 372, 373, 374, 375, 376], "load_torch_url": 351, "load_url_imag": [66, 71, 326, 329, 334, 336, 337, 341, 350, 355, 356, 358, 361, 362, 363, 364, 365, 366, 370, 393, 397, 406], "loader": [12, 276, 277, 382, 383, 412], "loc": [312, 332, 338, 339, 369, 371, 372, 373, 374, 375, 376], "local": [17, 26, 103, 329, 373, 390, 397, 412], "locat": [184, 192, 203, 205, 226, 310, 312, 320, 331], "lodopab": [191, 351], "log": [12, 47, 90, 121, 125, 133, 135, 136, 137, 139, 140, 142, 143, 147, 167, 168, 180, 182, 186, 189, 190, 191, 195, 198, 207, 261, 262, 264, 268, 269, 270, 272, 273, 274, 275, 279, 303, 308, 310, 320, 327, 334, 337, 344, 346, 347, 351, 352, 353, 356, 358, 361, 364, 365, 366, 381, 382, 383, 384, 386, 394, 401, 406, 407, 408, 411, 416], "log10": 320, "log_": [73, 414], "log_metr": 167, "log_metrics_wandb": 12, "log_raw_metr": 12, "log_train_batch": 12, "logan": 334, "logarithm": 320, "logpoisson": 191, "logpoissonlikelihood": [351, 407], "logpoissonnois": [135, 136, 351, 401], "logs_total_loss_ev": [351, 416], "logs_total_loss_train": [351, 416], "logscal": 320, "long": [12, 14, 328, 365, 412], "longer": 323, "look": [402, 410], "loop": [126, 415, 416], "loop_random_online_phys": [12, 339, 416], "loos": 111, "loss": [0, 3, 9, 12, 19, 28, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 86, 87, 102, 110, 115, 116, 133, 153, 180, 182, 185, 186, 190, 195, 198, 200, 236, 238, 246, 250, 262, 269, 276, 277, 279, 300, 302, 323, 329, 334, 337, 338, 339, 340, 341, 344, 350, 351, 366, 370, 371, 372, 378, 379, 381, 382, 383, 384, 385, 386, 392, 394, 395, 400, 402, 405, 414, 416, 417], "loss1": 49, "loss2": 49, "loss_d": 323, "loss_g": 323, "loss_hist": [334, 337], "loss_tot": [351, 416], "losses_d": [279, 323], "lossi": [62, 63, 81, 323], "lot": 20, "low": [74, 88, 100, 147, 183, 191, 196, 231, 232, 237, 243, 245, 253, 320, 336, 338, 355, 405], "lower": [70, 191, 217, 231, 232, 369], "lower_bett": 70, "lp": 67, "lpip": [354, 414], "lpips_std": 354, "lpips_v0": 354, "lpnorm": 414, "lprior": 361, "lr": [18, 100, 103, 323, 329, 337, 340, 351, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386], "lr_d": 323, "lr_g": 323, "lr_schedul": [12, 323, 340, 371, 372, 373, 374, 376, 381, 384, 385, 386], "lr_variational_problem": 351, "lrm": [74, 338], "lrschedul": 12, "lsdir": 22, "lsdirhr": 412, "lsgan": [57, 413], "lsqr": [172, 190, 198], "lung": [21, 412], "luxembourg": 389, "lvert": [61, 323, 402], "lyon": 389, "m": [23, 48, 52, 53, 54, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 100, 107, 115, 116, 163, 167, 173, 177, 178, 180, 188, 189, 190, 192, 196, 198, 203, 204, 205, 207, 238, 246, 272, 320, 333, 334, 336, 338, 355, 369, 375, 376, 377, 382, 383, 390, 396, 400, 407, 412, 414], "m1": 369, "m2": 369, "m_": 48, "m_1": 48, "m_2": [48, 375], "m_i": 48, "m_t": [184, 205], "machin": [389, 390], "made": 417, "mae": [65, 414], "mag": [184, 192], "magnet": [44, 184, 192, 205, 250, 339, 401], "magnitud": [17, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 166, 184, 192, 193, 310, 313, 339], "mai": [48, 86, 110, 117, 138, 200, 280, 287, 323, 329, 331, 334, 363, 402, 407], "main": [18, 27, 323, 332, 333, 334, 335, 338, 339, 345, 350, 351, 355, 357, 364, 365, 366, 369, 370, 371, 372, 373, 375, 376, 390, 393, 397, 406, 408, 411, 413], "maintain": [168, 280, 417], "make": [12, 112, 175, 334, 341, 366, 390, 404, 417], "manag": 293, "mandatori": [47, 87], "mani": [92, 183, 279, 329, 375, 392, 395, 400, 406, 410], "manifest": 21, "manner": [12, 180, 276], "manual": [329, 358], "manual_se": [35, 38, 130, 177, 180, 182, 184, 189, 192, 194, 204, 207, 214, 247, 251, 260, 320, 326, 327, 328, 329, 333, 334, 336, 339, 340, 345, 346, 347, 354, 355, 356, 357, 358, 363, 364, 366, 369, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 399], "map": [43, 52, 81, 88, 106, 107, 111, 147, 172, 182, 190, 194, 198, 261, 263, 334, 337, 339, 373, 384, 396, 399, 400, 402, 403, 408], "map_loc": [323, 332, 338, 339, 369, 370, 371, 372, 373, 374, 375, 376], "mapper": 76, "mapsto": [117, 190, 198, 203, 396, 400, 406, 407], "marcenko": 177, "mark": 21, "markerfmt": 331, "markov": [268, 272, 273, 361, 405], "marseil": 389, "maruyama": 266, "mask": [14, 17, 32, 43, 44, 48, 109, 133, 178, 180, 184, 189, 192, 193, 194, 205, 207, 211, 213, 236, 237, 238, 240, 241, 243, 245, 246, 250, 253, 260, 263, 329, 332, 335, 336, 339, 340, 341, 347, 350, 361, 362, 363, 364, 365, 366, 369, 370, 371, 372, 373, 375, 385, 393, 399, 400, 406, 407, 413, 416], "mask0": 339, "mask1": 339, "mask_dir": [14, 339], "mask_ful": 369, "mask_gaussian": 336, "mask_gener": [14, 48, 339, 375, 400], "mask_random": 336, "mask_svd": 180, "mask_uniform": 336, "mat": [14, 23, 346, 354, 381], "match": [189, 192, 193, 194, 206, 212, 269, 270, 287, 337, 338, 339, 382, 390, 402], "materi": 188, "matern_kernel": 248, "math": [51, 144, 173, 211, 226, 355, 357, 363, 383, 384], "mathbb": [35, 38, 48, 59, 60, 61, 62, 63, 117, 144, 177, 180, 189, 203, 320, 323, 345, 351, 370, 402, 406, 407, 408], "mathbf": [188, 261, 263, 323, 363, 365], "mathcal": [49, 52, 53, 54, 59, 60, 61, 62, 63, 92, 127, 128, 147, 177, 185, 186, 191, 199, 200, 204, 206, 215, 216, 248, 261, 263, 264, 269, 273, 323, 331, 350, 351, 363, 365, 366, 372, 377, 385, 401, 402, 408, 413], "mathemat": [235, 389], "mathrm": [177, 204, 264, 269, 274, 275, 351, 364, 408], "matlab": [106, 107], "matplotlib": [310, 313, 315, 331, 334, 337, 345, 363, 369], "matric": [48, 168, 177, 211, 212, 233, 234, 361], "matrix": [35, 38, 163, 167, 177, 188, 189, 190, 203, 204, 207, 211, 212, 274, 320, 336, 338, 361, 382, 383, 413], "matter": 213, "matthieu": 392, "mat\u00e9rn": 248, "max": [35, 38, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 85, 93, 130, 132, 151, 167, 215, 231, 232, 244, 254, 274, 275, 310, 313, 320, 333, 334, 336, 337, 345, 362, 364, 365, 366, 408, 412, 414], "max_": 377, "max_batch_step": 12, "max_img": [310, 313], "max_it": [35, 38, 113, 117, 126, 127, 129, 154, 168, 169, 170, 171, 172, 173, 174, 190, 198, 261, 263, 265, 268, 272, 273, 293, 295, 320, 327, 332, 334, 345, 346, 347, 351, 354, 355, 356, 357, 358, 361, 362, 363, 366, 381, 382, 383, 384, 385, 386, 407], "max_iter_backward": [292, 381], "max_iter_int": 144, "max_pixel": [73, 75], "max_split_ratio": 238, "max_zernike_amplitud": [239, 240, 241], "maxim": [144, 149, 168, 327, 340, 351, 354, 357, 381, 382, 383, 385, 386, 411], "maximis": [59, 62], "maximum": [35, 38, 47, 73, 75, 81, 92, 106, 107, 117, 126, 127, 129, 147, 151, 154, 168, 169, 170, 171, 172, 173, 174, 190, 198, 215, 238, 239, 241, 244, 254, 265, 274, 275, 281, 285, 288, 289, 290, 291, 292, 310, 313, 327, 351, 362, 363, 408, 414], "maxpool": [85, 93], "mb": [88, 322, 325, 343, 349, 353, 360, 368, 379, 380, 388, 394], "mbox": [274, 275, 364], "mc": [48, 92, 371, 372, 375], "mc_physic": 339, "mcloss": [338, 370, 371, 372, 413, 414], "mcmc": [7, 87, 95, 123, 133, 144, 145, 147, 176, 180, 186, 190, 195, 198, 268, 273, 302, 308, 310, 344, 367, 368, 394, 395], "md": [356, 407], "md5": 15, "md_step": 118, "mea": [335, 338], "mean": [12, 14, 32, 35, 38, 40, 42, 43, 44, 48, 51, 52, 53, 54, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 81, 88, 185, 209, 264, 265, 266, 267, 268, 272, 273, 274, 287, 340, 345, 351, 361, 362, 363, 365, 366, 369, 382, 385, 396, 402, 407, 408, 414, 416], "mean_has_converg": 268, "meaning": 363, "meaningless": [81, 323], "measplit": [369, 375], "measur": [12, 13, 14, 17, 19, 23, 28, 32, 33, 34, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 52, 53, 54, 61, 62, 63, 74, 78, 81, 86, 87, 98, 100, 102, 108, 109, 110, 111, 115, 116, 117, 122, 126, 127, 129, 142, 143, 148, 163, 167, 177, 178, 179, 180, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 205, 206, 207, 209, 210, 214, 215, 216, 238, 246, 257, 260, 261, 262, 263, 268, 269, 270, 276, 279, 293, 300, 302, 323, 326, 327, 328, 332, 333, 335, 336, 339, 340, 344, 345, 346, 347, 351, 354, 355, 356, 357, 358, 363, 364, 365, 369, 370, 371, 373, 374, 376, 377, 378, 379, 381, 384, 385, 386, 393, 394, 395, 396, 400, 402, 403, 405, 406, 407, 408, 413, 414, 416], "measurement_dir": [327, 328, 340, 354, 357, 371, 372, 373, 374, 376, 377, 381, 382, 383, 385, 386], "mechan": [32, 44, 45, 48, 77, 97], "med": [17, 369], "median": [95, 341, 361, 406], "medianfilt": [45, 48, 49, 341, 361, 393, 404, 406], "medic": [384, 399, 412], "medium": [187, 239, 241, 333], "meet": [328, 366], "mem": [322, 325, 343, 349, 353, 360, 368, 379, 380, 388, 394], "memori": [17, 26, 35, 38, 90, 105, 107, 125, 214, 222, 223, 287, 302, 330, 339, 397, 412], "mention": 151, "merg": 369, "meshgrid": 341, "messi": [329, 361, 362, 366], "metadata": [17, 21], "metadata_cach": 17, "metadata_cache_fil": [14, 17], "metadata_cache_manag": 17, "meter": [296, 297], "method": [7, 12, 15, 17, 19, 20, 28, 32, 35, 38, 39, 44, 45, 47, 48, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 85, 86, 87, 88, 89, 90, 97, 102, 106, 107, 109, 117, 118, 122, 123, 124, 125, 127, 133, 138, 139, 141, 144, 145, 148, 153, 154, 155, 159, 163, 166, 167, 168, 172, 174, 175, 176, 180, 186, 189, 190, 193, 195, 196, 197, 198, 204, 206, 213, 258, 259, 260, 262, 264, 265, 266, 267, 269, 270, 272, 274, 275, 276, 287, 302, 303, 305, 306, 308, 310, 318, 323, 326, 327, 329, 333, 335, 338, 341, 342, 343, 344, 346, 347, 355, 357, 358, 359, 360, 361, 362, 366, 367, 368, 375, 384, 385, 392, 394, 395, 398, 400, 402, 403, 404, 407, 416, 417], "metric": [0, 12, 32, 34, 36, 37, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 57, 61, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 117, 126, 167, 190, 260, 263, 276, 279, 292, 293, 311, 320, 323, 327, 329, 334, 338, 339, 340, 345, 346, 347, 350, 351, 354, 355, 356, 357, 358, 361, 362, 366, 369, 381, 382, 383, 384, 385, 386, 395, 397, 413, 416], "metric_histori": 12, "metric_nam": 117, "mfx": 192, "michael": 174, "microscop": 16, "microscopi": [16, 333, 412], "microsop": 239, "middl": [17, 20, 26, 175, 176, 183, 190, 214, 223, 339, 399], "might": [39, 70, 74, 78, 90, 125, 177, 263, 315, 318, 335, 405, 414], "min": [12, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 90, 106, 107, 112, 113, 117, 125, 151, 156, 190, 193, 198, 215, 231, 232, 244, 254, 274, 275, 281, 288, 310, 313, 320, 334, 336, 346, 347, 351, 364, 365, 385, 406, 407, 408, 412], "min_": [86, 327, 329, 345, 377], "min_max": [30, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 310, 313, 315, 318], "min_num_step": 258, "min_prob": [117, 351, 406, 407], "min_split_ratio": 238, "min_x": [117, 126, 172, 173, 382, 383], "mind": 365, "mini": [26, 339, 369, 371], "minim": [86, 90, 106, 117, 118, 125, 138, 157, 158, 160, 162, 171, 172, 174, 261, 329, 337, 346, 347, 351, 372, 382, 385, 406, 407], "minimal_residual_method": 174, "minimax": [323, 402, 413], "minimis": [60, 61, 63, 117, 155, 156, 159, 160, 161, 383], "minimiza": 86, "minimize_variational_problem": 351, "minimum": [47, 151, 215, 238, 244, 254, 274, 275, 281, 288, 291], "minr": [172, 190, 198], "minu": [64, 74, 75, 76], "minut": [320, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 345, 346, 347, 350, 351, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386], "mio": [350, 411], "mirror": [87, 89, 94, 117, 118, 121, 123, 140, 142, 144, 145, 146, 154, 161, 176, 180, 190, 195, 198, 200, 220, 294, 295, 302, 303, 308, 310, 311, 344, 359, 360, 394, 407], "mismatch": 375, "miss": [332, 347], "mix": [166, 188, 247, 251, 336, 338, 376, 377, 400], "mixin": [193, 398], "mixtur": [90, 125, 168, 188, 247, 350, 351], "mlp": 105, "mlp_ratio": 105, "mm": 12, "mmse": [147, 270, 364], "mn": [177, 207], "mnist": [28, 372, 373, 374, 375, 376, 377, 382, 383, 412], "mnist_train": [382, 383], "mo": 41, "modal": 6, "mode": [12, 15, 22, 30, 78, 85, 88, 93, 103, 104, 111, 114, 178, 207, 281, 284, 288, 289, 290, 291, 310, 313, 315, 318, 330, 334, 338, 339, 354, 357, 358, 403], "model": [0, 3, 12, 14, 27, 32, 33, 34, 35, 39, 41, 42, 43, 44, 45, 47, 48, 49, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 122, 123, 125, 126, 127, 129, 133, 138, 139, 141, 144, 145, 147, 148, 155, 156, 157, 158, 167, 168, 178, 180, 185, 186, 187, 188, 189, 190, 191, 195, 196, 198, 202, 206, 209, 210, 211, 212, 213, 244, 254, 257, 260, 261, 262, 263, 264, 265, 268, 269, 270, 272, 273, 274, 275, 276, 277, 279, 288, 289, 291, 293, 295, 302, 308, 310, 314, 320, 327, 334, 338, 339, 341, 342, 343, 344, 345, 363, 364, 367, 368, 370, 371, 372, 373, 374, 376, 377, 381, 382, 383, 386, 393, 394, 395, 396, 397, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417], "model_bas": 35, "model_channel": [77, 97], "model_epl": 351, "model_eq": 341, "model_infer": [12, 416], "model_nam": [332, 338, 339, 369, 371, 372, 373, 374, 375, 376], "model_new": [332, 385], "model_nontrain": 332, "model_patchnr": 351, "model_spec": 385, "modif": 174, "modifi": [12, 44, 45, 48, 166, 276, 280, 339, 361, 399, 415], "modl": [339, 369, 371, 409], "modul": [4, 5, 6, 8, 9, 10, 11, 12, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 70, 77, 78, 80, 81, 82, 83, 84, 86, 87, 91, 94, 97, 98, 99, 100, 101, 102, 103, 105, 108, 109, 111, 114, 117, 118, 119, 120, 121, 125, 126, 137, 138, 139, 144, 164, 165, 168, 177, 182, 189, 190, 195, 196, 197, 198, 204, 207, 222, 223, 251, 258, 259, 260, 261, 263, 265, 268, 272, 273, 276, 277, 279, 287, 293, 295, 314, 320, 327, 330, 335, 337, 341, 345, 346, 347, 354, 358, 361, 362, 364, 374, 381, 382, 383, 384, 386, 395, 400, 404, 406, 410, 413, 414, 415], "modulelist": 345, "modulu": 197, "moeiloss": 413, "mohan": 110, "moi": [42, 372], "moiloss": [41, 372, 413], "momentum": [52, 53, 117, 126, 292, 377], "monitor": 338, "monoton": 411, "mont": [32, 45, 48, 52, 53, 54, 92, 265, 268, 272, 273, 287, 341, 361, 366, 404, 405], "montecarlo": [265, 272, 273, 361, 408], "more": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 17, 32, 44, 45, 46, 48, 70, 75, 77, 81, 85, 88, 89, 90, 92, 93, 97, 104, 105, 113, 117, 122, 125, 130, 132, 154, 169, 170, 174, 178, 185, 188, 190, 191, 198, 209, 210, 214, 222, 223, 239, 240, 241, 248, 252, 272, 273, 276, 280, 284, 288, 289, 290, 291, 292, 293, 294, 295, 310, 313, 320, 323, 326, 329, 332, 338, 339, 345, 351, 361, 369, 371, 377, 383, 385, 398, 400, 404, 406, 407, 410, 413, 414], "moreau": [144, 147, 160, 355, 408], "moreov": [117, 334, 335, 351, 364, 365], "most": [87, 168, 264, 270, 274, 275, 287, 302, 369, 397, 404, 407], "mostli": 191, "mother": [112, 113], "motion": [20, 44, 59, 60, 101, 248, 250, 258, 270, 323, 327, 346, 354, 357, 364, 381, 400], "motion_gener": 326, "motionblurgener": [247, 251, 323, 326, 400, 401], "mous": 16, "move": [20, 28, 370], "movement": 20, "mr": [17, 245], "mri": [12, 14, 17, 19, 26, 28, 32, 34, 39, 40, 44, 48, 51, 78, 82, 87, 89, 96, 102, 109, 110, 111, 117, 180, 184, 189, 190, 193, 194, 198, 205, 213, 236, 237, 238, 243, 245, 246, 250, 251, 253, 280, 283, 287, 293, 300, 302, 303, 306, 310, 313, 315, 341, 342, 343, 344, 345, 375, 378, 379, 392, 394, 401, 409, 412, 416, 417], "mri_mask_128x128": 371, "mrimixin": [14, 111, 192, 194, 398, 401], "mriquest": 194, "mse": [32, 34, 40, 41, 42, 43, 44, 45, 48, 51, 65, 72, 323, 339, 340, 381, 382, 383, 384, 385, 386, 402, 414], "mse_loss": 383, "mseloss": [32, 34, 40, 41, 42, 43, 44, 45, 48, 51, 57, 61, 69, 323, 414], "msx": 178, "mu": [135, 136, 168, 191, 351, 401, 407, 414], "mu_": 414, "mu_x": 414, "much": [17, 369], "mul": [189, 195, 198], "mult": [233, 234], "multi": [41, 42, 111, 194, 279, 339, 372, 384, 399, 413, 415], "multicoil": [17, 26, 111, 193, 194, 339, 375], "multicoil_train": 17, "multicoilmri": [17, 339, 401], "multidimension": 232, "multipl": [12, 19, 28, 33, 36, 37, 38, 39, 40, 41, 42, 45, 46, 48, 49, 50, 53, 54, 67, 78, 87, 92, 97, 102, 110, 123, 148, 180, 186, 187, 189, 190, 198, 202, 209, 210, 247, 257, 265, 279, 282, 283, 287, 300, 302, 326, 341, 344, 354, 355, 362, 364, 370, 375, 376, 377, 378, 379, 389, 394, 397, 400, 408, 412, 413, 417], "multipli": [77, 97, 142, 143, 155, 179, 186, 189, 190, 200, 202, 208, 221, 234, 235, 252, 287, 399, 400, 407, 417], "multiplier_adjoint": [233, 399], "multiscal": 75, "multispectr": [23, 64, 74, 76, 100, 196, 281, 290, 338, 370, 401, 409, 412, 414], "must": [14, 17, 32, 38, 39, 41, 42, 44, 48, 56, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 81, 85, 109, 121, 137, 174, 178, 179, 188, 189, 196, 236, 237, 241, 256, 259, 260, 263, 278, 279, 287, 312, 315, 318, 335, 336, 338, 346, 347, 355, 356, 358, 375, 404, 414, 416], "my_dataset_nam": [340, 371, 372, 373, 381, 382, 383, 385, 386], "mykernel": 268, "mysampl": 268, "n": [17, 29, 35, 38, 45, 47, 48, 52, 53, 88, 147, 177, 179, 180, 184, 186, 188, 189, 190, 192, 193, 194, 195, 197, 198, 199, 202, 203, 204, 207, 209, 211, 212, 215, 243, 245, 258, 261, 263, 264, 269, 270, 273, 287, 296, 320, 323, 332, 339, 341, 345, 350, 351, 357, 363, 365, 366, 372, 377, 380, 395, 396, 400, 401, 404, 408, 414], "n0": [135, 136, 191, 351], "n_": 202, "n_0": [135, 136, 191, 401, 407], "n_1": [88, 195], "n_2": [88, 195], "n_batch": 12, "n_channel": [327, 328, 332, 334, 340, 346, 347, 354, 355, 356, 357, 358, 381, 382, 383, 384, 385, 386], "n_coeff": 112, "n_coil": [194, 339], "n_compon": [90, 125, 168, 351], "n_data": 384, "n_detector_pixel": [214, 223], "n_dual": 384, "n_eigen_psf": [252, 326], "n_eigenpsf": 326, "n_images_max": [327, 340, 354, 357, 371, 372, 373, 374, 376, 377, 381, 382, 383, 385, 386], "n_img": [201, 202, 256, 337], "n_it_max": [106, 107, 149, 346], "n_iter": [163, 167, 334, 337], "n_iter_train": 384, "n_layer": [101, 211, 212, 323], "n_level": [112, 382], "n_patch": 140, "n_primal": 384, "n_shard": 330, "n_step": 248, "n_tessel": 280, "n_tran": [92, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 341, 371], "n_wavelet_subband": 382, "n_zernik": [239, 241, 326, 333], "na": [239, 240, 241, 333], "nabla": [47, 106, 107, 118, 119, 121, 137, 145, 146, 147, 149, 158, 159, 161, 162, 163, 264, 270, 273, 274, 275, 356, 361, 366, 383, 406, 407, 408], "nabla_": [116, 134, 261, 269, 270, 364, 365], "nabla_adjoint": [106, 107, 149], "nabla_u": [123, 148], "nabla_x": [119, 121, 123, 137, 144, 146, 148, 262], "name": [12, 16, 19, 23, 26, 113, 151, 154, 242, 276, 293, 294, 295, 296, 305, 306, 365, 385], "namedtupl": [16, 17, 21], "nan": [12, 110], "nativ": [331, 341, 395, 401], "natur": [45, 71, 88, 125, 328, 334, 350, 351, 370, 373, 412, 414], "nb": [85, 93], "nbia": 21, "nbu": [23, 338], "nbudataset": [338, 412], "nc": [83, 84, 85, 93], "ncsn": 97, "ncsnpp": [364, 404], "ndarrai": [256, 259, 296], "ndf": [83, 101, 323], "nearest": [85, 88, 93, 105, 263, 283, 313, 333], "necessari": [12, 88, 111, 261, 263, 279, 337, 364, 372, 382, 390], "necessarili": [138, 357], "need": [12, 20, 21, 103, 112, 156, 168, 200, 237, 326, 328, 332, 334, 339, 345, 350, 361, 363, 364, 385, 390, 398, 405, 407, 408, 415, 416, 417], "neg": [121, 125, 135, 136, 137, 139, 140, 142, 143, 168, 200, 268, 272, 273, 287, 351, 366, 406, 408], "negat": 287, "negative_log_likelihood": [125, 351], "negative_patch_log_likelihood": 140, "negentropi": 407, "neighbor": [43, 203, 320, 373], "neighbor2neighbor": [12, 19, 28, 39, 78, 87, 102, 110, 180, 182, 190, 195, 198, 200, 300, 302, 344, 378, 379, 394, 413], "neighbour": [85, 93], "net": [21, 47, 85, 110, 323, 340, 363, 372, 373, 374, 375, 376, 377], "network": [10, 12, 19, 27, 28, 32, 35, 39, 43, 44, 45, 47, 48, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 93, 94, 97, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 139, 175, 180, 189, 190, 198, 245, 248, 249, 251, 261, 262, 263, 276, 277, 278, 279, 300, 302, 305, 324, 325, 329, 332, 342, 343, 344, 351, 354, 363, 364, 365, 366, 369, 394, 395, 396, 403, 405, 410, 414, 416], "neural": [35, 48, 66, 81, 82, 94, 100, 103, 110, 139, 245, 329, 340, 351, 365, 366, 384, 405], "neurip": 47, "neuro": 17, "neuron": [139, 351], "never": 370, "nevertheless": 365, "new": [12, 28, 41, 42, 70, 163, 168, 175, 176, 183, 184, 186, 188, 192, 205, 208, 213, 247, 251, 268, 287, 310, 326, 333, 335, 339, 361, 375, 385, 395, 400], "new_demo_ei_ckp_150_v3": 371, "new_mask": 369, "new_x": 268, "next": [14, 21, 36, 37, 126, 323, 326, 330, 333, 339, 361, 363, 369, 370, 381, 382, 383, 386, 411, 412, 416], "next_phys": 42, "next_sigma": 363, "next_t": 365, "nf": [85, 89, 98, 99], "nfe": [271, 365], "nftrainer": 351, "ngf": [84, 323], "ni": [239, 241, 333], "nice": [331, 363], "nichol": [77, 411], "niqe": 414, "nll": 140, "nmse": 414, "nn": [12, 32, 33, 34, 35, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 68, 69, 78, 81, 86, 87, 100, 102, 105, 108, 109, 110, 111, 114, 139, 175, 177, 180, 182, 184, 189, 192, 193, 194, 196, 197, 200, 204, 205, 207, 224, 260, 261, 263, 265, 268, 272, 273, 276, 277, 279, 314, 323, 331, 336, 345, 361, 383, 395, 400, 407, 413, 414, 415], "no_grad": [34, 41, 57, 117, 180, 182, 293, 350, 356, 358, 363, 381, 382, 383, 386], "no_learning_infer": [12, 276], "no_learning_method": [12, 276, 338, 375], "nois": [12, 14, 16, 34, 41, 42, 45, 47, 48, 49, 52, 53, 54, 73, 77, 80, 85, 86, 87, 88, 89, 92, 97, 100, 102, 103, 105, 110, 113, 117, 118, 121, 122, 123, 133, 141, 142, 144, 145, 146, 147, 148, 154, 176, 180, 182, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 206, 210, 214, 215, 216, 220, 244, 251, 254, 260, 261, 262, 263, 264, 268, 270, 272, 273, 274, 275, 302, 303, 308, 310, 311, 320, 327, 328, 331, 334, 336, 338, 341, 344, 345, 346, 347, 350, 354, 355, 357, 358, 359, 360, 364, 365, 373, 374, 375, 376, 381, 386, 394, 395, 396, 400, 404, 406, 407, 408, 411, 413, 416], "noise2invers": [48, 375], "noise2noisi": 45, "noise2scor": 47, "noise_color": 196, "noise_dirnam": 16, "noise_gain": 100, "noise_grai": 196, "noise_level": [16, 88, 194, 198], "noise_level_img": [327, 345, 346, 347, 354, 355, 356, 357, 358, 381, 384, 386], "noise_model": [14, 45, 47, 182, 186, 190, 191, 195, 198, 199, 200, 210, 215, 216, 260, 263, 327, 329, 335, 336, 346, 347, 350, 351, 354, 355, 356, 357, 358, 361, 362, 363, 366, 374, 375, 381, 384, 386, 393, 400, 406, 412], "noise_nam": 374, "noise_std": 361, "noiseless": [52, 53, 54, 88], "noisemodel": [14, 45, 185, 186, 191, 198, 199, 200, 210, 215, 216], "noisi": [16, 43, 45, 47, 49, 52, 53, 54, 74, 77, 80, 85, 87, 88, 89, 90, 97, 103, 105, 106, 107, 110, 112, 113, 148, 184, 185, 186, 189, 191, 192, 194, 197, 198, 199, 200, 210, 215, 216, 269, 270, 329, 345, 346, 347, 350, 351, 361, 362, 363, 364, 365, 366, 370, 375, 400, 404], "noisy_imag": 404, "noisydatafidel": [262, 270, 408], "noisysampleidentifi": 16, "noll": [240, 333], "nomenclatur": [326, 333], "non": [12, 32, 44, 168, 187, 190, 197, 198, 203, 205, 210, 213, 243, 245, 287, 320, 329, 341, 366, 369, 395, 398, 400, 403, 405, 411, 413], "non_linear": [112, 113, 345], "none": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 33, 35, 36, 38, 41, 42, 44, 45, 46, 47, 48, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 85, 88, 89, 90, 92, 93, 96, 97, 100, 103, 104, 105, 106, 107, 108, 109, 110, 111, 117, 118, 120, 123, 124, 125, 126, 127, 128, 129, 138, 139, 144, 145, 151, 154, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 180, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 211, 213, 214, 215, 216, 222, 223, 231, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 256, 258, 259, 260, 262, 263, 264, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 318, 323, 326, 327, 328, 330, 333, 335, 338, 339, 351, 354, 355, 357, 364, 369, 370, 372, 373, 374, 375, 376, 377, 386, 400, 407, 415, 416], "nonexpans": [35, 366, 411], "nonstandard": 20, "nonsymmetr": 169, "norm": [12, 35, 38, 55, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 101, 106, 107, 110, 112, 113, 117, 119, 129, 130, 131, 133, 134, 149, 151, 177, 190, 193, 196, 212, 214, 279, 320, 327, 334, 335, 345, 346, 358, 361, 365, 385, 400, 407, 413], "norm_a2": 407, "norm_grad": 365, "norm_input": [64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76], "norm_lay": 105, "normal": [55, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 88, 89, 97, 105, 106, 107, 133, 134, 135, 136, 139, 147, 172, 190, 191, 196, 200, 202, 203, 214, 259, 320, 334, 351, 365, 382, 383, 407, 408], "normalis": [17, 23, 26, 70, 72, 133, 188, 414], "normalizing_flow": [139, 351], "normliz": 214, "note": [12, 32, 64, 74, 76, 92, 123, 128, 148, 156, 160, 178, 193, 194, 195, 197, 214, 223, 251, 259, 276, 279, 284, 315, 318, 320, 323, 326, 327, 338, 339, 341, 356, 361, 363, 365, 369, 370, 374, 375, 381, 382, 383, 386, 398, 412, 414, 415, 417], "notebook": [310, 315, 318, 320, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 347, 350, 351, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386], "noth": [70, 74, 287], "notic": [127, 326, 333, 339, 363], "nov": 389, "now": [22, 292, 294, 320, 323, 326, 333, 338, 339, 340, 345, 350, 351, 362, 363, 365, 369, 370, 381, 382, 383, 385, 386, 393, 400], "np": [177, 256, 260, 320, 323, 327, 333, 337, 338, 340, 345, 354, 357, 361, 362, 363, 365, 369, 371, 372, 373, 374, 375, 376, 377, 384, 385], "npy": [320, 333, 339, 345, 346, 354, 357, 371, 381], "nsgan": 57, "nth": 194, "nufft": [203, 320], "nufftobj": 320, "null": [326, 333], "num_angl": 351, "num_block": [77, 97, 103], "num_cascad": [111, 339], "num_channel": [239, 240, 241, 247, 248, 249, 251], "num_epoch": 297, "num_filt": 94, "num_head": 105, "num_it": [96, 334, 339], "num_lay": [94, 139], "num_refinement_block": 103, "num_step": [271, 364, 365], "num_train_timestep": [88, 263, 363, 365], "num_work": [28, 327, 328, 330, 340, 354, 355, 357, 358, 371, 372, 373, 374, 376, 377, 381, 382, 383, 384, 385, 386], "number": [12, 16, 17, 19, 20, 21, 28, 29, 33, 41, 42, 45, 46, 47, 48, 52, 53, 54, 77, 79, 82, 83, 84, 85, 86, 89, 90, 92, 93, 94, 97, 98, 99, 101, 103, 104, 105, 106, 107, 110, 111, 112, 113, 115, 116, 117, 125, 126, 127, 129, 135, 136, 139, 140, 144, 149, 154, 167, 168, 169, 170, 171, 172, 173, 174, 177, 178, 179, 185, 186, 188, 189, 190, 191, 193, 194, 195, 198, 199, 200, 203, 204, 206, 207, 211, 212, 214, 215, 216, 223, 231, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 256, 258, 259, 260, 261, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 277, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 310, 313, 316, 317, 320, 323, 326, 327, 329, 330, 332, 333, 334, 335, 340, 345, 346, 347, 351, 354, 356, 357, 361, 362, 363, 364, 365, 366, 369, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 392, 400, 407, 412, 414, 415], "number_of_oper": 372, "numel": 238, "numer": [35, 38, 170, 174, 190, 214, 239, 241, 259, 264, 266, 267, 268, 270, 272, 273, 274, 275, 333, 345, 361, 417], "numpi": [224, 225, 227, 228, 231, 232, 233, 234, 259, 296, 320, 331, 333, 337, 345, 361, 362, 363, 365], "numpoint": 320, "nutshel": 382, "nvidia": 302, "nwimag": 320, "nyquist": 240, "nyu": [17, 369], "nz": [81, 84, 323], "o": [177, 187, 207, 384, 390], "object": [12, 24, 57, 138, 159, 161, 168, 190, 193, 197, 198, 201, 209, 210, 213, 239, 241, 257, 278, 287, 292, 296, 297, 310, 312, 313, 315, 327, 329, 336, 345, 346, 347, 362, 364, 366, 382, 399, 400, 407], "observ": [41, 42, 48, 49, 117, 123, 124, 125, 128, 134, 138, 143, 148, 155, 157, 158, 190, 198, 350, 351, 356, 395, 396, 402, 413], "obtain": [16, 26, 45, 48, 92, 103, 197, 220, 260, 263, 268, 272, 284, 326, 329, 333, 336, 361, 364, 366, 389, 403, 408, 410], "oct": 389, "od": [264, 405], "odd": [44, 193, 224, 250, 331], "odl": 384, "odlgroup": 384, "odot": [53, 54, 187, 208, 235, 376, 377], "off": [243, 287, 402, 405, 406, 409], "offer": [334, 335, 341, 399, 406, 417], "offici": [22, 97, 105], "offlin": [12, 323, 416], "offset": [187, 202, 243], "often": [395, 396, 399, 400, 402, 407, 412, 416], "oil": [239, 333], "omega": [269, 408], "omega_": 345, "onc": [12, 90, 117, 125, 287, 335, 339, 340, 365, 385, 393, 402, 408, 417], "one": [12, 14, 16, 17, 19, 20, 21, 26, 32, 35, 37, 38, 42, 45, 46, 47, 48, 49, 56, 58, 64, 67, 74, 75, 76, 112, 114, 148, 168, 175, 176, 181, 183, 187, 190, 193, 217, 236, 238, 245, 246, 253, 268, 272, 273, 278, 286, 287, 323, 330, 333, 337, 338, 345, 364, 365, 372, 390, 399, 402, 403, 407, 412, 413, 415, 416], "ones": [14, 45, 47, 48, 49, 50, 64, 65, 67, 68, 69, 70, 72, 73, 75, 76, 133, 148, 175, 176, 179, 181, 184, 190, 192, 194, 205, 214, 238, 246, 260, 263, 309, 326, 331, 332, 335, 336, 339, 358, 361, 365, 382, 385, 395, 397, 399, 400, 404, 407, 413, 414], "ones_lik": [133, 331, 347, 363, 364], "onesid": 67, "onli": [12, 14, 17, 18, 26, 28, 32, 41, 44, 45, 47, 48, 50, 70, 72, 85, 86, 88, 89, 93, 100, 104, 105, 108, 109, 112, 113, 144, 151, 175, 178, 189, 190, 198, 214, 220, 223, 225, 228, 238, 246, 258, 259, 261, 268, 270, 276, 278, 283, 287, 292, 294, 310, 313, 323, 326, 329, 330, 333, 335, 337, 338, 339, 340, 346, 347, 351, 355, 361, 363, 365, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 384, 385, 398, 400, 405, 407, 408, 414, 417], "onlin": [12, 77, 85, 88, 89, 93, 97, 104, 105, 276, 339, 370, 384, 416], "online_measur": [12, 276, 338, 339, 351, 369, 370, 384, 416], "onto": 12, "open": [21, 232, 389, 390, 391], "openai": 77, "oper": [9, 12, 17, 19, 28, 33, 34, 35, 38, 39, 40, 41, 42, 43, 45, 47, 48, 49, 52, 53, 54, 55, 70, 78, 87, 90, 100, 102, 103, 106, 107, 108, 109, 110, 115, 117, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 141, 143, 144, 145, 148, 149, 150, 151, 163, 167, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 220, 222, 223, 224, 225, 226, 227, 228, 229, 233, 234, 235, 237, 240, 243, 245, 247, 248, 249, 251, 252, 253, 257, 260, 261, 262, 263, 268, 269, 270, 273, 276, 277, 279, 287, 300, 302, 303, 308, 310, 328, 333, 334, 337, 338, 339, 342, 343, 344, 350, 356, 363, 364, 365, 373, 374, 375, 376, 377, 378, 379, 392, 394, 396, 397, 399, 402, 403, 405, 407, 408, 411, 412, 413, 414, 417], "operatornam": [35, 92, 117, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 138, 141, 144, 145, 146, 147, 148, 155, 156, 157, 158, 160, 162, 163, 193, 263, 274, 292, 293, 320, 323, 345, 346, 347, 355, 363, 383, 385, 402, 406, 407, 410], "opnorm": 320, "opposit": [178, 213], "opt": [341, 369], "optic": 240, "optician": 333, "optim": [0, 10, 12, 81, 86, 87, 89, 90, 106, 107, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 180, 186, 190, 195, 197, 198, 207, 261, 263, 268, 269, 270, 272, 273, 277, 278, 279, 292, 293, 294, 295, 302, 303, 308, 310, 311, 314, 320, 323, 329, 332, 334, 337, 338, 339, 340, 349, 350, 351, 354, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 393, 394, 395, 397, 400, 405, 406, 408, 410, 416], "optim_build": [117, 320, 327, 334, 346, 347, 354, 355, 356, 357, 358, 393, 406, 407], "optim_iter": [117, 126, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 334, 355, 382, 383, 384, 385, 407], "optim_param": 334, "optim_step": 351, "optimalgo": 117, "optimis": [81, 323, 405], "optimiter": [117, 126, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 293, 294, 295, 355], "optimize_z": 81, "optimizer_d": 278, "optimizer_g": 278, "optimizer_step_multi_dataset": [12, 279, 323], "optin": 12, "option": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 33, 34, 41, 45, 46, 47, 52, 53, 54, 70, 77, 78, 97, 110, 117, 126, 142, 169, 170, 172, 173, 174, 175, 177, 183, 184, 186, 188, 190, 191, 192, 194, 195, 196, 198, 199, 200, 204, 206, 207, 208, 215, 216, 224, 227, 235, 237, 238, 246, 251, 252, 258, 259, 270, 276, 277, 278, 279, 292, 293, 305, 307, 308, 326, 335, 363, 365, 375, 377, 397, 400, 403, 406, 407, 416], "order": [17, 20, 34, 36, 37, 55, 67, 106, 166, 190, 207, 239, 240, 241, 260, 266, 267, 326, 330, 341, 361, 362, 363, 365, 395, 408, 413, 416], "ordinari": 408, "org": [34, 35, 38, 41, 42, 45, 52, 53, 54, 67, 75, 78, 83, 84, 89, 92, 98, 99, 169, 170, 174, 177, 181, 183, 185, 187, 206, 214, 223, 240, 248, 260, 261, 263, 272, 273, 281, 290, 310, 313, 315, 326, 329, 333, 361, 362, 364, 366, 369, 377], "organ": 389, "orginal_data_dir": 323, "orig": [341, 369, 370], "origin": [14, 20, 26, 48, 52, 56, 58, 60, 61, 77, 83, 84, 86, 88, 89, 91, 97, 101, 111, 166, 190, 192, 193, 194, 212, 220, 260, 263, 280, 284, 287, 323, 334, 337, 339, 345, 346, 347, 351, 363, 364, 365, 369, 382, 384, 411, 414], "original_data_dir": [356, 370, 372, 373, 374, 376, 377, 382, 383], "original_data_hom": 375, "ortho": [193, 320], "orthogon": [112, 177, 193, 230, 272, 313, 404], "orthograph": 397, "orthonorm": [112, 151, 180, 203], "osa": 326, "other": [12, 16, 23, 32, 34, 40, 41, 42, 43, 45, 48, 51, 70, 80, 103, 112, 181, 186, 189, 190, 195, 198, 251, 276, 277, 279, 287, 320, 326, 328, 330, 338, 363, 384, 395, 403, 405, 407, 412, 415, 417], "otherwis": [12, 14, 34, 35, 38, 41, 42, 50, 52, 67, 88, 92, 117, 126, 172, 175, 177, 183, 184, 189, 190, 192, 193, 196, 205, 207, 208, 218, 219, 221, 224, 225, 226, 227, 228, 229, 235, 258, 270, 271, 279, 327, 328, 337, 340, 354, 355, 357, 358, 371, 372, 373, 374, 376, 377, 381, 382, 383, 385, 386], "otimes_": 333, "our": [12, 64, 68, 69, 70, 76, 77, 97, 103, 156, 280, 320, 323, 332, 338, 339, 341, 346, 347, 355, 361, 365, 369, 375, 382, 383, 385, 390, 391, 393, 404, 412, 414], "ourselv": 336, "out": [20, 35, 38, 177, 232, 268, 272, 273, 287, 323, 330, 333, 363, 365, 369, 372, 393], "out_channel": [77, 85, 88, 89, 93, 97, 98, 99, 103, 110, 295, 323, 334, 339, 340, 355, 358, 370, 372, 373, 374, 375, 376, 377], "out_siz": 222, "outer": 272, "output": [12, 23, 28, 32, 33, 38, 44, 48, 57, 77, 79, 81, 82, 84, 85, 88, 89, 90, 93, 97, 98, 99, 103, 108, 109, 110, 111, 112, 117, 124, 125, 126, 128, 139, 168, 169, 170, 173, 174, 175, 178, 180, 183, 192, 193, 196, 200, 203, 205, 206, 208, 209, 211, 212, 213, 214, 222, 223, 224, 225, 226, 227, 228, 229, 233, 234, 235, 236, 262, 271, 276, 283, 284, 287, 292, 293, 339, 345, 346, 347, 355, 356, 357, 358, 363, 365, 369, 375, 382, 383, 397, 400, 408], "output_s": [84, 323], "output_shap": [211, 212], "outsid": [310, 333], "over": [12, 23, 30, 45, 48, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 92, 95, 106, 107, 111, 126, 130, 151, 178, 193, 214, 230, 287, 320, 328, 363, 365, 369, 375, 397, 404, 408, 412, 414], "overal": 188, "overcomplet": [113, 172, 404], "overfit": [86, 329], "overlaid": 312, "overlap": [32, 44, 88, 90, 125, 140, 202, 205, 213, 369], "overlap2prob": 337, "overlap_img": 337, "overlin": [197, 261, 263, 363, 365], "overload": 330, "overrid": [12, 19, 26, 44, 56, 58, 70, 78, 81, 95, 105, 168, 188, 279, 280, 287, 339, 416], "overridden": [70, 81], "overriden": 57, "oversampl": [203, 211, 212, 320, 334], "oversampling_ratio": 334, "overview": 188, "overwrit": [28, 145, 185, 186, 191, 199, 200, 216, 276, 376], "overwrite_exist": [28, 339], "overwritten": [145, 180, 190, 198], "own": [16, 19, 26, 28, 48, 70, 77, 85, 88, 89, 93, 97, 104, 105, 180, 182, 186, 190, 195, 198, 238, 277, 302, 305, 310, 323, 335, 342, 343, 344, 355, 384, 394, 395, 412, 417], "ozan": 384, "p": [45, 47, 53, 54, 67, 74, 90, 117, 125, 147, 151, 191, 194, 199, 200, 202, 206, 235, 261, 262, 264, 269, 270, 273, 287, 320, 327, 331, 345, 347, 354, 357, 361, 364, 365, 366, 396, 401, 406, 407, 408, 414], "p001": 14, "p_": [59, 60, 61, 62, 63, 147, 323, 351, 361, 366, 402, 408], "p_0": 408, "p_i": [90, 125, 140, 351, 407], "p_ix": [90, 125], "p_p": 345, "p_t": [262, 264, 269, 270, 274, 275, 364, 408], "p_x": [59, 60, 323, 351, 402], "p_y": [61, 62, 63], "p_z": [351, 402], "packag": [2, 7, 80, 203, 280, 341, 365, 369, 395, 400, 407, 408, 410, 413, 414, 417], "pad": [14, 17, 26, 95, 110, 112, 140, 175, 176, 178, 183, 190, 196, 202, 203, 208, 211, 212, 224, 225, 226, 227, 228, 229, 235, 252, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 320, 323, 326, 331, 333, 399, 412], "pad_input": 112, "pad_siz": 14, "pad_to_s": 17, "pad_zero": 202, "padding_mod": 284, "page": [17, 407, 411], "paig": [173, 174], "paint": 188, "pair": [17, 19, 23, 28, 29, 45, 48, 192, 194, 251, 276, 323, 328, 338, 339, 340, 372, 385, 412, 413], "pajot": [61, 323], "pan": [23, 64, 74, 100, 196, 281, 290, 370, 409, 414, 417], "pan_lr": 74, "panchromat": [23, 74, 100, 338, 412], "pannet": [338, 409], "pansharpen": [23, 64, 74, 100, 281, 290, 336, 338, 370, 401], "pantiltrot": [341, 370, 417], "papadaki": 357, "paper": [20, 45, 47, 60, 61, 77, 85, 86, 89, 94, 97, 103, 111, 155, 178, 191, 196, 235, 263, 280, 284, 323, 327, 329, 331, 338, 351, 354, 362, 366, 370, 384], "paper_fil": 47, "parallel": [80, 214, 222, 223, 327, 328, 330, 340, 354, 355, 357, 358, 364, 371, 372, 373, 374, 376, 377, 381, 382, 383, 385, 386, 415, 417], "parallel_comput": [214, 222, 223], "parallel_dim": [169, 170, 172, 173, 174], "param": [12, 14, 19, 28, 41, 42, 103, 166, 180, 184, 189, 190, 243, 244, 245, 252, 253, 268, 280, 287, 315, 318, 339, 355, 357, 361, 384, 400, 412, 416], "param_nam": [247, 251], "param_valu": [247, 251], "paramat": 45, "paramet": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 318, 320, 323, 327, 329, 332, 334, 335, 337, 338, 339, 340, 345, 346, 347, 350, 354, 355, 356, 357, 361, 363, 364, 365, 366, 369, 370, 375, 385, 397, 401, 410, 411, 414, 416, 417], "parameter": 185, "parameteris": 281, "parametris": [111, 288, 289, 291], "params_algo": [117, 126, 154, 293, 294, 295, 314, 320, 327, 332, 334, 346, 347, 354, 355, 356, 357, 358, 381, 382, 383, 384, 385, 386, 393, 406, 407, 410], "params_algo_new": [332, 385], "params_dict": [247, 251], "params_pc": [208, 326], "parent": [17, 180, 190, 198, 293], "pari": 389, "part": [13, 26, 85, 114, 184, 192, 205, 336, 339, 410], "partial": [18, 70, 123, 131, 148, 190, 198, 292, 370, 410], "particular": [107, 156, 203, 214, 320, 326, 333, 356, 410, 416], "pass": [12, 32, 33, 36, 37, 39, 41, 42, 44, 45, 46, 48, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 81, 82, 83, 91, 92, 94, 98, 99, 101, 109, 111, 154, 158, 172, 175, 179, 183, 189, 192, 194, 212, 231, 236, 238, 242, 246, 250, 251, 259, 277, 279, 287, 292, 293, 294, 295, 305, 315, 318, 323, 326, 339, 341, 375, 390, 400, 404, 410, 415, 417], "pastur": 177, "patch": [12, 24, 66, 88, 90, 101, 105, 123, 125, 135, 139, 140, 144, 145, 180, 182, 186, 189, 190, 191, 195, 198, 214, 216, 303, 308, 310, 353, 394, 404, 406, 407, 411], "patch_dimens": 125, "patch_forward": 88, "patch_norm": 105, "patch_siz": [24, 88, 90, 105, 125, 139, 140, 350, 351], "patchdataset": 351, "patchgan": [101, 323, 402], "patchgandiscrimin": [279, 323, 402], "patchnr": 407, "patchnr_batch_s": 351, "patchnr_dataload": 351, "patchnr_epoch": 351, "patchnr_learning_r": 351, "patchnr_lodopab_smal": [139, 351], "patchnr_lodopab_small2": 351, "patchnr_prior": 351, "patchnr_subnets": 351, "patchprior": [351, 407], "path": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 77, 85, 88, 89, 90, 93, 97, 104, 105, 125, 139, 300, 305, 306, 307, 310, 311, 313, 314, 323, 334, 369, 375, 390, 397, 412], "pathlib": [14, 17, 20, 23, 26, 300, 305, 306, 310, 313, 314, 323, 327, 328, 332, 334, 340, 345, 346, 347, 354, 355, 356, 357, 358, 369, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386], "patient": [21, 339, 412], "patient_id": 21, "pattern": [122, 181, 205, 207, 326, 333, 336, 337, 354, 390, 413], "pc_gener": [208, 252, 326], "pd": [138, 156], "pdf": [34, 47, 78, 121, 245, 248, 253, 356, 362, 364], "pdnet": 410, "pdnet_dualblock": [384, 410], "pdnet_primalblock": [384, 410], "pdnetdatafid": 384, "pdnetiter": 384, "pdnetprior": 384, "peak": [73, 206, 320, 331, 334], "penal": [117, 327, 407], "per": [12, 17, 19, 20, 21, 26, 32, 47, 77, 85, 88, 89, 92, 97, 104, 111, 112, 125, 148, 166, 181, 190, 206, 207, 210, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 315, 318, 329, 331, 339, 341, 362, 366, 371, 372, 382, 408, 411, 416], "percentag": [26, 268, 272, 273, 281, 288, 289, 291], "percept": [402, 414], "perceptu": [66, 323, 395, 405, 414], "pereyra": 272, "perfect": 256, "perform": [3, 12, 13, 20, 23, 25, 27, 28, 30, 32, 35, 38, 44, 45, 48, 52, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 86, 88, 103, 111, 117, 118, 121, 126, 138, 145, 154, 168, 175, 176, 178, 179, 184, 192, 193, 194, 202, 203, 208, 214, 222, 223, 224, 225, 226, 227, 228, 229, 230, 235, 259, 263, 264, 271, 274, 275, 279, 283, 284, 286, 287, 292, 293, 294, 295, 320, 327, 329, 338, 339, 340, 345, 346, 347, 354, 358, 363, 364, 365, 369, 375, 381, 384, 385, 395, 397, 399, 402, 404, 405, 407, 410, 413, 414, 417], "period": [268, 272, 273, 284], "permut": 320, "persist": 326, "persist_prev": 236, "perspect": [281, 290, 338, 370, 417], "pf": 240, "pgd": [117, 126, 138, 154, 162, 292, 293, 294, 295, 332, 334, 346, 347, 357, 358, 381, 382, 383, 385, 406, 407, 410], "pgditer": [117, 126, 357, 358, 382, 383], "pgl": 370, "phantom": 334, "phase": [32, 44, 85, 87, 114, 115, 117, 123, 129, 133, 138, 141, 144, 145, 154, 159, 163, 166, 167, 197, 198, 201, 202, 204, 212, 240, 241, 250, 255, 256, 302, 303, 308, 310, 326, 342, 343, 344, 369, 394, 401, 404, 407], "phase2phas": [44, 250, 369], "phase2phaseloss": [32, 48, 250, 369, 413], "phase2phasesplittingmaskgener": [236, 401], "phase_retriev": [166, 167, 197, 201, 202, 255, 256, 334, 337], "phaseless": [334, 337], "phaseretriev": [115, 116, 163, 201, 204, 212, 401], "phenomenon": 329, "phi": [45, 78, 118, 119, 120, 121, 137, 144, 166, 356, 372, 403, 407], "phi_": [340, 372], "photograph": 20, "photon": [16, 135, 136, 191, 198, 206, 302, 342, 343, 344, 394, 401], "phyic": 355, "physic": [0, 12, 14, 17, 19, 28, 32, 33, 34, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 52, 53, 54, 61, 74, 78, 81, 86, 90, 100, 102, 108, 109, 111, 115, 116, 117, 123, 125, 126, 127, 129, 133, 138, 143, 148, 153, 155, 156, 157, 158, 159, 161, 163, 167, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 260, 262, 263, 268, 269, 270, 272, 273, 276, 277, 279, 292, 293, 295, 320, 323, 326, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 345, 346, 347, 350, 351, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 393, 395, 396, 398, 399, 401, 406, 407, 410, 412, 413, 416], "physicist": 333, "physics1": [49, 148, 190, 400], "physics2": [49, 148, 190, 335, 400], "physics3": 400, "physics4": 400, "physics_gener": [12, 28, 41, 42, 276, 323, 339, 412, 416], "physics_i": 49, "physics_list": [209, 210], "physicsgener": [12, 28, 41, 42, 48, 237, 238, 242, 244, 247, 249, 252, 254, 276, 400], "pi": [212, 214, 220, 320, 334, 337, 358], "pi_": 273, "pick": [283, 330], "pickl": 17, "piecewis": [280, 413, 417], "pil": [13, 15, 16, 18, 22, 25, 27, 281, 288, 289, 290, 291, 330], "pinhol": [239, 288, 289, 291, 333, 417], "pinhole_radiu": 239, "pinv": [78, 375, 403], "pip": [80, 112, 113, 280, 344, 390, 393], "pixel": [15, 25, 44, 73, 75, 77, 79, 85, 93, 97, 103, 175, 176, 178, 181, 183, 188, 189, 190, 193, 198, 206, 207, 214, 217, 223, 238, 239, 241, 246, 283, 287, 320, 323, 331, 332, 334, 337, 340, 341, 347, 355, 362, 365, 366, 370, 375, 376, 377, 382, 383, 385, 399, 400, 408, 412, 413, 414], "pixel_s": [240, 241, 333], "pixel_spac": [214, 223], "pixel_std": [77, 97], "pixelshuffl": 105, "pixelshuffledirect": 105, "pixelsize_xi": [239, 333], "pixelsize_z": [239, 333], "pixelsuffl": [85, 93], "pixelwis": [48, 189, 238, 246, 287, 365, 369, 401], "pkl": [14, 17], "place": 166, "placehold": [29, 74], "placeholderdataset": 279, "plai": [85, 87, 89, 107, 117, 118, 121, 122, 123, 141, 142, 144, 145, 146, 154, 176, 180, 190, 195, 198, 200, 220, 263, 272, 273, 276, 302, 303, 308, 310, 311, 334, 357, 360, 361, 366, 386, 392, 394, 395, 404, 405, 406, 407, 410], "plain": [260, 263], "plan": 338, "plane": [178, 214, 241, 326, 333, 417], "plausibl": 396, "playback": 20, "pleas": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 17, 188, 277, 287, 320, 390, 391], "plot": [12, 117, 208, 276, 279, 292, 293, 311, 312, 313, 314, 315, 318, 320, 323, 326, 327, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 345, 350, 357, 363, 364, 365, 369, 370, 371, 372, 373, 374, 376, 381, 384, 385, 393, 395, 406, 407], "plot_convergence_metr": [12, 276, 320, 327, 346, 347, 354, 357, 358, 384], "plot_curv": [320, 346, 347, 355, 356, 358, 397], "plot_imag": [12, 276, 323, 327, 338, 339, 354, 357, 369, 371, 372, 373, 374, 375, 376, 377, 384, 385], "plot_inset": [320, 397], "plot_interv": 12, "plot_kwarg": [315, 318], "plot_measur": [12, 276], "plot_ortho3d": [333, 339, 397], "plot_paramet": [382, 383, 386, 397], "plot_video": [339, 369, 397], "plt": [310, 331, 334, 337, 345, 363, 369], "plu": 369, "plug": [85, 87, 89, 107, 117, 118, 121, 122, 123, 141, 142, 144, 145, 146, 154, 176, 180, 190, 195, 198, 200, 220, 263, 272, 273, 276, 302, 303, 308, 310, 311, 334, 357, 360, 361, 365, 366, 386, 392, 394, 395, 404, 405, 406, 407, 410], "pm": 283, "png": [15, 16, 18, 22, 25, 27, 310, 326, 330, 334, 336, 337, 350, 356, 358, 363, 364, 365, 393, 406], "pnp": [19, 28, 35, 85, 87, 89, 117, 122, 123, 133, 138, 144, 145, 147, 154, 164, 165, 176, 180, 186, 189, 190, 195, 198, 207, 214, 263, 268, 273, 276, 295, 302, 303, 305, 306, 308, 310, 311, 332, 344, 359, 360, 367, 368, 381, 385, 393, 394, 395, 405, 407, 408, 410, 411], "pock": [12, 19, 28, 39, 51, 87, 106, 107, 112, 123, 127, 141, 144, 145, 154, 156, 180, 189, 190, 198, 276, 293, 294, 295, 302, 305, 332, 344, 384, 387, 388, 394, 407], "poential": 145, "point": [35, 117, 126, 128, 138, 168, 190, 239, 248, 249, 259, 270, 292, 293, 320, 364, 366, 381, 390, 407, 408, 410, 415], "poisson": [16, 45, 47, 49, 53, 54, 87, 89, 117, 118, 121, 123, 135, 136, 142, 143, 144, 145, 146, 148, 154, 176, 180, 190, 191, 195, 198, 199, 200, 206, 220, 244, 302, 303, 308, 310, 311, 331, 336, 344, 351, 359, 360, 373, 374, 376, 377, 394, 413], "poissongaussiannois": [336, 401], "poissonlikelihood": [121, 148, 356, 363, 407], "poissonnois": [45, 47, 49, 143, 148, 206, 336, 356, 373, 374, 376, 401], "polynomi": [240, 326, 333], "pool": [85, 93, 95], "poor": 334, "popul": 17, "popular": [7, 45, 64, 92, 178, 338, 412, 413, 414], "pos_weight": 94, "posed": 413, "posit": [53, 54, 77, 88, 92, 94, 97, 105, 142, 174, 200, 202, 277, 283, 287, 341, 363, 376, 377, 406, 407], "possibl": [73, 88, 89, 117, 175, 196, 211, 212, 292, 294, 320, 326, 333, 334, 339, 381, 390, 400, 405, 406, 407, 414, 415], "possibli": [41, 42, 53, 102, 187, 268, 351, 361, 402, 405, 413], "post": [340, 362, 366, 414], "posterior": [85, 87, 88, 97, 102, 123, 144, 153, 180, 189, 190, 198, 258, 259, 260, 261, 262, 263, 264, 266, 268, 269, 270, 272, 273, 274, 275, 303, 308, 310, 318, 344, 361, 362, 365, 366, 367, 368, 394], "posterior_sampl": 364, "posterior_sample_diffunet": 364, "posterior_sample_drunet": 364, "posterior_sample_ve_vp": 364, "posterior_trajectori": 364, "posterior_trajectory_vp": 364, "posteriordiffus": [269, 364, 408], "posteriori": [147, 408], "postiv": [121, 137], "potenti": [94, 109, 118, 119, 120, 121, 123, 124, 137, 145, 148, 154, 161, 294, 295, 329, 356, 357, 383, 416], "pow": 361, "power": [35, 38, 74, 88, 167, 190, 207, 335, 358, 363], "pp": [106, 107, 122, 173, 354], "pr": 390, "practic": [104, 151, 190, 320, 370, 382], "pre": [66, 77, 97, 103, 320, 334, 364, 365, 406, 410, 414], "precis": [92, 117, 130, 132, 190, 239, 240, 241, 320, 345, 351, 407], "precon": 174, "precond": 269, "precondit": [262, 269], "precondition": [169, 174, 269], "preconula": 361, "predefin": [1, 14, 126, 190, 198, 374, 392], "predefined_noise_model": 374, "prefer": [20, 111, 390, 416], "prefix": 297, "pregener": 26, "prepar": [330, 390, 412], "preprocess": [70, 163, 167], "present": [14, 339, 371, 372, 373], "preserv": [275, 320, 364, 408, 417], "pretrain": [12, 47, 60, 61, 63, 77, 85, 88, 89, 90, 93, 97, 103, 104, 105, 122, 125, 139, 260, 263, 323, 334, 338, 339, 350, 351, 354, 355, 356, 357, 358, 362, 363, 364, 366, 369, 370, 371, 372, 373, 374, 375, 376, 381, 386, 392, 395, 404, 405, 406, 408, 414, 415], "pretrained_noise_level": 105, "prevent": [333, 369], "previou": [117, 126, 155, 156, 157, 236, 268, 361, 363, 376, 400, 415], "previous": [28, 345, 408], "primal": [12, 39, 51, 87, 89, 98, 99, 106, 107, 117, 123, 126, 133, 138, 141, 144, 145, 154, 156, 164, 165, 180, 186, 190, 195, 198, 207, 214, 293, 295, 302, 303, 308, 310, 311, 344, 359, 360, 385, 387, 388, 394, 406, 407, 410], "primari": [106, 107], "princip": [163, 167], "print": [12, 13, 15, 16, 18, 20, 21, 22, 23, 25, 27, 32, 35, 38, 44, 45, 47, 48, 86, 106, 107, 117, 166, 167, 188, 190, 239, 240, 241, 244, 247, 248, 251, 252, 254, 260, 261, 263, 265, 268, 272, 273, 279, 296, 302, 320, 326, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 346, 347, 350, 351, 355, 356, 358, 361, 362, 366, 369, 371, 372, 373, 374, 376, 377, 385, 399, 400, 407, 412], "printout": 20, "printout_first": 20, "printout_index": 20, "prior": [12, 19, 24, 28, 32, 39, 51, 82, 85, 86, 90, 102, 107, 117, 122, 123, 125, 126, 130, 132, 133, 135, 138, 139, 140, 141, 144, 146, 147, 149, 150, 151, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 176, 177, 178, 180, 182, 186, 189, 190, 191, 195, 198, 214, 216, 220, 236, 262, 268, 272, 273, 274, 275, 276, 293, 294, 295, 300, 302, 305, 306, 308, 310, 311, 314, 332, 334, 342, 343, 345, 348, 349, 350, 353, 354, 355, 356, 358, 369, 371, 381, 382, 385, 386, 387, 388, 393, 394, 395, 396, 404, 405, 406, 408, 410, 411], "prior_new": [332, 385], "priori": 351, "priviledg": 20, "prob": [247, 326], "probabilist": 262, "probability_mask": [340, 385], "probabl": [53, 54, 77, 97, 177, 189, 207, 245, 247, 253, 340, 351, 376, 385], "probail": 351, "probe": [201, 202, 255, 256], "probe_radiu": [255, 337], "problem": [12, 19, 23, 27, 28, 34, 39, 41, 47, 51, 56, 58, 59, 60, 61, 62, 63, 81, 83, 84, 86, 87, 89, 90, 91, 101, 102, 106, 107, 110, 112, 113, 117, 118, 121, 122, 123, 125, 126, 138, 142, 144, 145, 146, 154, 172, 175, 176, 180, 182, 183, 187, 188, 190, 195, 198, 200, 213, 220, 248, 249, 251, 260, 263, 269, 270, 278, 279, 293, 300, 302, 303, 308, 310, 311, 315, 318, 324, 325, 328, 329, 334, 335, 338, 340, 341, 344, 350, 351, 359, 360, 362, 364, 369, 371, 372, 377, 381, 382, 385, 390, 392, 394, 395, 397, 400, 402, 403, 404, 405, 406, 407, 409, 410, 413, 414], "proce": 126, "procedur": [110, 332, 361, 385], "proceed": [47, 122, 354], "process": [12, 23, 26, 28, 32, 44, 80, 107, 108, 114, 127, 151, 177, 190, 198, 204, 212, 213, 248, 259, 263, 270, 271, 274, 275, 340, 377, 395, 399, 404, 408, 412, 413, 414], "prod": [177, 334], "prod_": [211, 212, 365], "produc": [29, 109, 179, 190, 196, 198, 209, 210, 257, 287], "product": [38, 180, 190, 197, 198, 208, 235, 287, 341, 361, 399, 417], "product_convolution2d": [326, 399], "productconvolutionblurgener": [208, 326, 401], "progress": [12, 28, 81, 86, 168, 169, 170, 173, 174, 259, 260, 261, 263, 265, 268, 270, 272, 273, 276, 279, 340, 365, 371, 372, 373, 374, 376, 377, 381, 382, 383, 384, 385, 386], "progress_bar": [12, 351], "prohibit": 177, "proj": 128, "project": [78, 98, 127, 128, 129, 203, 214, 222, 223, 268, 272, 273, 281, 287, 288, 289, 290, 291, 320, 341, 370, 382, 383, 390, 397, 399, 411, 417], "promot": [396, 413], "propag": [34, 41, 43, 333, 373], "properli": [47, 259, 320, 330, 408], "properti": [341, 400, 417], "proport": [17, 52, 53, 54, 112, 243, 417], "propos": [35, 38, 47, 74, 81, 83, 84, 91, 92, 101, 103, 125, 158, 262, 320, 345, 350, 351, 365, 369, 370, 371, 383], "propto": [147, 366, 406, 408], "protocol": 100, "prototyp": 79, "provid": [2, 5, 6, 10, 11, 12, 14, 17, 20, 21, 23, 26, 28, 45, 47, 56, 57, 58, 59, 60, 61, 62, 63, 87, 92, 102, 112, 139, 151, 172, 175, 178, 179, 180, 184, 186, 191, 192, 193, 194, 195, 196, 199, 200, 205, 213, 214, 215, 216, 217, 232, 251, 259, 264, 270, 274, 275, 276, 277, 279, 287, 310, 315, 318, 320, 326, 329, 333, 334, 335, 336, 338, 339, 346, 347, 354, 355, 356, 357, 358, 361, 364, 369, 371, 395, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 412, 414, 416, 417], "prox": [123, 127, 128, 129, 130, 131, 132, 133, 134, 136, 141, 143, 144, 145, 148, 149, 150, 151, 155, 156, 157, 158, 160, 162, 163, 176, 184, 190, 192, 205, 263, 320, 345, 346, 347, 355, 363, 382, 383, 384, 385, 406, 407], "prox_conjug": [123, 144, 148, 355], "prox_d": [123, 148, 153], "prox_d_conjug": [123, 148, 153], "prox_l0": 112, "prox_l1": 112, "prox_l2": [12, 52, 180, 183, 190, 276, 335, 400], "prox_tau_fx": 107, "proxim": [106, 107, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 141, 143, 144, 145, 148, 149, 150, 151, 154, 162, 180, 183, 189, 190, 272, 293, 294, 295, 327, 335, 345, 346, 347, 355, 357, 358, 363, 384, 386, 406, 407, 410], "pseudo": [12, 52, 78, 176, 184, 189, 192, 197, 204, 205, 214, 258, 259, 320, 323, 326, 335, 338, 364, 375, 400, 405], "pseudoinvers": [12, 78, 180, 188, 190, 198, 403], "pseudorandom": [177, 186, 189, 191, 195, 199, 200, 204, 206, 207, 215, 216, 251, 259], "psf": [175, 190, 198, 239, 240, 241, 248, 249, 251, 252, 302, 310, 313, 320, 326, 342, 343, 344, 394], "psf_coll": 333, "psf_confoc": 333, "psf_gener": [208, 252, 326], "psf_grid": [208, 326], "psf_log": 320, "psf_size": [208, 239, 240, 241, 247, 248, 249, 251, 252, 326, 333, 400], "psf_size_xi": 333, "psf_size_z": 333, "psfgener": [239, 240, 241, 248, 252, 326, 333], "psi": [112, 113, 151, 345, 347, 407], "psi_": 345, "psi_1": 113, "psi_2": 113, "psi_i": 320, "psi_l": 113, "psnr": [12, 81, 117, 190, 260, 263, 276, 292, 293, 320, 323, 327, 329, 334, 339, 340, 345, 346, 347, 350, 351, 354, 355, 356, 357, 358, 361, 362, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 414], "psnr_epll": 351, "psnr_fbp": 351, "psnr_ob": 350, "psnr_patchnr": 351, "psnr_recon": 350, "psnr_std": [323, 327, 340, 354, 357, 369, 371, 372, 373, 374, 375, 376, 377, 384, 385], "pt": [17, 90, 125, 139, 350, 351, 364, 365], "pth": [12, 103, 177, 189, 197, 204, 207, 323, 332, 334, 338, 339, 354, 355, 366, 369, 370, 371, 372, 373, 374, 375, 376, 385], "ptwt": [112, 113, 332], "ptychographi": [123, 129, 144, 166, 197, 198, 202, 255, 256, 302, 303, 308, 310, 342, 343, 344, 394, 401], "ptychographylinearoper": [201, 401], "public": [121, 356, 390], "pula": 361, "pula_mean": 361, "pula_var": 361, "pulaiter": 361, "pull": 390, "pupil": [239, 240, 241, 326, 333], "pupil_s": [239, 240, 241], "pure": [88, 188, 263, 281, 287, 338, 370], "purpos": [29, 332, 338], "push": 351, "put": [13, 15, 16, 18, 22, 25, 26, 27, 236], "pxxx": 14, "py": [320, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 345, 346, 347, 349, 350, 351, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 381, 382, 383, 384, 385, 386, 388, 394], "pyiqa": [66, 71, 354], "pyplot": [331, 334, 337, 345, 363], "pytest": 390, "python": [80, 320, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 347, 350, 351, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 390], "python3": [341, 369], "pytorch": [77, 83, 84, 85, 88, 89, 93, 95, 97, 104, 105, 112, 113, 177, 204, 207, 251, 326, 327, 328, 329, 331, 332, 333, 336, 340, 341, 345, 346, 347, 354, 355, 356, 357, 358, 365, 366, 371, 372, 373, 374, 376, 377, 381, 382, 383, 384, 385, 386, 399, 412, 415], "pywavelet": 112, "pywt": 151, "q": [59, 60, 61, 62, 63, 74, 126, 323, 365, 402], "qk": 105, "qk_scale": 105, "qkv_bia": 105, "qnr": [338, 414], "qquad": [117, 126, 138, 364, 407], "qr": 172, "quad": [52, 54, 61, 117, 198, 202, 274, 275, 323, 345, 351, 364, 402, 406, 407], "quadrat": [90, 122, 125, 154, 160, 263, 293, 294, 295, 350, 351, 354, 369, 371, 381, 407], "qualit": 405, "qualiti": [71, 74, 88, 178, 323, 340, 384, 385, 402, 405], "quantif": [35, 87, 89, 123, 133, 144, 145, 147, 180, 186, 189, 190, 195, 198, 268, 273, 302, 308, 310, 344, 367, 368, 392, 394], "quantifi": 366, "quantiti": [56, 58, 190, 333], "quantiz": [190, 198], "queri": [20, 105], "question": [390, 391], "quick": [26, 323, 330, 339], "quickbird": 23, "quickli": [397, 405], "quickstart": 12, "quit": 320, "r": [35, 38, 43, 45, 47, 48, 52, 53, 54, 78, 85, 93, 95, 100, 106, 117, 127, 128, 142, 143, 144, 177, 180, 189, 203, 206, 276, 320, 330, 331, 333, 335, 355, 357, 361, 363, 365, 373, 376, 377, 384, 385, 395, 402, 403, 406, 407, 408], "r2": 106, "r2d2": 320, "r2r": [12, 19, 28, 39, 45, 78, 87, 102, 110, 180, 182, 185, 186, 190, 195, 198, 200, 300, 302, 344, 378, 379, 394], "r2rloss": [374, 413], "r_": [206, 331, 361, 372], "rachford": [154, 157, 293, 294, 295, 386, 407], "radford": [83, 84], "radio": [117, 123, 133, 144, 145, 151, 154, 190, 198, 203, 299, 301, 303, 310, 311, 312, 321, 322, 344, 394, 401], "radiointerferometri": [320, 401], "radiu": [127, 128, 129, 202, 214, 223, 239, 255, 256, 332, 385], "radon": [214, 222, 336, 351, 399], "rai": [214, 223], "rais": [66, 71, 145], "ramp": [214, 222], "rand": [32, 44, 74, 108, 109, 178, 186, 188, 191, 199, 200, 215, 216, 239, 241, 287, 310, 313, 315, 318, 333, 336, 397, 400, 417], "rand_lik": [184, 195], "randn": [35, 38, 130, 177, 180, 182, 184, 189, 190, 192, 194, 196, 204, 205, 207, 214, 217, 281, 288, 289, 290, 291, 295, 400, 404, 410], "randn_lik": [195, 259, 320, 334, 337, 361, 363, 365, 399], "random": [12, 17, 28, 29, 32, 33, 34, 41, 42, 44, 46, 48, 52, 53, 54, 77, 85, 86, 87, 88, 89, 92, 93, 97, 104, 105, 117, 123, 130, 133, 138, 139, 141, 144, 145, 154, 159, 166, 167, 177, 178, 179, 180, 182, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 204, 205, 206, 207, 211, 212, 214, 215, 216, 236, 237, 238, 240, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 258, 259, 260, 263, 266, 267, 268, 270, 274, 275, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 302, 303, 308, 310, 316, 320, 323, 326, 327, 328, 329, 333, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 354, 355, 356, 357, 358, 364, 365, 366, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 385, 386, 394, 400, 401, 402, 404, 408, 413, 416, 417], "random_lat": 81, "random_phantom": 384, "random_split": [323, 370], "random_split_ratio": 238, "randomappli": 287, "randomcrop": [13, 15, 16, 18, 22, 25, 27, 340, 381, 385, 386], "randomeras": 341, "randomli": [12, 14, 17, 28, 32, 41, 42, 46, 48, 92, 140, 236, 237, 238, 243, 245, 246, 247, 251, 253, 270, 276, 280, 282, 283, 285, 286, 287, 326, 330, 333, 339, 340, 365, 369, 375, 385, 412, 417], "randomlossschedul": 413, "randommaskgener": [14, 184, 192, 194, 205, 245, 336, 400, 401], "randomphantomdataset": 384, "randomphaseretriev": [334, 401], "randon": [41, 42], "rang": [16, 25, 35, 38, 66, 71, 88, 103, 105, 126, 198, 206, 263, 265, 283, 287, 302, 320, 326, 332, 334, 335, 337, 339, 341, 342, 343, 344, 345, 347, 351, 363, 365, 369, 370, 371, 372, 382, 384, 385, 394, 407, 408, 415, 417], "rangl": [118, 144], "rapidli": 354, "rare": [32, 236, 369], "rate": [12, 81, 86, 104, 105, 243, 323, 329], "rather": [147, 203, 332, 336, 363, 408, 414], "ratio": [48, 73, 100, 105, 178, 196, 238, 241, 246, 265, 320, 331, 334, 336, 375], "raw": [13, 14, 15, 16, 17, 18, 21, 22, 23, 25, 27, 193, 330, 369, 371, 412], "raw_hf_train_dataset": 330, "rawfastmritrain": 339, "rcparam": 363, "re": [45, 61, 62, 63, 74, 77, 86, 97, 334, 336, 338], "re_init": 86, "reach": [117, 126, 172, 243, 327, 355, 357], "read": [17, 320, 330, 406], "reader": [320, 415], "readi": [320, 323, 326, 333, 345, 365, 393], "readili": [320, 345, 363, 365], "readm": 17, "real": [16, 19, 20, 22, 31, 56, 57, 58, 101, 114, 184, 192, 193, 194, 203, 205, 226, 229, 320, 334, 336, 339, 404, 412], "real_fft": [225, 226, 228, 229], "real_imag": 114, "real_label": 57, "real_project": [203, 320], "realis": [48, 375], "realist": 411, "realiz": [45, 48, 239, 240, 241, 320, 346, 347, 363], "reason": [20, 320, 345], "rec": [335, 381, 382, 383, 386, 402], "rec601": 179, "recal": [92, 293, 385, 410], "receiv": [208, 372], "reciproc": 287, "recognit": [122, 354], "recommend": [86, 103, 107, 151, 177, 190, 207, 264, 270, 274, 275, 329, 335, 336, 340, 363, 370, 373, 374, 375, 376, 377, 385, 407, 415], "recomposit": 112, "recon": [17, 320, 346, 347, 355, 356, 358, 365, 382, 383], "recon_epl": 351, "recon_patchnr": 351, "reconstruct": [1, 2, 4, 5, 12, 17, 19, 25, 26, 28, 32, 33, 34, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 70, 74, 78, 81, 82, 85, 86, 87, 88, 96, 102, 105, 108, 109, 110, 111, 116, 117, 123, 125, 133, 138, 141, 144, 145, 154, 159, 166, 167, 178, 180, 184, 186, 189, 190, 191, 192, 193, 194, 195, 197, 198, 202, 203, 204, 205, 213, 214, 223, 236, 237, 238, 245, 250, 251, 253, 260, 263, 265, 268, 272, 273, 276, 277, 279, 293, 300, 302, 303, 305, 308, 310, 315, 320, 323, 339, 341, 342, 343, 344, 346, 347, 350, 355, 356, 357, 358, 361, 363, 366, 367, 368, 370, 375, 378, 379, 381, 382, 383, 384, 386, 394, 396, 399, 402, 403, 404, 408, 409, 410, 412, 413, 414, 416], "reconstructor": [12, 44, 47, 48, 78, 81, 86, 87, 108, 117, 260, 261, 263, 270, 277, 403, 405, 408], "reconstrunct": 115, "record": 20, "recorrupt": 45, "recorrupted2recorrupt": [45, 374], "recov": [188, 281, 320, 334, 338, 341, 346, 347, 364, 369, 395, 405], "recoveri": 338, "recreat": 180, "rectangular": 172, "red": [19, 28, 93, 117, 123, 133, 144, 145, 147, 154, 183, 186, 190, 195, 198, 276, 302, 305, 306, 331, 344, 356, 359, 360, 394, 395, 407], "redefin": [320, 346, 347, 384], "reduc": [35, 38, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 90, 100, 125, 151, 184, 193, 320, 329, 363, 365, 371, 372, 373, 374, 375, 376, 377, 383, 414], "reduced_alpha_cumprod": 363, "reduced_batchs": [35, 38], "reduct": [12, 35, 38, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 105, 209, 383, 414], "redund": [20, 345], "refer": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 32, 34, 39, 41, 44, 48, 70, 71, 74, 166, 191, 211, 212, 323, 338, 351, 363, 396, 402, 411], "refin": 103, "reflect": [92, 175, 183, 196, 208, 224, 227, 235, 252, 281, 284, 286, 288, 289, 290, 291, 326, 341, 345, 370, 404, 417], "reformul": [382, 385], "refract": [239, 241, 333], "reg": [117, 130, 132, 145, 146, 147, 149, 150, 151, 168, 396, 406, 407, 408, 410], "reg_fn": 35, "reg_l2": 38, "region": [202, 320, 337, 363, 413], "regnam": [117, 132, 138, 141, 144, 145, 146, 150, 151, 155, 156, 157, 158, 159, 160, 162, 165, 347, 385, 406, 407], "regress": 188, "regular": [19, 28, 43, 89, 93, 106, 107, 117, 123, 126, 130, 132, 133, 138, 144, 145, 146, 147, 149, 150, 151, 154, 163, 167, 168, 172, 183, 186, 188, 190, 195, 198, 272, 273, 276, 292, 293, 294, 295, 302, 305, 306, 326, 327, 329, 332, 334, 344, 345, 346, 347, 351, 358, 359, 360, 366, 373, 381, 382, 383, 386, 392, 394, 396, 400, 406, 407, 410, 414], "regularis": [35, 38, 111, 117, 126, 154, 293, 294, 295, 320, 346, 347, 363, 385], "regularizi": 351, "regval": [35, 38], "reimplement": [61, 287], "reinstal": 393, "rel": [64, 167, 172, 173, 190, 198, 323, 345, 398, 414], "rel_crit": 345, "relat": [17, 333, 339, 355, 369, 382, 383], "relationship": 320, "relax": [93, 106, 107, 138, 155, 156, 157, 386, 407], "relaxation_step": 138, "releas": 341, "relev": [12, 117, 154, 293, 294, 295, 365, 411], "reli": [145, 190, 203, 320, 323, 355, 404], "relu": [85, 89, 93, 200], "remain": [279, 335, 363], "remark": 365, "remot": [12, 23, 34, 39, 40, 49, 51, 52, 64, 76, 100, 178, 179, 183, 188, 190, 196, 198, 209, 210, 300, 310, 342, 343, 344, 394, 401], "remov": [13, 15, 16, 20, 25, 27, 44, 45, 53, 78, 103, 109, 153, 177, 184, 189, 213, 276, 277, 372, 395, 402, 404, 405], "remove_finish": 20, "render": 369, "renorm": [363, 365], "reparametr": 365, "repeat": [178, 213, 237, 243, 245, 253, 339, 345, 369, 384], "replac": [211, 212, 282, 283, 323, 381, 384, 386, 406, 408, 410, 414], "replic": [175, 183, 196, 208, 224, 227, 235, 252, 326], "report": 369, "repositori": [43, 77, 85, 88, 89, 93, 97, 104, 105, 301, 303, 305, 306, 390, 392, 393, 397], "repres": [16, 21, 47, 90, 117, 125, 184, 188, 192, 193, 196, 201, 202, 205, 211, 245, 253, 255, 287, 298, 346, 347], "represent": [83, 84, 357], "reproduc": [20, 130, 177, 180, 182, 184, 189, 192, 194, 204, 207, 214, 259, 260, 266, 267, 274, 275, 280, 326, 327, 328, 329, 333, 334, 336, 340, 345, 346, 347, 354, 355, 356, 357, 358, 364, 366, 371, 372, 373, 374, 376, 377, 381, 382, 383, 384, 385, 386], "reproducibli": 17, "request": 390, "requir": [12, 28, 33, 39, 74, 81, 112, 113, 117, 147, 156, 172, 194, 214, 222, 223, 260, 263, 268, 272, 273, 280, 287, 315, 323, 331, 335, 339, 341, 354, 355, 357, 358, 361, 362, 364, 371, 385, 390, 398, 404, 405, 407, 408, 412, 413, 414, 415, 417], "requires_grad": [38, 50, 81, 179, 332], "requires_grad_": [38, 336, 351, 363, 365], "resampl": [97, 284], "resample_filt": 97, "rescal": [12, 17, 88, 310, 313, 315, 318, 320, 358, 363, 365, 412], "rescale_mod": [12, 30, 276, 310, 313, 315, 318, 334, 393, 406, 407], "rese": 237, "research": [18, 389, 412], "reset": [12, 195, 237, 251, 259, 268, 296, 416], "reset_metr": 12, "reset_rng": [195, 251, 259], "reshap": [112, 320], "reshape_th": 112, "resi_connect": 105, "residu": [77, 79, 97, 105, 110, 117, 172, 174, 268, 363, 365], "resiz": [307, 308, 323, 330, 334, 337, 339, 341, 355, 358, 364, 369, 370, 371], "resize_mod": [307, 308, 334, 355, 358, 364], "resnet": 100, "resolut": [12, 15, 19, 22, 25, 27, 28, 34, 39, 41, 51, 77, 87, 89, 91, 93, 97, 100, 103, 104, 117, 123, 133, 141, 144, 145, 146, 154, 183, 186, 190, 195, 196, 198, 276, 284, 293, 295, 302, 305, 306, 310, 314, 320, 338, 344, 359, 360, 370, 387, 388, 394, 401, 402, 411, 412], "resolv": [18, 27, 35, 44, 239, 240, 241, 250, 323, 332, 333, 334, 338, 339, 345, 350, 351, 355, 357, 364, 365, 366, 369, 370, 371, 372, 373, 375, 376, 393, 406], "reson": [44, 184, 192, 205, 250, 339, 401], "resp": 386, "respect": [26, 92, 124, 138, 240, 241, 278, 287, 326, 333, 341, 377, 384, 404, 409, 410], "respiratori": [44, 250], "respons": [179, 196, 206, 208, 326, 331, 338], "rest": [23, 122, 236, 338], "restart": 107, "restor": [13, 22, 85, 103, 105, 122, 125, 260, 263, 320, 327, 338, 350, 351, 354, 356, 357, 381, 382, 383, 386, 392, 395, 404, 408, 411, 412], "restorm": [404, 411], "restrict": [214, 261, 336], "result": [12, 48, 188, 190, 194, 195, 198, 209, 210, 257, 263, 265, 272, 273, 287, 315, 318, 323, 334, 336, 337, 338, 339, 341, 351, 363, 365, 369, 370, 375, 400, 410], "results_dir": [327, 332, 334, 345, 346, 347, 354, 355, 356, 357, 358, 381, 382, 383, 384, 386], "retain": [48, 190, 404], "retrain": 351, "retriev": [21, 85, 87, 115, 117, 123, 129, 133, 138, 141, 144, 145, 154, 159, 163, 166, 167, 197, 198, 201, 202, 204, 212, 255, 256, 281, 302, 303, 308, 310, 342, 343, 344, 365, 394, 401, 404, 407], "retrun": 173, "return": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 31, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 64, 70, 74, 75, 76, 77, 78, 81, 87, 88, 92, 97, 99, 100, 102, 106, 107, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 141, 144, 146, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 161, 163, 166, 167, 168, 169, 170, 171, 172, 174, 178, 180, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 205, 210, 212, 213, 215, 216, 217, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 247, 248, 251, 252, 253, 254, 255, 256, 258, 259, 262, 264, 268, 269, 270, 274, 275, 276, 277, 278, 279, 287, 292, 293, 295, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 315, 316, 317, 319, 320, 323, 326, 327, 328, 332, 333, 334, 335, 339, 341, 346, 347, 351, 355, 356, 357, 358, 361, 362, 363, 365, 366, 372, 383, 384, 385, 404, 407, 416], "return_anim": 315, "return_ax": 310, "return_fig": [310, 312, 313], "return_pan": [23, 338], "rev": 139, "revers": [264, 270, 274, 275, 363, 365, 399, 408], "review": [196, 206], "revisit": 363, "rewrit": 416, "reynold": [287, 417], "rgb": [90, 125, 179, 187, 188, 196, 326, 335, 336, 338, 404, 412], "rho": [107, 363, 365], "rho_t": [263, 363], "right": [45, 52, 53, 54, 59, 60, 61, 62, 63, 118, 123, 127, 128, 144, 147, 148, 169, 177, 178, 190, 198, 201, 202, 204, 220, 248, 262, 263, 264, 270, 273, 274, 275, 292, 312, 323, 333, 356, 361, 363, 364, 366, 372, 376, 377, 382, 398, 402, 407, 408, 410, 414], "right_precon": 169, "rightarrow": 287, "rigid": 417, "risk": 338, "rm": [333, 365], "rmtree": [13, 15, 16, 17, 25, 27], "rng": [17, 41, 42, 52, 53, 54, 177, 178, 186, 189, 191, 195, 199, 200, 204, 206, 207, 211, 215, 216, 236, 237, 238, 240, 242, 243, 244, 245, 246, 247, 248, 250, 251, 253, 254, 258, 259, 266, 267, 274, 275, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 339, 364], "rng_manual_se": [195, 251, 259], "robust": [103, 110, 214, 326, 341], "role": 366, "roll": [190, 217, 286], "roll_reflect_1d": 286, "root": [13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 193, 194, 305, 306, 323, 339, 370, 372, 373, 374, 375, 376, 377, 382, 383, 390, 412], "root_dir": [14, 23, 26], "rotat": [34, 92, 214, 220, 223, 281, 287, 288, 289, 290, 291, 341, 370, 371, 372, 404, 413, 417], "roto": 341, "rotoreflect": 341, "rotoshift": [287, 417], "roughli": [351, 413], "round": 207, "routin": [407, 410], "row": [115, 245, 310, 313], "rss": [17, 26, 193, 194, 339, 412], "rtol": 167, "rule": [117, 123, 148, 266, 270, 364, 365, 408], "run": [12, 77, 80, 81, 85, 86, 89, 97, 103, 105, 110, 112, 113, 117, 122, 154, 167, 260, 261, 263, 265, 268, 273, 293, 294, 295, 320, 323, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 347, 350, 354, 355, 356, 357, 358, 363, 364, 365, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 390, 408], "rung": [272, 408], "runner": [320, 323, 331, 332, 334, 336, 338, 339, 350, 351, 354, 355, 357, 363, 364, 365, 366, 369, 370, 371, 372, 373, 375, 376, 384], "runtim": [175, 329], "rvert": [61, 323, 402], "rx": 214, "s_": 361, "s_i": 41, "s_n": 194, "s_sequential_indic": 333, "s_t": 205, "safer": 12, "saito": 121, "sake": 339, "sam": [76, 338], "same": [12, 16, 17, 20, 21, 28, 48, 68, 69, 88, 95, 103, 106, 107, 112, 117, 123, 127, 128, 129, 131, 135, 136, 148, 149, 154, 175, 177, 183, 195, 196, 204, 208, 212, 222, 224, 225, 226, 227, 228, 229, 233, 234, 235, 241, 242, 259, 279, 280, 287, 293, 294, 295, 299, 309, 310, 312, 313, 315, 316, 317, 318, 319, 323, 326, 331, 332, 339, 341, 361, 364, 371, 372, 373, 376, 384, 385, 400, 407, 411, 416], "sampl": [0, 12, 14, 16, 17, 19, 21, 26, 28, 29, 32, 34, 41, 42, 44, 45, 47, 48, 77, 81, 84, 85, 87, 88, 92, 95, 97, 102, 104, 111, 123, 133, 143, 144, 145, 147, 153, 176, 177, 180, 184, 186, 188, 189, 190, 192, 194, 195, 198, 203, 204, 205, 212, 214, 232, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 251, 253, 254, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 284, 302, 303, 308, 310, 318, 323, 326, 330, 333, 335, 336, 337, 338, 339, 341, 357, 365, 368, 369, 370, 372, 382, 383, 394, 395, 400, 401, 404, 405, 412, 416], "sample_index": 26, "sample_init": [258, 274, 275], "sample_mask": 237, "sample_seed_1": 364, "sampler": [100, 265, 268, 272, 273, 365, 369], "samples_loc": [203, 320], "samuel": 392, "saniti": 287, "sar": 185, "sara": 320, "satellit": [12, 23, 34, 39, 40, 49, 51, 52, 64, 76, 100, 178, 179, 183, 188, 190, 196, 198, 209, 210, 300, 310, 342, 343, 344, 394, 412], "satisfi": [156, 158, 162, 163], "satur": [190, 198], "saunder": [173, 174], "save": [12, 13, 15, 16, 17, 18, 21, 22, 25, 26, 27, 28, 32, 44, 45, 47, 48, 87, 105, 112, 123, 127, 141, 144, 145, 177, 180, 189, 190, 197, 198, 204, 207, 265, 276, 279, 293, 295, 302, 310, 311, 312, 313, 314, 315, 318, 323, 327, 328, 330, 339, 340, 342, 343, 344, 346, 347, 354, 356, 357, 358, 363, 364, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 386, 394, 397, 412, 416], "save_best_model": 12, "save_chain": [265, 268, 272, 273], "save_dir": [28, 310, 311, 313, 314, 323, 327, 328, 334, 339, 340, 354, 355, 356, 357, 358, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 385, 386, 412], "save_fn": [310, 312, 315, 318, 364], "save_fold": [276, 327, 354, 357, 384], "save_iter": 261, "save_metadata_to_cach": [14, 17], "save_model": [12, 279], "save_path": [12, 177, 189, 197, 204, 207, 323, 339, 340, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386], "save_physics_generator_param": [28, 339], "save_simple_dataset": [17, 26], "save_step": 363, "save_video": [364, 397], "sax": 14, "sbr": 331, "scalar": [55, 172, 187, 232, 264, 279, 333, 406, 407, 408], "scale": [22, 23, 45, 82, 88, 97, 103, 105, 108, 109, 110, 127, 178, 185, 186, 246, 248, 264, 279, 281, 287, 291, 320, 323, 327, 328, 334, 338, 339, 340, 341, 346, 347, 354, 355, 356, 357, 358, 370, 372, 373, 374, 375, 376, 377, 381, 384, 385, 386, 399, 408, 417], "scale_factor": 100, "scale_out": 82, "scale_t": 264, "scaled_gaussian_nois": 186, "scan": [12, 17, 21, 39, 51, 98, 99, 123, 138, 144, 145, 156, 164, 165, 186, 190, 195, 198, 214, 223, 239, 293, 295, 302, 344, 387, 388, 394, 399, 412], "scan_fold": 21, "scanvic": 370, "scatter": [320, 326], "scatter_plot": 320, "scene": [23, 27, 187, 188, 206, 331, 370, 412], "schedul": [12, 33, 36, 37, 46, 50, 263, 323, 340, 362, 371, 372, 373, 374, 376, 377, 381, 382, 383, 384, 385, 386], "scheme": [320, 371, 372], "schlemper": 245, "school": 389, "sci": [106, 169], "scienc": [156, 389], "scipi": 173, "score": [47, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 97, 147, 262, 264, 269, 270, 274, 275, 334, 361, 364, 365, 366, 408], "scoreloss": 413, "scoremodel": 47, "scoreprior": [268, 272, 273, 361, 366, 407, 408], "scratch": [323, 338, 369, 371, 372, 373, 376, 416], "screen": [20, 21], "script": [320, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 345, 346, 347, 350, 351, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386], "scunet": [404, 411], "sd": [178, 338], "sde": [85, 87, 88, 97, 102, 123, 144, 153, 180, 189, 190, 198, 258, 259, 262, 264, 266, 267, 269, 270, 271, 274, 275, 303, 308, 310, 318, 344, 367, 368, 394, 405], "sde_sampl": 364, "sde_trajectori": 364, "sdeoutput": [259, 408], "seamlessli": [298, 326, 377, 415, 417], "search": [330, 350, 351], "second": [46, 53, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 88, 90, 117, 125, 138, 184, 189, 190, 192, 196, 205, 206, 267, 270, 320, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 345, 346, 347, 350, 351, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 400, 407, 408], "second_deriv": 53, "secondli": 363, "section": [6, 363], "see": [12, 14, 17, 23, 32, 34, 41, 42, 43, 44, 45, 47, 48, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 70, 75, 76, 77, 78, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 97, 101, 104, 105, 106, 107, 113, 117, 122, 125, 126, 154, 155, 169, 170, 174, 177, 178, 181, 184, 185, 188, 189, 190, 192, 193, 194, 196, 198, 205, 206, 207, 209, 210, 241, 243, 245, 248, 252, 253, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 310, 313, 315, 318, 320, 329, 331, 333, 336, 338, 341, 355, 361, 365, 366, 369, 370, 371, 375, 376, 377, 382, 383, 385, 396, 398, 400, 402, 404, 406, 407, 408, 410, 412, 413, 414, 416, 417], "seealso": 369, "seed": [130, 177, 180, 182, 184, 186, 189, 191, 192, 194, 195, 199, 200, 204, 207, 214, 215, 216, 237, 238, 240, 242, 244, 247, 248, 251, 252, 254, 258, 259, 260, 263, 268, 270, 280, 326, 327, 328, 329, 330, 333, 334, 336, 340, 345, 346, 347, 354, 355, 356, 357, 358, 364, 366, 371, 372, 373, 374, 376, 377, 381, 382, 383, 384, 385, 386], "seed_1": 364, "seek": [338, 345], "segment": [13, 412], "select": [15, 17, 19, 20, 22, 32, 33, 36, 37, 41, 42, 46, 117, 140, 236, 243, 245, 247, 251, 253, 282, 283, 287, 302, 320, 327, 332, 346, 347, 354, 355, 356, 357, 358, 374, 381, 382, 383, 385, 386, 417], "self": [12, 13, 15, 16, 17, 18, 19, 21, 22, 25, 26, 27, 28, 32, 34, 39, 40, 42, 43, 44, 45, 48, 52, 53, 54, 77, 78, 87, 96, 97, 102, 110, 117, 128, 145, 177, 180, 182, 184, 185, 186, 189, 190, 192, 193, 195, 197, 198, 200, 204, 205, 207, 213, 214, 237, 238, 245, 246, 251, 253, 260, 268, 283, 284, 287, 293, 300, 302, 306, 310, 315, 320, 327, 330, 331, 335, 338, 339, 341, 351, 355, 357, 361, 370, 379, 384, 392, 394, 395, 400, 402, 405, 416, 417], "selfexsr": 25, "semigroup": 281, "send": 390, "sens": [12, 19, 23, 28, 34, 39, 40, 41, 42, 49, 51, 52, 59, 60, 64, 76, 81, 100, 123, 133, 144, 145, 151, 162, 173, 175, 177, 178, 179, 180, 181, 182, 183, 186, 188, 189, 190, 192, 193, 195, 196, 198, 199, 200, 207, 209, 210, 214, 220, 237, 243, 245, 251, 253, 293, 295, 300, 302, 303, 308, 310, 314, 320, 323, 342, 343, 344, 365, 383, 387, 388, 389, 394, 401, 412], "sensit": [52, 53, 54, 111, 194, 333, 339], "sensitivity_model": [111, 339], "sensitv": 194, "sensor": [34, 41, 42, 188, 190, 197, 198, 210], "sensor_model": [190, 198], "separ": [12, 23, 114, 188, 304, 350], "seq": [363, 365], "seq_next": 365, "sequenc": [14, 32, 44, 88, 203, 205, 207, 259, 261, 263, 315, 318, 320, 339, 345, 363, 369, 397, 412], "sequenti": [32, 36, 37, 44, 80, 205, 240, 330, 369, 413], "sequentialmri": [32, 44, 369, 401], "seri": [77, 89, 97, 369], "series_uid": 21, "serv": [20, 112, 274, 275, 403, 407], "server": [330, 390, 391], "set": [6, 12, 17, 19, 20, 23, 26, 27, 28, 32, 34, 35, 38, 39, 40, 41, 42, 43, 44, 48, 51, 56, 58, 70, 73, 75, 77, 85, 86, 88, 89, 92, 93, 97, 103, 104, 105, 112, 128, 133, 139, 147, 151, 155, 156, 157, 168, 178, 184, 186, 188, 189, 190, 191, 192, 194, 195, 198, 199, 200, 203, 205, 210, 215, 216, 247, 251, 252, 259, 268, 273, 276, 278, 279, 281, 282, 283, 287, 300, 320, 323, 326, 328, 329, 332, 333, 334, 336, 338, 339, 345, 350, 356, 357, 361, 362, 366, 369, 370, 375, 381, 382, 383, 384, 386, 400, 401, 405, 406, 408, 414, 415], "set14": 25, "set14_sr": 25, "set14hr": 412, "set3": 328, "set3c": [327, 328, 340, 346, 347, 354, 355, 357, 381, 385, 386], "set_cov": 168, "set_cov_reg": 168, "set_descript": 351, "set_ls_solv": 198, "set_noise_model": [198, 210, 401], "set_to_non": 278, "set_weight": 168, "setup": [12, 279], "setup_train": [12, 279], "setweight": 320, "sever": [214, 223, 330, 338, 345], "shake": 20, "shannon": [240, 241, 326, 333], "shape": [14, 17, 20, 21, 24, 26, 29, 30, 31, 32, 35, 38, 44, 70, 74, 82, 85, 88, 90, 91, 94, 98, 99, 100, 103, 105, 106, 107, 108, 109, 112, 116, 125, 128, 149, 168, 169, 170, 172, 173, 174, 177, 178, 184, 185, 186, 188, 189, 192, 193, 194, 196, 201, 202, 204, 205, 207, 211, 212, 213, 225, 226, 228, 229, 233, 234, 236, 237, 238, 239, 240, 241, 243, 245, 246, 248, 249, 250, 252, 253, 255, 258, 270, 271, 274, 275, 283, 287, 298, 310, 313, 315, 318, 320, 326, 327, 329, 334, 336, 337, 338, 339, 345, 347, 350, 351, 362, 363, 364, 365, 366, 369, 382, 383, 400, 404, 407, 412, 417], "shard": 22, "share": [369, 383], "shared_weight": 212, "sharp": [20, 412], "sharp_fram": 20, "sharpen": [23, 64, 100, 196, 409, 414], "shear": [178, 243, 370, 417], "shear_dir": 178, "shelf": [405, 406, 409], "shepp": 334, "sheppard": 333, "shepplogan": [334, 358], "shepplogandataset": 384, "shift": [88, 166, 190, 201, 202, 217, 256, 281, 286, 287, 288, 289, 291, 334, 337, 341, 370, 417], "shift_max": [281, 285, 288, 289, 290, 291, 341], "shifttim": 417, "short": [14, 339, 340, 385, 412], "shot": [20, 412], "should": [12, 13, 18, 23, 25, 27, 28, 32, 44, 45, 47, 48, 52, 53, 54, 57, 70, 86, 103, 105, 112, 145, 154, 156, 158, 161, 162, 163, 180, 184, 187, 190, 191, 192, 193, 194, 195, 203, 207, 214, 217, 223, 238, 239, 240, 241, 248, 251, 260, 263, 268, 273, 276, 287, 293, 294, 295, 310, 313, 315, 318, 320, 323, 329, 330, 331, 333, 334, 355, 358, 371, 381, 407, 416], "show": [12, 20, 28, 117, 126, 208, 213, 276, 310, 311, 312, 313, 314, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 339, 340, 345, 346, 347, 354, 355, 356, 358, 361, 362, 363, 364, 366, 369, 370, 371, 372, 373, 374, 376, 377, 381, 382, 383, 386, 400], "show_progress_bar": [12, 28, 126, 276, 323, 338, 339, 340, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386], "showcas": 334, "shown": [121, 312, 320, 331, 356, 402, 406], "shrinkag": 407, "shuffl": [12, 17, 21, 85, 93, 323, 327, 328, 339, 340, 351, 354, 357, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 385, 386, 412, 416], "shutil": [13, 15, 16, 17, 25, 27], "siam": [89, 106, 169, 174], "side": [67, 310, 315, 318], "sigma": [45, 47, 52, 53, 77, 80, 85, 87, 88, 89, 90, 92, 97, 103, 105, 110, 122, 125, 133, 134, 141, 146, 147, 156, 160, 182, 186, 196, 198, 199, 206, 215, 220, 248, 251, 254, 260, 261, 262, 263, 264, 269, 272, 273, 293, 326, 327, 329, 331, 332, 335, 336, 341, 345, 346, 347, 350, 354, 355, 356, 357, 358, 361, 362, 363, 365, 366, 374, 377, 381, 384, 385, 386, 393, 396, 400, 401, 404, 406, 407, 408, 412, 414], "sigma2": 377, "sigma2_nois": 361, "sigma_": [178, 215, 254, 274, 364, 408, 414], "sigma_1": 186, "sigma_2": 186, "sigma_b": 186, "sigma_cur": [363, 365], "sigma_d": 361, "sigma_denois": [141, 146, 147, 332, 354, 356, 357, 366, 381, 385, 386], "sigma_dict": 254, "sigma_i": [220, 365], "sigma_init": 377, "sigma_k": 363, "sigma_max": [215, 254, 274, 364], "sigma_min": [215, 254, 274, 364], "sigma_n": 263, "sigma_nois": 363, "sigma_sq": [90, 125], "sigma_t": [264, 363, 365], "sigma_tild": 365, "sigma_x": [220, 414], "sigmagener": [251, 400, 412], "sigmat": 365, "sigmoid": 101, "sign": [17, 26, 131, 132, 177, 339, 369, 371], "signal": [19, 28, 34, 40, 41, 42, 51, 73, 78, 102, 108, 127, 143, 147, 151, 167, 177, 180, 188, 190, 197, 198, 204, 206, 210, 211, 212, 230, 246, 326, 328, 333, 335, 336, 337, 369, 393, 395, 396, 402, 405, 406, 407, 413], "signific": [361, 390], "significantli": 384, "sigpi": 194, "sim": [34, 41, 45, 52, 53, 54, 59, 60, 61, 62, 63, 92, 177, 186, 199, 204, 215, 216, 248, 264, 269, 273, 323, 350, 351, 365, 366, 377, 401, 402, 408], "simeq": 365, "similar": [48, 66, 75, 76, 167, 177, 189, 197, 204, 207, 232, 281, 287, 298, 334, 341, 370, 399, 414, 417], "similarli": [332, 385, 412], "simlarli": 320, "simpl": [17, 26, 60, 61, 63, 79, 81, 100, 184, 192, 205, 320, 323, 327, 328, 330, 332, 335, 336, 337, 339, 340, 341, 355, 356, 361, 362, 366, 372, 373, 374, 375, 376, 377, 384, 386, 398, 402, 416], "simple_set": 17, "simplefastmrislicedataset": [17, 339, 369, 371, 412], "simpler": 363, "simplest": 403, "simpli": [51, 111, 196, 213, 217, 292, 310, 323, 339, 351, 363, 365, 369, 383, 404, 408, 415], "simplic": [320, 323, 363, 381, 386], "simplif": 174, "simul": [188, 194, 205, 290, 333, 337, 339, 341, 369, 395, 399, 416, 417], "simulate_birdcage_csm": 194, "simultan": [48, 189, 238, 246], "sin": [220, 333], "sinc": [26, 45, 78, 112, 126, 127, 129, 166, 175, 177, 183, 207, 221, 264, 270, 274, 275, 323, 329, 338, 339, 361, 365, 366, 393, 415], "sinc_filt": 401, "sine": [177, 230], "singl": [14, 17, 20, 28, 41, 42, 43, 103, 111, 112, 117, 138, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 175, 176, 178, 184, 190, 192, 198, 205, 206, 207, 209, 210, 240, 259, 293, 294, 295, 296, 298, 302, 310, 312, 313, 320, 326, 332, 338, 339, 342, 343, 344, 345, 355, 362, 363, 369, 370, 371, 373, 382, 383, 384, 385, 386, 394, 400, 401, 406, 407, 408, 413, 414], "single_pixel": 355, "singlecoil": [14, 17, 26, 111, 339], "singlephotonlidar": [331, 401], "singlepixelcamera": [336, 355, 401], "singular": [176, 180, 184, 192, 205, 207, 260, 335, 361, 362, 398, 400], "sinogram": 336, "site": [22, 339, 341, 369, 371], "situat": [326, 345], "size": [12, 14, 15, 16, 17, 24, 25, 28, 32, 35, 38, 39, 44, 48, 52, 53, 54, 55, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 82, 83, 84, 86, 88, 90, 94, 95, 97, 100, 101, 105, 109, 116, 117, 118, 124, 125, 126, 127, 128, 129, 134, 139, 140, 143, 151, 156, 160, 168, 171, 172, 175, 176, 177, 178, 180, 181, 183, 184, 186, 188, 189, 190, 191, 192, 194, 196, 198, 202, 203, 205, 206, 207, 208, 213, 214, 217, 218, 219, 222, 223, 224, 225, 226, 227, 228, 229, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 250, 252, 253, 254, 256, 258, 259, 272, 273, 287, 292, 307, 308, 310, 312, 313, 315, 318, 320, 326, 329, 331, 333, 334, 336, 337, 338, 339, 340, 341, 345, 351, 354, 357, 361, 363, 365, 366, 369, 371, 375, 377, 382, 383, 384, 385, 396, 399, 400, 404, 407, 410, 412, 414, 417], "skew": [281, 288], "skew_max": [281, 288, 289, 290, 291], "skip": [77, 97, 110, 365, 369], "skrock": 408, "slice": [14, 17, 21, 26, 192, 194, 339, 404, 412], "slice_fnam": 21, "slice_ind": 17, "slice_index": [17, 339], "slicesampleid": 17, "slicesampleidentifi": 21, "slide": 95, "slow": [86, 175, 183, 323, 408], "slower": 326, "sm": 407, "small": [48, 53, 54, 90, 106, 111, 116, 125, 151, 170, 196, 214, 223, 329, 339, 345, 351, 370, 375, 376, 377, 381, 386, 407, 408, 412, 413], "smaller": [35, 48, 88, 144, 168, 175, 183, 185, 196, 208, 224, 227, 235, 272, 273, 320, 327, 346, 347, 357, 407], "smi": 302, "smolyakov": [106, 107], "smooth": [142, 143, 383, 413, 417], "smoothli": 169, "smx": 178, "snapshot": [178, 338], "snippet": 320, "snu": 18, "so": [12, 20, 184, 192, 205, 236, 243, 245, 290, 320, 326, 334, 335, 338, 363, 364, 365, 377, 386, 416], "soft": [12, 13, 19, 28, 39, 51, 112, 113, 123, 131, 133, 144, 145, 151, 158, 162, 173, 177, 190, 198, 293, 295, 300, 302, 310, 314, 332, 344, 345, 383, 385, 387, 388, 394], "softplu": [85, 93], "softwar": [106, 107, 389], "solut": [12, 107, 112, 113, 117, 126, 138, 169, 174, 190, 196, 198, 266, 267, 292, 320, 334, 335, 345, 346, 347, 364, 407, 410], "solv": [86, 106, 107, 117, 126, 156, 169, 170, 172, 173, 174, 258, 259, 264, 270, 274, 275, 323, 334, 339, 341, 356, 357, 363, 364, 365, 369, 381, 385, 392, 402, 405, 406, 407, 408, 410], "solver": [149, 172, 190, 198, 258, 259, 264, 266, 267, 270, 271, 274, 275, 364], "some": [17, 33, 39, 103, 140, 190, 198, 320, 326, 329, 333, 335, 336, 341, 346, 347, 361, 365, 397, 400, 401, 404, 405, 406, 407, 408, 409, 410, 412, 414, 415, 417], "sometim": 410, "somewhat": 329, "song": [97, 364], "soon": 390, "sor": 177, "sort": 400, "sourc": [12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 347, 350, 351, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 389, 390], "source_radiu": [214, 223], "sourcetensor": [336, 363], "space": [17, 32, 44, 77, 79, 90, 97, 111, 125, 140, 203, 205, 208, 213, 214, 223, 237, 243, 245, 252, 253, 320, 323, 336, 339, 341, 351, 369, 370, 371, 384, 407, 412], "spacevaryingblur": [252, 326, 401], "spacial": 320, "spars": [80, 173, 174, 188, 203, 222, 223, 232, 320, 336], "sparsiti": [320, 345, 347, 404], "spatial": [64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 97, 178, 208, 246, 320, 326, 399, 414], "special": [32, 44, 288, 289, 290, 291, 369, 417], "specif": [9, 17, 20, 45, 56, 58, 117, 122, 123, 126, 148, 178, 202, 326, 327, 335, 339, 354, 357, 358, 395, 400, 401, 403, 405, 410, 417], "specifi": [14, 15, 22, 26, 29, 50, 56, 58, 59, 60, 61, 62, 63, 89, 145, 161, 172, 181, 184, 192, 194, 205, 237, 238, 255, 270, 279, 300, 315, 318, 320, 326, 327, 333, 336, 346, 347, 354, 355, 357, 358, 364, 374, 385, 386, 400, 413, 417], "speckl": 185, "spectra": 188, "spectral": [35, 38, 74, 76, 163, 167, 178, 179, 190, 196, 197, 338, 407, 413, 414], "spectral_method": [197, 334], "spectralanglemapp": [338, 414], "spectralanglemapper_std": 338, "spectrum": 188, "speed": [17, 28, 53, 107, 190, 323, 335, 338, 339, 369, 371, 384, 405], "sphinx": [320, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 347, 350, 351, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386], "sphinx_gallery_multi_imag": [320, 363], "sphinx_gallery_thumbnail_numb": 363, "split": [12, 15, 17, 19, 22, 26, 28, 32, 39, 40, 43, 44, 48, 78, 87, 88, 90, 102, 106, 107, 110, 122, 125, 127, 138, 154, 156, 157, 160, 186, 190, 195, 198, 214, 236, 238, 246, 250, 263, 293, 294, 295, 300, 302, 330, 339, 344, 350, 351, 354, 369, 371, 378, 379, 381, 385, 386, 394, 407, 412, 413], "split_ratio": [48, 189, 238, 246, 369, 375], "split_siz": [32, 236, 369], "splitter": 369, "splittingloss": [32, 44, 238, 246, 369, 375, 413], "splittingmodel": [44, 48], "spoke": [32, 44, 205], "spread": [239, 249], "sqrt": [73, 88, 97, 106, 107, 115, 116, 177, 186, 193, 207, 221, 248, 261, 263, 264, 270, 273, 274, 275, 320, 361, 362, 363, 364, 365, 366, 377, 383, 407, 408], "sqrt_1m_alphas_cumprod": 363, "sqrt_alphas_cumprod": 363, "sqrt_recip_alphas_cumprod": 363, "squar": [17, 26, 32, 40, 42, 43, 44, 48, 51, 52, 53, 54, 57, 69, 72, 84, 100, 119, 166, 169, 170, 172, 173, 190, 193, 194, 198, 214, 239, 240, 241, 246, 256, 327, 339, 340, 363, 385, 402, 407], "sr": [22, 105], "src": [331, 341], "srf": [179, 196, 338], "sriram": 111, "ss": [12, 178], "ssdu": [48, 246, 375], "ssim": [36, 37, 46, 50, 369, 414], "ssim_std": 369, "stabil": [169, 170, 172, 264, 270, 274, 275, 366], "stabilis": 272, "stabl": [52, 75, 310, 313, 315, 393], "stack": [17, 49, 148, 190, 198, 209, 210, 287, 338, 369, 400, 417], "stackedlinearphys": [49, 148, 196], "stackedphys": [49, 148, 190, 198, 209, 400], "stackedphysicsdatafidel": 400, "stackedphysicsloss": [338, 400], "stage": [103, 104], "stand": 144, "standalon": 404, "standard": [12, 20, 51, 52, 53, 61, 77, 88, 90, 97, 103, 117, 122, 125, 133, 170, 171, 182, 186, 187, 196, 199, 206, 215, 220, 238, 248, 258, 259, 262, 270, 272, 273, 275, 276, 293, 294, 295, 296, 317, 323, 327, 331, 332, 334, 336, 338, 345, 346, 347, 350, 351, 354, 355, 358, 362, 363, 364, 365, 366, 385, 396, 402, 404, 406, 407, 408, 410, 412, 414], "standart": [154, 294, 295, 357, 358], "star": [208, 235, 292, 410], "start": [138, 164, 165, 259, 320, 335, 371, 372, 373, 374, 376, 408], "stat": 169, "state": [12, 13, 195, 251, 258, 259, 264, 270, 320, 339, 392], "state_dict": [12, 278, 323, 332, 338, 339, 369, 370, 371, 372, 373, 374, 375, 376, 385], "state_dict_d": 323, "static": [17, 32, 44, 48, 106, 107, 108, 109, 112, 184, 193, 212, 213, 336, 365, 369, 371], "statist": [45, 188, 268, 272, 273, 399, 408, 414], "std": [12, 362, 366, 397], "std_scale": 246, "stein": 338, "stem": 331, "step": [12, 32, 44, 45, 47, 48, 52, 53, 93, 110, 117, 118, 126, 127, 128, 129, 138, 143, 154, 156, 160, 161, 164, 165, 171, 184, 189, 205, 208, 214, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 258, 259, 263, 264, 266, 267, 270, 271, 272, 273, 279, 292, 293, 294, 295, 320, 326, 333, 336, 339, 345, 346, 347, 351, 354, 355, 357, 358, 361, 366, 369, 374, 377, 384, 400, 407, 410, 411, 412, 416], "step_ratio_d": 279, "step_siz": [52, 53, 171, 268, 272, 273, 323, 340, 361, 366, 371, 372, 373, 374, 376, 377, 381, 385, 386], "steplossschedul": 413, "steplr": [323, 340, 371, 372, 373, 374, 376, 381, 384, 385, 386], "stepsiz": [107, 117, 126, 127, 129, 130, 131, 132, 133, 144, 149, 150, 151, 154, 155, 157, 158, 159, 161, 162, 163, 293, 294, 295, 320, 327, 332, 334, 346, 347, 354, 355, 356, 357, 358, 381, 382, 383, 385, 386, 393, 406, 407, 410], "stepsize_du": [385, 407], "stepsize_int": 144, "stepz_pixel": [241, 333], "still": [287, 400], "stochast": [97, 104, 105, 190, 198, 258, 259, 261, 264, 270, 272, 274, 275, 377, 396], "stop": [12, 81, 86, 117, 122, 126, 167, 168, 169, 170, 171, 172, 173, 174, 198, 327, 329, 354, 355, 357, 406], "stop_criterion": 12, "stopping_criterion": 168, "storag": [332, 338, 339, 369, 371, 372, 373, 374, 375, 376], "store": [19, 21, 28, 117, 126, 138, 175, 177, 180, 183, 204, 207, 208, 236, 238, 244, 246, 250, 254, 268, 271, 287, 296, 300, 330, 397, 400, 407, 408], "str": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 30, 32, 35, 38, 44, 52, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 85, 88, 89, 90, 93, 94, 97, 100, 103, 104, 105, 110, 111, 112, 113, 114, 117, 122, 125, 139, 151, 154, 168, 172, 175, 176, 177, 178, 179, 181, 183, 188, 190, 193, 194, 196, 198, 201, 202, 204, 206, 207, 208, 209, 211, 212, 214, 217, 222, 223, 224, 226, 227, 229, 235, 236, 238, 239, 240, 241, 242, 244, 246, 250, 251, 252, 254, 255, 261, 263, 276, 280, 281, 284, 286, 288, 289, 290, 291, 293, 294, 295, 296, 301, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 318, 340, 371, 372, 373, 374, 376, 377, 381, 382, 383, 384, 385, 386], "str2filter": 242, "strategi": [12, 45, 117, 237, 336], "strength": [163, 167, 191, 361, 366], "stretch": [281, 288], "strictli": 158, "stride": [24, 85, 93], "strideconv": [85, 93], "strike": 402, "string": [154, 212, 251, 293, 294, 295, 304, 397], "strong_convex": 94, "strongli": 94, "structur": [13, 14, 15, 16, 17, 18, 21, 22, 23, 25, 27, 74, 75, 85, 184, 192, 205, 211, 212, 335, 399, 400, 412], "structural_similar": 75, "structural_similarity_index_measur": 70, "structuredrandom": [177, 401], "structuredrandomphaseretriev": 401, "study_uid": 21, "style": [30, 31, 32, 390, 412], "sub": [33, 151, 363, 382], "sub_net_s": [139, 351], "subband": 112, "subclass": [355, 384, 402, 408], "subfold": 16, "subgroup": [281, 288, 289, 290, 291, 417], "subject": [20, 345], "submit": 390, "subnetwork": [139, 351], "suboptim": 363, "subpackag": [1, 412], "subplot": [331, 363], "subsampl": [14, 17, 48, 177, 183, 184, 192, 193, 194, 205, 207, 238, 246, 336], "subsample_volum": 17, "subselect": [33, 282], "subsequ": 17, "subset": [17, 23, 26, 48, 189, 238, 247, 339, 369, 371, 373, 374, 375, 376, 377, 412], "subsubfold": 16, "success": 402, "successfulli": [13, 15, 17, 25, 27, 323, 338, 370], "suffic": [326, 333], "suffici": [117, 365, 372], "suggest": [77, 97, 103, 127, 351, 363, 365, 391], "suit": [82, 407], "suitabl": [399, 414], "sum": [17, 26, 35, 38, 50, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 111, 138, 140, 151, 179, 184, 186, 193, 194, 207, 209, 213, 238, 251, 287, 298, 337, 339, 351, 362, 365, 366, 369, 383, 397, 399, 400, 407, 414, 417], "sum_": [45, 48, 92, 115, 116, 193, 208, 209, 235, 287, 345, 351, 372, 382, 407, 414], "sum_i": [49, 90, 121, 125, 130, 137, 140, 143, 148, 320, 341, 407], "summar": [396, 411], "summari": [395, 405], "summat": 168, "summer": 389, "sup": [36, 37, 46, 323], "sup_": 144, "supadversarialdiscriminatorloss": [56, 279, 323, 413], "supadversarialgeneratorloss": [58, 279, 323, 413], "super": [12, 15, 19, 22, 27, 28, 34, 39, 41, 51, 87, 89, 91, 93, 117, 123, 133, 141, 144, 145, 146, 154, 183, 186, 190, 195, 198, 239, 240, 241, 268, 276, 284, 293, 295, 302, 305, 306, 310, 314, 320, 327, 335, 338, 339, 344, 355, 359, 360, 361, 370, 384, 387, 388, 394, 401, 402, 412], "supervis": [12, 17, 19, 26, 28, 32, 34, 39, 40, 42, 43, 44, 45, 48, 51, 52, 53, 54, 59, 60, 78, 87, 96, 102, 110, 117, 180, 182, 184, 185, 186, 189, 190, 192, 193, 195, 198, 200, 205, 213, 214, 237, 238, 245, 246, 251, 253, 283, 284, 287, 293, 300, 302, 306, 310, 315, 323, 338, 339, 340, 341, 370, 379, 381, 382, 383, 384, 385, 386, 392, 394, 395, 400, 402, 405, 417], "suploss": [36, 37, 46, 277, 323, 338, 339, 340, 381, 382, 383, 384, 385, 386, 413, 414], "support": [19, 28, 47, 72, 80, 97, 139, 151, 185, 195, 224, 225, 227, 228, 233, 234, 243, 245, 253, 259, 279, 345, 395, 401, 412], "suppos": [341, 416], "suptitl": [310, 313, 326, 333, 345, 363, 381, 382, 383, 386], "sure": [12, 19, 28, 39, 52, 53, 54, 78, 87, 102, 110, 180, 182, 190, 195, 198, 200, 300, 302, 344, 366, 377, 378, 379, 390, 394], "suregaussianloss": [49, 338, 376, 377, 413], "surepgloss": [376, 377, 413], "surepoissonloss": [49, 376, 413], "surfix": 297, "surpris": 329, "survei": 188, "svd": [180, 189, 335, 408], "swin": [104, 105], "swinir": [404, 411], "switch": [287, 364], "swz30": 411, "symmetr": [92, 174, 287, 341, 404, 417], "symmetris": 287, "symposium": 389, "synchron": [12, 327, 328, 340, 354, 355, 357, 358, 371, 372, 373, 374, 376, 377, 381, 382, 383, 385, 386], "syntax": 271, "synthes": [20, 239, 240, 241, 326], "synthesi": [64, 77, 104, 414], "synthet": 411, "system": [126, 169, 170, 172, 173, 174, 259, 304, 396, 400, 407], "t": [12, 13, 14, 22, 32, 44, 66, 71, 74, 88, 95, 106, 107, 108, 109, 126, 142, 143, 147, 163, 167, 184, 186, 187, 190, 205, 206, 213, 217, 236, 237, 243, 245, 246, 248, 250, 253, 258, 259, 261, 262, 263, 264, 266, 267, 269, 270, 274, 275, 276, 287, 302, 312, 315, 318, 323, 328, 331, 336, 339, 341, 351, 358, 363, 364, 365, 369, 370, 382, 383, 401, 402, 404, 405, 407, 408, 413, 417], "t0": 259, "t1": [259, 345, 397], "t2": 397, "t3": 397, "t_": 287, "t_g": [34, 41, 92, 287], "t_hist": 126, "t_i": [341, 363], "t_im1": 363, "t_ix": 341, "t_l": 202, "t_max": 384, "t_temp": 363, "tabl": [382, 383, 390, 396], "tachella": 392, "tag": [117, 382, 407], "tail": 245, "take": [12, 13, 15, 16, 18, 21, 22, 23, 25, 27, 53, 54, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 84, 85, 88, 100, 108, 109, 114, 125, 126, 138, 139, 140, 194, 214, 243, 279, 287, 336, 337, 351, 361, 363, 365, 375, 376, 404, 407, 413, 414], "taken": [20, 41, 42, 83, 84, 91, 149, 245, 270, 271, 312, 320, 341, 390, 409], "tangent": 329, "taohuang2018": 43, "tar": [12, 16, 18, 22, 27], "target": [14, 17, 51, 64, 70, 76, 203, 213, 320, 339], "target_transform": 16, "task": [22, 28, 103, 320, 402, 412], "tau": [52, 53, 54, 107, 117, 156, 320, 346, 347, 355, 356, 376, 377, 385, 407], "tau1": 53, "tau2": 53, "tau_1": 53, "tau_2": 53, "tcia": 21, "teboul": 107, "telescop": 320, "templat": [39, 87, 102, 213], "tempor": [44, 109, 213, 417], "tend": [177, 320], "tensor": [12, 14, 17, 20, 23, 24, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 98, 99, 101, 102, 103, 105, 106, 107, 108, 110, 111, 112, 113, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 141, 143, 144, 146, 147, 148, 149, 150, 151, 155, 156, 157, 158, 159, 161, 163, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 213, 214, 215, 216, 217, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 248, 250, 251, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 266, 267, 268, 269, 270, 271, 274, 275, 279, 286, 287, 292, 293, 298, 299, 306, 307, 308, 309, 310, 312, 313, 315, 316, 317, 318, 319, 320, 326, 332, 333, 334, 335, 336, 337, 338, 341, 355, 357, 363, 365, 369, 382, 384, 397, 399, 400, 404, 407, 412, 414, 417], "tensor_in": [78, 111], "tensor_s": [32, 44, 48, 133, 180, 189, 236, 238, 246, 250, 260, 263, 329, 336, 340, 347, 350, 362, 363, 364, 365, 366, 369, 372, 385, 400, 407], "tensorlist": [23, 49, 74, 100, 148, 190, 196, 198, 209, 210, 257, 299, 309, 316, 317, 319, 320, 338, 400], "tensorshap": 341, "term": [53, 90, 106, 107, 115, 117, 122, 123, 125, 126, 129, 132, 138, 144, 145, 146, 148, 150, 153, 154, 156, 164, 165, 258, 259, 262, 263, 264, 269, 270, 274, 275, 293, 294, 295, 320, 327, 332, 346, 347, 354, 355, 356, 357, 358, 363, 364, 365, 381, 382, 383, 385, 386, 396, 400, 406, 407, 410], "terminologi": 138, "terri": [320, 341, 392], "tessel": 280, "test": [8, 12, 17, 19, 20, 25, 26, 27, 28, 29, 32, 44, 45, 47, 48, 81, 86, 103, 104, 113, 174, 190, 310, 323, 326, 327, 333, 334, 335, 338, 339, 354, 357, 390, 412, 416], "test_base_dataset": [372, 381, 382, 383, 385, 386], "test_batch_s": [340, 381, 382, 383, 384, 385, 386], "test_dataload": [12, 276, 323, 327, 340, 354, 357, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386], "test_datapoint": [28, 372, 373, 374, 375, 376, 377, 382, 383], "test_dataset": [28, 323, 327, 328, 339, 340, 354, 357, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 395, 412], "test_dataset_nam": [340, 381, 385, 386], "test_img": [350, 351], "test_psnr": [340, 385], "test_sampl": [381, 382, 383, 386], "test_transform": [340, 381, 385, 386], "text": [52, 54, 59, 60, 61, 62, 63, 66, 68, 69, 71, 72, 73, 74, 75, 92, 117, 127, 128, 129, 131, 133, 134, 144, 151, 163, 167, 172, 177, 178, 180, 189, 194, 197, 198, 202, 214, 215, 218, 219, 221, 244, 254, 323, 341, 345, 346, 347, 370, 382, 383, 402, 407, 414], "tgv": 106, "tgvdenois": 404, "th": [106, 107, 112, 113, 115, 116, 132, 139, 273, 345, 351], "than": [23, 35, 46, 48, 144, 158, 168, 172, 175, 177, 183, 196, 203, 207, 208, 217, 224, 227, 235, 239, 241, 272, 273, 310, 313, 320, 327, 328, 332, 336, 357, 363, 375, 385, 407, 413, 414], "thank": [326, 333], "thei": [12, 19, 20, 28, 117, 145, 260, 339, 361, 364, 383, 386, 399, 400, 402, 404, 410, 413, 414, 415, 416], "them": [20, 21, 26, 33, 112, 190, 202, 251, 278, 315, 318, 339, 341, 344, 381, 382, 383, 404, 417], "themselv": [279, 323], "theorem": [240, 292, 326, 333, 365, 410], "theoret": [190, 341, 417], "theori": [106, 107, 240, 241, 326, 333, 407], "therefor": [111, 279, 334, 395, 407], "therein": 333, "theta": [86, 220, 222, 223, 251, 261, 263, 287, 329, 335, 340, 351, 372, 400, 401], "theta2": 400, "theta_max": [281, 288, 289, 290, 291, 341, 370], "theta_z_max": [281, 288, 289, 290, 291, 341], "thi": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 23, 25, 26, 27, 28, 32, 33, 34, 35, 37, 38, 40, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 57, 59, 60, 62, 63, 70, 74, 80, 81, 83, 84, 86, 87, 88, 89, 91, 101, 103, 105, 106, 107, 110, 111, 112, 113, 115, 117, 122, 123, 124, 126, 127, 128, 129, 140, 145, 147, 148, 153, 155, 160, 166, 167, 168, 175, 177, 178, 180, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 198, 200, 202, 203, 204, 205, 206, 207, 208, 213, 214, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 251, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 274, 275, 276, 277, 279, 280, 287, 292, 293, 295, 300, 310, 314, 315, 318, 320, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 345, 346, 347, 350, 351, 354, 355, 356, 358, 361, 362, 363, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 390, 400, 402, 403, 404, 406, 407, 408, 410, 412, 413, 414, 415, 416, 417], "thin": [265, 268, 272, 273, 361], "third": [206, 331], "thorac": 21, "thorough": 341, "those": [151, 363], "three": [156, 188, 397], "three_d": [184, 192, 193, 194, 205, 339], "thres_conv": [117, 265, 327, 357], "thresh_conv": [268, 272, 273], "threshold": [12, 19, 28, 39, 50, 51, 112, 113, 117, 123, 131, 133, 134, 144, 145, 151, 158, 162, 166, 177, 190, 198, 265, 268, 273, 293, 295, 300, 302, 310, 314, 332, 344, 345, 383, 385, 387, 388, 394, 407], "threshold_3d": 112, "threshold_nd": 112, "thresold_2d": 112, "thresold_func": 112, "through": [32, 34, 35, 38, 41, 44, 48, 81, 82, 97, 203, 282, 320, 326, 333, 335, 364, 365, 400, 408, 413, 417], "thu": [17, 22, 86, 88, 94, 112, 113, 184, 192, 205, 214, 268, 272, 273, 330, 357, 384, 407], "ti": 295, "tight": [310, 313, 345], "tight_layout": [331, 363], "tikhonov": 407, "tild": [180, 184, 189, 190, 192, 194, 198, 200, 205, 261, 267, 365], "tilt": [281, 290, 370, 417], "time": [9, 12, 17, 32, 33, 35, 37, 38, 44, 45, 46, 47, 48, 81, 88, 90, 92, 108, 109, 117, 125, 172, 177, 180, 183, 184, 186, 189, 203, 204, 205, 206, 213, 236, 237, 243, 245, 246, 253, 258, 259, 264, 265, 266, 267, 270, 271, 274, 275, 276, 279, 282, 286, 287, 315, 318, 320, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 345, 346, 347, 350, 351, 354, 355, 356, 357, 358, 361, 362, 363, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 404, 406, 407, 408, 412, 413], "time_dim": [315, 318, 364], "time_pair": 365, "timeagnosticnet": [32, 44, 404], "timeaveragingnet": 404, "timemixin": [108, 109, 184, 287, 398], "timestamp": [304, 397], "timestep": [88, 97, 258, 259, 261, 263, 266, 267, 270, 271, 363, 364, 365], "tini": 338, "tip": [272, 273], "tissu": 16, "titl": [208, 310, 312, 313, 315, 318, 320, 326, 329, 331, 333, 334, 335, 336, 337, 338, 339, 341, 346, 347, 355, 356, 358, 361, 362, 363, 364, 365, 366, 369, 381, 382, 383, 386, 397], "tkbn": 320, "to_complex": 17, "to_complex_denois": [334, 404], "to_logimag": 320, "to_stat": [109, 184], "to_torch_complex": 193, "tocomplex": 412, "togeth": [9, 341, 364, 417], "toi": [338, 381], "tol": [35, 38, 169, 170, 171, 172, 173, 174, 190, 198, 320, 407], "tol_int": 144, "toler": [35, 38, 81, 167, 169, 170, 171, 172, 173, 174, 190, 198, 323], "tomographi": [12, 21, 24, 87, 89, 117, 123, 125, 133, 135, 139, 140, 141, 144, 145, 154, 180, 182, 186, 190, 191, 195, 198, 216, 302, 303, 308, 310, 311, 344, 352, 353, 359, 360, 375, 384, 394, 399, 401, 411], "too": [23, 28, 48, 70, 102, 188, 193, 279], "tool": [20, 320, 395], "toolbox": [326, 333, 399], "top": [45, 52, 53, 54, 78, 112, 113, 117, 123, 135, 136, 142, 148, 156, 172, 180, 190, 197, 198, 205, 209, 217, 262, 269, 292, 312, 320, 340, 344, 355, 361, 372, 376, 377, 384, 385, 396, 400, 403, 407, 410], "topk": [112, 113], "torch": [12, 14, 17, 19, 20, 21, 23, 24, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 141, 143, 144, 146, 147, 148, 149, 150, 151, 155, 156, 157, 158, 159, 161, 163, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 216, 217, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 298, 299, 302, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 345, 346, 347, 350, 351, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 395, 397, 399, 400, 404, 407, 410, 412, 413, 414, 415, 417], "torch_shuffl": 17, "torchist": 232, "torchkbnufft": [203, 320], "torchmetr": [64, 68, 69, 70, 74, 75, 76], "torchmetric_kwarg": 75, "torchvis": [13, 15, 16, 17, 18, 19, 22, 25, 27, 30, 31, 34, 287, 305, 323, 327, 328, 330, 339, 340, 341, 346, 347, 354, 357, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 385, 386, 412, 417], "torso": 88, "total": [12, 20, 21, 26, 42, 47, 55, 79, 103, 106, 107, 112, 117, 123, 133, 144, 145, 149, 154, 176, 180, 186, 190, 195, 198, 243, 245, 253, 285, 302, 305, 306, 310, 311, 320, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 388, 394, 402, 404, 406, 413, 416], "total_batch": 47, "totalloss": [323, 338, 339, 340, 351, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 416], "totensor": [323, 327, 328, 330, 340, 346, 347, 354, 357, 370, 372, 373, 374, 375, 376, 377, 381, 382, 383, 385, 386, 412], "toulous": 389, "tour": [12, 14, 17, 19, 26, 28, 34, 39, 51, 78, 87, 89, 96, 102, 110, 111, 117, 175, 176, 177, 179, 180, 181, 182, 183, 184, 186, 189, 190, 192, 193, 194, 195, 196, 198, 199, 200, 207, 208, 209, 210, 213, 214, 220, 237, 240, 243, 245, 247, 248, 249, 251, 252, 253, 280, 287, 293, 300, 302, 303, 308, 310, 313, 315, 333, 342, 343, 344, 394], "toward": [232, 346, 347], "tqdm": [12, 351, 363, 365], "track": [296, 397, 414], "tracker": [390, 391], "trade": 402, "tradeoff": 414, "tradit": [88, 320], "train": [0, 2, 12, 14, 15, 17, 19, 22, 26, 28, 32, 39, 44, 45, 47, 48, 51, 56, 58, 59, 60, 61, 62, 63, 64, 66, 70, 74, 75, 76, 77, 78, 81, 82, 83, 84, 87, 88, 89, 91, 97, 100, 101, 102, 103, 104, 110, 147, 180, 189, 190, 198, 268, 272, 273, 276, 278, 279, 293, 295, 302, 305, 314, 326, 327, 328, 330, 332, 334, 338, 342, 343, 344, 354, 355, 357, 358, 363, 364, 365, 370, 392, 394, 402, 405, 408, 410, 411, 412, 414, 415, 416], "train_base_dataset": [372, 381, 382, 383, 385, 386], "train_batch_s": [340, 381, 382, 383, 384, 385, 386], "train_dataload": [12, 277, 279, 323, 330, 338, 339, 340, 351, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386], "train_datapoint": [28, 327, 340, 354, 357, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 385, 386], "train_dataset": [28, 323, 327, 328, 339, 340, 351, 354, 357, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 395, 412], "train_dataset_nam": [340, 373, 374, 376, 377, 381, 382, 383, 384, 385, 386], "train_img": 351, "train_it": 12, "train_loss": [36, 37, 46, 50, 64, 68, 69, 70, 74, 75, 76, 414], "train_perc": [26, 369, 371], "train_test_transform": [382, 383], "train_transform": [340, 381, 385, 386], "trainabl": [43, 45, 48, 52, 53, 54, 110, 293, 295, 323, 332, 338, 339, 340, 356, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 385, 386, 405, 410], "trainable_param": [293, 295, 332, 381, 382, 383, 385, 386, 410], "trainer": [14, 277, 279, 323, 338, 339, 340, 351, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 395, 402, 414, 415], "trainingset": 14, "trajectori": [20, 248, 258, 259, 270, 271, 326, 364], "trajectory_first": 20, "trajectory_index": 20, "trajectory_seed_1": 364, "trajectory_vp": 364, "tran": 173, "transact": [80, 384], "transform": [0, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 34, 39, 40, 41, 47, 78, 80, 87, 92, 95, 103, 105, 110, 112, 113, 151, 177, 180, 184, 186, 189, 190, 192, 193, 194, 195, 198, 202, 203, 205, 207, 211, 212, 213, 214, 222, 223, 230, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 300, 302, 303, 305, 308, 310, 320, 323, 327, 328, 336, 339, 340, 342, 343, 344, 345, 346, 347, 351, 354, 355, 357, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 385, 386, 394, 395, 399, 404, 407, 411, 413], "transform2": 341, "transform3": 341, "transform_data": 412, "transform_func": 211, "transform_func_inv": 211, "transform_kspac": 17, "transform_m": 23, "transform_pan": 23, "transform_target": 17, "transformerblock": 103, "transformparam": 287, "translat": [34, 101, 281, 285, 288, 289, 291, 370, 371, 413, 417], "transmiss": 187, "transpos": [78, 85, 93, 117, 126, 180, 188, 190, 227, 228, 229, 335, 399], "treat": [78, 213], "trick": 365, "trigger": [251, 331, 341], "trim": 212, "triplet": 14, "trivial": [187, 189, 361], "true": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 32, 34, 35, 36, 37, 38, 41, 42, 44, 45, 46, 47, 48, 50, 52, 53, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 81, 86, 88, 89, 92, 94, 95, 98, 99, 101, 103, 105, 108, 110, 116, 117, 126, 138, 139, 142, 143, 145, 151, 155, 156, 157, 164, 165, 166, 167, 168, 177, 178, 183, 189, 190, 192, 193, 194, 196, 200, 202, 203, 205, 207, 212, 214, 217, 221, 222, 223, 224, 225, 226, 227, 228, 229, 238, 246, 260, 261, 263, 265, 268, 271, 276, 278, 279, 280, 283, 287, 292, 302, 305, 306, 310, 311, 312, 313, 314, 315, 320, 323, 326, 327, 328, 329, 330, 332, 333, 334, 336, 338, 339, 340, 341, 345, 346, 347, 350, 351, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 393, 406, 407, 412, 414, 416, 417], "true_sigma": 377, "truli": [52, 53, 54], "truth": [12, 14, 16, 17, 19, 20, 32, 33, 44, 51, 59, 60, 72, 117, 126, 236, 250, 276, 279, 292, 293, 323, 329, 338, 339, 340, 346, 347, 350, 351, 355, 356, 358, 361, 362, 363, 365, 366, 369, 370, 375, 381, 382, 383, 385, 386, 402, 405, 413, 416], "try": [287, 320, 390, 393], "tun": 263, "tune": [163, 167, 323, 351, 358, 369], "tupl": [12, 14, 17, 20, 24, 29, 32, 44, 47, 53, 82, 86, 91, 95, 100, 105, 117, 126, 176, 177, 178, 179, 181, 183, 184, 187, 189, 192, 193, 194, 196, 201, 202, 203, 204, 205, 207, 211, 212, 217, 220, 235, 236, 237, 238, 239, 240, 241, 246, 248, 249, 250, 252, 255, 258, 265, 268, 270, 272, 273, 274, 275, 276, 279, 307, 308, 310, 312, 313, 315, 318, 320, 384, 416], "turn": [92, 265, 292, 293, 326, 341, 345, 350, 365, 404, 410, 414], "tutori": [83, 84, 126, 292, 363, 365, 389, 410], "tv": [55, 106, 107, 117, 123, 133, 144, 145, 149, 154, 176, 180, 186, 190, 195, 198, 302, 305, 306, 310, 311, 344, 348, 349, 383, 394], "tv_smooth": 383, "tvdenois": [149, 404], "tvloss": 413, "tvprior": [107, 346, 407], "tweedi": [47, 147, 270, 364, 365, 366, 408], "two": [16, 17, 43, 47, 48, 49, 66, 70, 138, 144, 148, 178, 189, 190, 195, 198, 214, 223, 247, 251, 287, 323, 350, 351, 363, 365, 371, 372, 373, 402, 407, 414], "twophoton_bpae_b": 16, "twophoton_bpae_g": 16, "twophoton_bpae_r": 16, "twophoton_mic": 16, "tx_prev": 126, "type": [12, 16, 17, 20, 33, 39, 44, 48, 58, 70, 78, 97, 100, 111, 177, 178, 180, 184, 193, 194, 197, 198, 203, 205, 210, 212, 213, 214, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 235, 237, 238, 239, 240, 241, 242, 244, 245, 247, 251, 253, 254, 255, 258, 259, 262, 264, 269, 270, 274, 275, 287, 299, 300, 301, 303, 304, 305, 306, 309, 316, 317, 319, 323, 330, 333, 337, 341, 383, 402, 404, 412], "type_t": 88, "typic": [56, 58, 147, 184, 205, 270, 364, 399, 407, 408, 412], "u": [52, 53, 54, 85, 98, 110, 116, 123, 127, 128, 129, 131, 133, 134, 138, 144, 148, 153, 180, 190, 215, 216, 269, 292, 323, 330, 340, 355, 361, 363, 364, 365, 372, 373, 374, 375, 376, 377, 384, 396, 401, 407, 408, 410], "u0": 384, "u2": [106, 107], "u_": [126, 155, 156, 157, 158, 160, 162, 355, 385, 406, 407], "u_0": [117, 156], "u_adjoint": [180, 361], "u_init": [332, 385], "u_k": [126, 156, 158, 160, 162, 355, 385, 406, 407], "uair": 61, "uair_model": 323, "uairgeneratorloss": [323, 413], "uc": 351, "ucl": 389, "uk": 389, "ula": [35, 87, 89, 123, 133, 144, 145, 147, 180, 186, 189, 190, 195, 198, 268, 302, 308, 310, 344, 367, 368, 394, 408], "ula_mean": 361, "ula_var": 361, "ultim": 390, "ulyanov": [86, 329], "un": [82, 178, 377], "unadjust": [272, 273, 361, 366, 408], "unavail": 22, "unbias": [52, 53, 54, 338, 376], "uncertainti": [35, 87, 89, 123, 133, 144, 145, 147, 180, 186, 189, 190, 195, 198, 268, 273, 302, 308, 310, 344, 362, 367, 368, 392, 394], "uncond": [97, 364], "uncondit": [77, 97, 270, 364, 395, 408], "under": [88, 330, 333, 341, 351, 382, 383, 393, 408], "underli": [12, 88, 139, 270, 364, 396], "undersampl": [14, 184, 192, 194, 205, 211, 212, 237, 243, 245, 253, 336, 339, 369, 375, 413], "underset": [90, 106, 107, 112, 113, 117, 125, 127, 129, 131, 133, 134, 144, 156, 190, 198, 320, 346, 347, 351, 385, 406, 407], "understand": 400, "understood": 329, "undesir": [140, 310], "unet": [77, 88, 97, 104, 108, 109, 279, 323, 339, 340, 370, 372, 373, 374, 375, 376, 377, 404], "uneven": [12, 414], "unflatten": [108, 178, 213, 287], "unfold": [0, 12, 19, 28, 39, 51, 87, 89, 98, 99, 112, 123, 127, 133, 141, 144, 145, 180, 183, 186, 189, 190, 195, 198, 276, 292, 293, 294, 295, 302, 305, 310, 314, 332, 356, 372, 381, 388, 392, 394, 395, 402, 405], "unfolded_build": [332, 382, 383, 384, 385, 386, 410], "unfolded_pgd": [382, 383, 386], "ungrid": 203, "unif": 81, "unifi": [396, 408], "uniform": [64, 76, 188, 203, 212, 215, 216, 243, 245, 253, 291, 316, 320, 336], "uniform_phas": 212, "uniformgaussiannois": 47, "uniformli": [214, 244, 254, 283, 404], "uniformnois": [351, 401], "union": [17, 20, 77, 97, 203, 315, 318, 320], "uniqu": [14, 106, 107], "unit": [94, 177, 190, 196, 212, 239, 241, 334, 335, 363], "unitari": 204, "univ": 389, "unknown": [52, 53, 187, 188, 338, 370, 377, 395], "unless": 336, "unlik": [20, 80, 89, 265, 320, 408], "unmix": [188, 338], "unnormalis": [245, 253], "unorgan": 45, "unpad": 14, "unrol": [32, 44, 78, 111, 276, 292, 323, 332, 339, 369, 371, 381, 382, 383, 384, 385, 386, 404, 405, 410], "unshear": 178, "unsqueez": [35, 38, 180, 208, 320, 328, 333, 335, 336, 337, 338, 339, 345, 346, 347, 354, 357, 362, 366, 381, 384], "unsupadversarialdiscriminatorloss": [56, 323, 413], "unsupadversarialgeneratorloss": [58, 323, 413], "unsupervis": [45, 61, 62, 63, 83, 84, 281, 290, 323, 338, 370, 372, 413, 416], "unsur": [12, 19, 28, 39, 52, 53, 78, 87, 102, 110, 180, 182, 186, 190, 195, 198, 300, 302, 344, 378, 379, 394], "unti": 295, "until": 369, "untouch": 151, "untrain": 402, "unus": [70, 111, 250], "unwrap": 213, "up": [12, 15, 17, 21, 53, 77, 88, 97, 100, 107, 190, 281, 288, 291, 328, 332, 335, 351, 356, 381, 382, 384, 386, 412], "upcom": 341, "upconv": [85, 93], "updat": [12, 47, 107, 117, 118, 126, 138, 155, 156, 157, 158, 159, 161, 175, 176, 178, 183, 184, 185, 186, 188, 189, 191, 192, 193, 194, 198, 199, 200, 205, 208, 209, 210, 216, 259, 266, 296, 339, 351, 355, 357, 363, 365, 384, 385, 390, 393, 400, 407, 416], "update_data_fidelity_fn": [117, 126], "update_metrics_fn": [117, 126], "update_paramet": [32, 44, 45, 47, 48, 175, 176, 183, 185, 186, 188, 191, 192, 194, 198, 199, 200, 208, 209, 210, 216], "update_params_fn": [117, 126], "update_prior_fn": [117, 126], "upgrad": 393, "upload": [329, 361, 362, 366], "upp": [231, 232], "upper": [231, 232], "upsampl": [85, 93, 100, 105, 399], "upsample_mod": [85, 93], "upscal": 105, "urban": [23, 27, 338, 370, 412], "urban100": [27, 323, 370], "urban100_hr": 27, "urban100_inpainting_homography_model": 370, "urban100hr": [323, 370, 412], "url": [17, 105, 301, 303, 305, 308, 326, 329, 332, 334, 336, 337, 338, 339, 350, 351, 355, 356, 358, 361, 362, 363, 365, 366, 369, 371, 372, 373, 374, 375, 376, 393, 397, 406], "us": [1, 3, 9, 13, 16, 20, 25, 33, 36, 37, 38, 41, 46, 47, 50, 66, 70, 71, 73, 74, 75, 77, 79, 90, 91, 94, 103, 104, 105, 107, 120, 126, 128, 137, 148, 161, 168, 169, 172, 173, 174, 202, 211, 212, 223, 225, 226, 228, 229, 231, 232, 235, 236, 242, 250, 267, 272, 286, 320, 323, 326, 327, 328, 331, 332, 333, 334, 336, 337, 338, 340, 341, 342, 343, 344, 346, 347, 350, 351, 354, 355, 356, 357, 358, 361, 362, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 412, 413, 414, 416, 417], "usag": [35, 38, 48, 279, 310, 313, 400, 408, 414, 417], "use_bicubic_init": 357, "use_brovei": 196, "use_checkpoint": 105, "use_fft": 183, "use_filt": 222, "use_fp16": 88, "use_sigmoid": 101, "user": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 20, 28, 47, 77, 85, 88, 89, 93, 97, 104, 105, 130, 154, 179, 180, 182, 196, 276, 279, 294, 295, 315, 338, 361, 364, 393, 400, 407, 410, 416], "userwarn": [320, 323, 331, 336, 339, 341, 363, 369, 375, 376, 384], "usual": [14, 20, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 279, 320, 363, 365, 414], "usv": 361, "ut": [121, 356], "util": [0, 12, 14, 17, 21, 23, 26, 28, 29, 30, 31, 49, 66, 71, 74, 90, 100, 125, 148, 167, 168, 169, 170, 171, 172, 173, 174, 187, 190, 196, 198, 208, 209, 210, 257, 260, 263, 276, 277, 279, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 345, 346, 347, 350, 351, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 393, 400, 406, 412, 414], "uv": 320, "uv_coordin": 320, "v": [117, 126, 138, 180, 188, 190, 197, 198, 292, 335, 355, 361, 375, 410, 414], "v_": [159, 161, 407], "v_adjoint": [180, 335, 361], "v_k": 355, "val": [15, 19, 22, 28, 296, 412], "val1": 22, "val_datapoint": 28, "val_dataset": [22, 28, 339], "val_transform": [327, 328, 346, 347, 354, 357], "valid": [12, 15, 17, 28, 48, 111, 144, 175, 183, 196, 208, 224, 226, 227, 229, 235, 252, 326, 340, 347, 370, 381, 408, 411], "valu": [12, 16, 19, 20, 30, 35, 38, 47, 52, 53, 54, 57, 73, 75, 86, 88, 90, 95, 105, 106, 114, 116, 117, 124, 125, 126, 139, 144, 147, 149, 151, 154, 168, 170, 173, 176, 180, 184, 185, 186, 191, 192, 194, 196, 200, 205, 207, 214, 223, 232, 237, 238, 246, 251, 258, 260, 263, 270, 272, 273, 287, 293, 294, 295, 296, 310, 313, 320, 329, 334, 335, 336, 337, 350, 361, 362, 363, 364, 376, 382, 383, 386, 397, 398, 400, 404, 407, 408, 412, 414], "van": 169, "vanilla": [12, 19, 28, 39, 51, 87, 89, 117, 123, 133, 141, 144, 145, 154, 183, 186, 190, 195, 198, 214, 293, 295, 302, 303, 305, 308, 310, 311, 314, 344, 359, 360, 387, 388, 394], "var": [268, 362, 366], "var_has_converg": 268, "varepsilon": [261, 263, 363, 365], "varepsilon_t": 263, "varga": 272, "vari": [12, 15, 17, 32, 44, 108, 109, 184, 205, 208, 213, 237, 242, 243, 245, 252, 253, 315, 318, 339, 369, 399, 404, 412], "variabl": [14, 53, 54, 81, 98, 99, 106, 107, 116, 117, 118, 119, 120, 121, 123, 124, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 141, 143, 144, 146, 148, 149, 150, 151, 156, 259, 266, 267, 287, 300, 327, 328, 332, 346, 347, 354, 355, 357, 358, 366, 369, 376, 377, 384, 385, 402, 407, 412], "varianc": [87, 185, 265, 266, 267, 268, 272, 273, 274, 275, 361, 362, 363, 364, 366, 408, 414], "varianceexplodingdiffus": 364, "variancepreservingdiffus": 364, "variant": [112, 113, 169], "variat": [55, 106, 107, 111, 117, 123, 133, 144, 145, 149, 154, 176, 180, 186, 190, 195, 198, 302, 305, 306, 310, 311, 344, 348, 349, 351, 394, 395, 404, 406, 413], "varieti": [395, 412], "variou": [6, 7, 11, 179, 184, 188, 192, 194, 205, 213, 270, 323, 336, 338, 339, 362, 364, 370, 374, 376, 377, 395, 408, 411, 413, 417], "varnet": [339, 409], "vdot": [202, 210, 257], "ve": [97, 274, 275, 364], "vector": [12, 35, 38, 52, 53, 54, 77, 81, 82, 84, 86, 97, 106, 112, 117, 180, 188, 190, 197, 198, 232, 245, 253, 273, 293, 361, 396, 408], "veloc": 280, "verbos": [12, 28, 35, 38, 86, 106, 107, 117, 126, 166, 167, 168, 169, 170, 173, 174, 190, 259, 260, 261, 263, 265, 268, 270, 272, 273, 276, 279, 302, 320, 323, 327, 329, 334, 340, 346, 347, 351, 354, 355, 356, 357, 358, 361, 362, 364, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 407, 412], "verbose_individual_loss": 12, "veri": [279, 320, 323, 334, 339, 351, 365], "verif": 13, "verifi": [13, 15, 18, 22, 23, 25, 27, 170, 184, 190, 193, 268, 273, 377], "verify_split_dataset_integr": [15, 22], "version": [13, 15, 16, 18, 21, 22, 25, 27, 32, 45, 78, 92, 106, 107, 177, 277, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 334, 363, 393, 408], "vert": [45, 130, 264, 270, 333, 408], "vert_2": 130, "vertic": [15, 55, 237, 243, 245, 253, 312, 369], "vgg": 323, "vi": [340, 371, 372, 373, 374, 376, 377, 381, 382, 383, 384, 385, 386], "via": [26, 28, 41, 42, 70, 85, 88, 89, 90, 103, 104, 110, 125, 139, 147, 176, 177, 180, 186, 189, 190, 195, 197, 198, 204, 207, 208, 251, 287, 320, 327, 345, 350, 355, 361, 363, 365, 366, 373, 374, 376, 377, 393, 400, 403, 407, 408, 410, 412, 415, 417], "vid": [315, 318], "vid_list": [315, 318], "video": [20, 32, 44, 184, 243, 245, 253, 286, 287, 315, 318, 339, 369], "view": [14, 16, 252, 256, 284, 313, 315, 327, 336, 351, 365, 366, 412], "viridi": [320, 345], "virtual": [34, 41, 292, 410], "visibl": [287, 320, 339], "vision": [22, 122, 235, 320, 354], "visit": 365, "visual": [12, 320, 363, 365, 381, 382, 383, 384, 386, 397, 399, 408], "visualis": [12, 205, 339, 369, 375, 417], "vjp": [190, 197, 198], "vol": [106, 107, 173], "volum": [17, 26, 192, 194, 339, 395], "volume_data": [333, 345], "volume_perserv": 280, "volumetr": 399, "vorst": 169, "voxel": [193, 241, 412], "vp": [275, 364], "vrv": 361, "vu": [87, 89, 117, 123, 133, 138, 141, 144, 145, 154, 164, 165, 180, 186, 190, 195, 198, 207, 302, 303, 308, 310, 311, 344, 359, 360, 394, 406], "w": [14, 17, 30, 31, 32, 44, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 86, 88, 94, 100, 103, 105, 108, 109, 122, 142, 143, 175, 176, 177, 178, 179, 181, 184, 188, 189, 190, 192, 193, 194, 196, 203, 204, 205, 206, 207, 208, 211, 212, 213, 217, 218, 219, 224, 225, 226, 227, 228, 229, 235, 236, 237, 238, 240, 243, 245, 246, 250, 252, 253, 258, 270, 271, 276, 287, 310, 313, 315, 318, 320, 331, 333, 336, 339, 345, 354, 364, 365, 369, 383, 384, 404, 414, 417], "w_": [258, 259, 264, 266, 267, 270, 364, 408], "w_k": [208, 235], "w_t": [259, 264, 266, 267, 274, 275, 364, 408], "wa": [19, 23, 45, 48, 59, 60, 62, 63, 74, 80, 81, 82, 83, 84, 89, 91, 101, 103, 104, 105, 236, 272, 332, 338, 351, 365, 369, 371, 375], "wai": [12, 179, 323, 330, 332, 341, 371, 372, 373, 374, 376, 377, 390, 400, 414, 416], "wald": 100, "walk": 335, "wandb": [12, 381, 386], "wandb_setup": 12, "wandb_vi": [12, 340, 369, 371, 372, 373, 374, 376, 381, 382, 383, 384, 385, 386], "wang": [91, 281, 290, 338, 370, 392], "want": [12, 20, 28, 35, 38, 194, 213, 224, 227, 326, 333, 335, 339, 341, 346, 347, 357, 364, 395, 400, 414, 416], "warm": 107, "warn": [144, 323, 339, 369, 375, 376, 384], "wavdict": 345, "wave": [241, 333], "wavelength": [239, 241, 333], "wavelet": [87, 112, 113, 117, 123, 133, 144, 145, 151, 154, 180, 186, 189, 190, 195, 198, 302, 305, 310, 311, 332, 344, 348, 349, 382, 385, 394, 404, 407], "waveletdenois": [113, 151, 332, 345, 385, 404], "waveletdictdenois": [345, 404], "waveletprior": [320, 345, 347, 382, 385, 407], "we": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 35, 45, 48, 74, 86, 88, 92, 112, 126, 127, 129, 138, 172, 177, 178, 179, 180, 184, 186, 190, 191, 192, 194, 197, 205, 208, 212, 217, 230, 264, 269, 270, 274, 275, 277, 310, 320, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 345, 346, 347, 350, 351, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 389, 390, 395, 397, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417], "websit": 14, "weight": [12, 34, 41, 42, 46, 55, 56, 58, 59, 60, 61, 62, 63, 65, 74, 77, 85, 88, 89, 90, 93, 94, 97, 103, 104, 105, 125, 139, 163, 167, 168, 188, 203, 232, 246, 264, 274, 275, 293, 295, 296, 332, 334, 340, 345, 350, 351, 355, 358, 365, 369, 371, 372, 373, 374, 376, 381, 382, 384, 385, 395, 404, 408], "weight_adv": [56, 58, 59, 60, 61, 62, 63], "weight_decai": [323, 340, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 383, 385, 386], "weight_mc": 61, "weiss": [125, 235, 351], "welcom": [389, 390], "welford": 268, "well": [32, 34, 40, 41, 42, 43, 44, 51, 82, 126, 138, 190, 270, 276, 293, 329, 335, 346, 347, 364, 365, 392, 400, 406, 407], "were": [20, 271, 323, 370, 383, 386], "wgan": [57, 323, 402, 413], "what": [20, 341], "when": [12, 17, 19, 20, 28, 33, 35, 38, 42, 43, 45, 48, 50, 68, 69, 86, 88, 107, 110, 117, 126, 139, 144, 145, 168, 172, 190, 198, 200, 213, 236, 251, 263, 264, 270, 274, 275, 279, 283, 287, 323, 326, 327, 333, 336, 339, 355, 357, 361, 364, 365, 366, 373, 375, 383, 390, 402, 404, 412, 413, 415, 416], "where": [12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 25, 27, 28, 32, 34, 35, 38, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 52, 53, 54, 55, 61, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 86, 90, 100, 102, 106, 107, 112, 113, 115, 116, 117, 123, 125, 126, 128, 130, 132, 138, 139, 142, 144, 147, 148, 149, 151, 155, 156, 157, 158, 159, 160, 161, 162, 163, 166, 167, 170, 175, 176, 177, 178, 180, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 223, 224, 225, 226, 227, 228, 229, 233, 234, 235, 236, 237, 238, 243, 244, 245, 246, 248, 250, 253, 254, 257, 258, 259, 261, 262, 263, 266, 267, 269, 270, 273, 274, 275, 276, 281, 287, 288, 289, 291, 292, 293, 310, 313, 314, 320, 323, 327, 329, 331, 333, 334, 336, 338, 339, 340, 345, 346, 347, 350, 351, 354, 355, 356, 361, 363, 364, 365, 366, 369, 372, 373, 376, 377, 382, 383, 384, 385, 395, 400, 401, 402, 406, 407, 408, 410, 412, 414, 416], "wherea": [12, 45, 48, 68, 69, 207, 220, 361, 363, 365, 405], "whether": [12, 17, 20, 23, 26, 35, 38, 57, 67, 81, 94, 98, 99, 101, 105, 106, 107, 117, 140, 154, 167, 168, 193, 232, 258, 259, 262, 265, 270, 278, 292, 293, 294, 295, 305, 306, 307, 308, 314, 413], "which": [9, 12, 14, 19, 20, 23, 28, 32, 35, 40, 42, 43, 44, 45, 47, 48, 50, 51, 52, 53, 54, 57, 77, 81, 85, 89, 97, 103, 108, 109, 114, 116, 117, 118, 119, 120, 121, 122, 123, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 141, 143, 144, 146, 147, 148, 149, 150, 151, 161, 167, 173, 176, 177, 178, 179, 183, 188, 189, 190, 192, 194, 198, 203, 207, 214, 222, 223, 226, 228, 229, 232, 259, 260, 261, 264, 266, 267, 268, 270, 271, 274, 275, 276, 277, 278, 279, 280, 282, 287, 288, 289, 290, 291, 293, 295, 307, 308, 312, 327, 328, 330, 332, 333, 334, 336, 338, 339, 345, 346, 347, 350, 351, 354, 357, 361, 362, 363, 364, 365, 366, 369, 371, 373, 374, 376, 377, 381, 382, 383, 385, 386, 392, 395, 397, 400, 401, 402, 404, 405, 406, 407, 408, 410, 412, 413, 414, 415, 416, 417], "while": [9, 14, 87, 117, 168, 172, 270, 323, 329, 333, 334, 335, 364, 371, 402, 406, 407, 417], "whilst": 279, "white": [175, 176, 183, 190, 350, 363, 365, 399], "whiten": 320, "whole": [23, 32, 44, 92, 110, 125, 268, 350, 351, 369, 372, 373, 374, 375, 376, 377, 413], "whose": [39, 187, 214, 259, 312, 314, 364, 407], "why": [363, 365], "wide": [16, 412], "widefield_bpae_b": 16, "widefield_bpae_g": 16, "widefield_bpae_r": 16, "widehat": [261, 263, 345, 363, 365], "width": [24, 29, 88, 98, 99, 125, 178, 184, 192, 202, 205, 214, 239, 241, 245, 253, 285, 310, 313, 345], "wiki": [45, 75, 169, 170, 174, 181, 185, 240, 326, 333], "wikimedia": [329, 361, 362, 366], "wikipedia": [45, 75, 169, 170, 174, 181, 185, 240, 326, 329, 333, 336, 361, 362, 366], "win": 390, "window": [95, 105, 221, 390], "window_s": 105, "wise": [67, 186, 187, 193, 202, 323, 399], "withbia": 103, "within": [12, 15, 17, 88, 339, 399, 405, 411, 415], "without": [28, 32, 44, 48, 74, 88, 189, 198, 236, 238, 246, 250, 282, 283, 287, 293, 305, 369, 370, 390, 400, 408, 416], "work": [9, 22, 77, 86, 97, 103, 259, 287, 320, 323, 329, 331, 333, 336, 339, 340, 357, 362, 363, 365, 369, 375, 376, 384, 385, 417], "worker": 28, "workflow": [14, 390], "world": [22, 329, 361, 362, 366, 370, 389], "worldview": [23, 338], "wors": 375, "would": [320, 416], "wrap": [12, 13, 33, 36, 37, 46, 50, 64, 70, 76, 80, 193, 213, 280, 286, 287, 356, 381, 382, 383, 386, 404, 414], "wrap_flatten_c": 213, "wrapper": [14, 25, 27, 48, 51, 108, 109, 354, 397, 403, 404], "write": [17, 151, 261, 263, 345, 346, 347, 356, 357, 363, 365, 384, 407, 415, 416], "writer": 315, "written": [17, 117, 413], "wrong": 186, "wv": [112, 113, 151, 320, 332, 345, 347, 382, 385], "wv_list": 320, "wvdim": [112, 113, 151, 345], "ww": 224, "www": 21, "wx": 382, "x": [12, 14, 16, 17, 19, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 82, 83, 85, 87, 88, 89, 90, 91, 92, 94, 97, 99, 101, 103, 105, 106, 107, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 239, 240, 241, 248, 252, 256, 257, 258, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 272, 273, 276, 279, 281, 286, 287, 288, 289, 290, 291, 292, 295, 298, 299, 309, 315, 316, 317, 318, 319, 320, 323, 327, 328, 329, 331, 333, 334, 335, 336, 337, 338, 339, 341, 345, 346, 347, 351, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 369, 370, 372, 382, 383, 384, 385, 393, 395, 396, 399, 400, 401, 402, 405, 406, 407, 408, 410, 412, 413, 414, 416, 417], "x0": [173, 190, 259, 339, 363, 365, 384], "x0_pred": 365, "x0_t": 365, "x1": [339, 397], "x2": [22, 106, 107, 336, 397], "x3": 22, "x4": 22, "x64": [341, 369], "x_": [117, 126, 138, 155, 156, 157, 158, 159, 160, 161, 162, 163, 167, 258, 259, 263, 264, 266, 267, 273, 293, 345, 355, 356, 361, 366, 382, 383, 385, 406, 407, 408, 410], "x_0": [117, 156, 167, 173, 264, 408], "x_1": 186, "x_adj": 400, "x_aux": 363, "x_b": 186, "x_bar": 361, "x_cur": 345, "x_dagger": [190, 400], "x_est": [334, 337], "x_gd_rand": 334, "x_gd_spec": 334, "x_grai": 326, "x_gt": [117, 126, 292, 293, 320, 334, 346, 347, 355, 356, 358], "x_hat": [102, 295, 338, 345, 364, 370, 393, 395, 406, 407, 410, 414], "x_hat_vp": 364, "x_hist": 126, "x_i": [41, 42, 121, 130, 137, 143, 188, 407, 414], "x_in": 35, "x_init": [117, 125, 126, 198, 258, 259, 263, 268, 270, 320, 332, 364, 369, 385], "x_k": [117, 126, 138, 155, 156, 158, 159, 160, 161, 162, 163, 167, 273, 293, 355, 356, 366, 382, 383, 385, 406, 407, 410], "x_lin": [329, 346, 347, 355, 356, 358, 361, 362, 366], "x_model": [320, 346, 347, 355, 356, 358], "x_n": [193, 345], "x_net": [12, 32, 33, 34, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 108, 109, 279, 338, 339, 413, 414, 416], "x_noisi": 363, "x_out": 350, "x_phase": 334, "x_phase_gd_rand": 334, "x_phase_gd_spec": 334, "x_phase_pnp": 334, "x_phase_spec": 334, "x_pnp": 334, "x_prev": [117, 126, 345, 355], "x_prox": [190, 363, 400], "x_prox_scal": 363, "x_recon": 166, "x_rgb": 326, "x_rss": 339, "x_sampl": 363, "x_sampled_sc": 363, "x_shift": [202, 287, 417], "x_spec": 334, "x_stretch_factor_min": [281, 288, 289, 290, 291], "x_t": [258, 259, 263, 264, 266, 267, 269, 270, 274, 275, 281, 288, 289, 290, 291, 364, 365, 408], "x_train": 19, "x_true": [167, 356, 363, 365], "x_tv": 346, "x_wv": 347, "x_zf": 339, "xdg_data_hom": 300, "xhat": [117, 260, 263, 331, 345, 362, 363, 365], "xlabel": 363, "xlin": 335, "xlin2": 335, "xml": 21, "xprox": 335, "xprox2": 335, "xset": [117, 123, 144, 190, 198, 396, 400, 406, 407], "xt": 365, "xt_next": 365, "xxx": [13, 15, 18, 21, 22, 23, 25, 27, 412], "xxxxxxxxxxx": 17, "xy": 241, "y": [12, 14, 17, 19, 28, 29, 32, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 52, 53, 54, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 81, 86, 88, 90, 98, 100, 102, 106, 107, 108, 109, 111, 112, 113, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 131, 133, 134, 135, 136, 137, 138, 142, 143, 144, 148, 152, 153, 155, 156, 157, 158, 159, 161, 163, 167, 172, 175, 176, 178, 180, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 205, 206, 208, 209, 210, 214, 215, 216, 217, 218, 219, 220, 226, 227, 228, 229, 235, 241, 248, 256, 260, 261, 262, 263, 268, 269, 270, 273, 276, 279, 281, 287, 288, 292, 293, 295, 315, 318, 320, 323, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 345, 346, 347, 350, 351, 355, 356, 358, 361, 362, 363, 364, 365, 366, 369, 370, 372, 373, 376, 377, 381, 382, 383, 384, 385, 386, 393, 395, 396, 399, 400, 401, 402, 403, 405, 406, 407, 408, 410, 412, 413, 416, 417], "y1": 400, "y2": [335, 400], "y_": [206, 331], "y_1": [45, 48, 148, 375], "y_2": [45, 48, 148, 375], "y_bar": 361, "y_denois": 363, "y_hat": [61, 62, 63, 279], "y_i": [41, 42, 49, 115, 116, 121, 137, 143, 148, 209, 372, 407], "y_in": 35, "y_n": 194, "y_scale": 363, "y_shift": 202, "y_stretch_factor_min": [281, 288, 289, 290, 291], "y_t": [184, 205], "yaman": 48, "yang": 100, "yawli": 22, "ye": [17, 404, 405, 407, 413, 417], "yellow": 338, "yet": [279, 329], "yield": [17, 151, 330, 382, 383], "ylabel": 363, "yosida": [147, 408], "you": [12, 17, 21, 23, 26, 28, 70, 92, 194, 213, 224, 227, 280, 320, 323, 326, 328, 333, 335, 338, 339, 344, 345, 362, 363, 364, 365, 366, 369, 371, 372, 373, 374, 375, 376, 377, 381, 386, 390, 391, 393, 398, 404, 405, 412, 413, 414, 416], "your": [12, 19, 26, 28, 56, 58, 70, 85, 87, 88, 95, 97, 102, 122, 123, 133, 144, 145, 147, 153, 176, 180, 182, 186, 189, 190, 195, 198, 258, 259, 262, 264, 266, 268, 269, 270, 273, 274, 275, 277, 302, 303, 305, 308, 310, 318, 323, 335, 342, 343, 344, 355, 367, 368, 390, 394, 395, 398, 405, 408, 412, 416], "yourself": [339, 369, 393, 414], "yscale": 334, "yset": [117, 123, 190, 198, 396, 400, 406, 407], "yyi": 412, "yyyi": 12, "z": [52, 53, 54, 81, 84, 86, 126, 131, 135, 136, 138, 142, 147, 152, 155, 157, 158, 172, 180, 183, 186, 190, 198, 199, 203, 215, 241, 273, 281, 288, 289, 290, 291, 320, 323, 329, 333, 355, 384, 399, 401, 402, 407, 408], "z0": [239, 241], "z10": [239, 240, 241], "z11": [239, 240, 241], "z4": [239, 240, 241], "z5": [239, 240, 241, 326, 333], "z6": [239, 240, 241, 326, 333], "z7": [239, 240, 241], "z8": [239, 240, 241], "z9": [239, 240, 241], "z_": [117, 138, 155, 156, 157, 158, 273, 293, 345, 355, 361, 385, 407, 410], "z_0": 156, "z_k": [117, 138, 155, 156, 157, 158, 293, 355, 366, 385, 407, 410], "z_p": 345, "z_prev": 355, "zebrafish": 16, "zenodo": [214, 223], "zernik": [239, 240, 241, 326, 333], "zernike_polynomi": [240, 326, 333], "zero": [32, 44, 48, 50, 112, 116, 152, 153, 168, 175, 176, 183, 189, 190, 196, 202, 203, 205, 208, 211, 212, 213, 224, 236, 238, 245, 246, 270, 274, 283, 299, 319, 320, 326, 331, 333, 334, 335, 336, 339, 351, 361, 363, 365, 369, 383, 399, 416], "zero_boundari": 280, "zero_grad": [278, 351, 416], "zero_grad_d_onli": 278, "zero_grad_g_onli": 278, "zerofidel": [270, 364, 407], "zeros_lik": [190, 336, 339, 345, 383, 384, 407], "zeta": [263, 363], "zhang": [122, 327, 354], "zhou": 363, "zip": [14, 15, 18, 25, 305, 320, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 347, 350, 351, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386], "zoom": [281, 288, 291, 312, 397], "zoom_factor_min": [281, 288, 289, 290, 291], "zoran": [125, 351], "zuo": [122, 354], "zygalaki": 272, "\u00f6ktem": 384}, "titles": ["API", "deepinv.datasets", "deepinv.loss", "deepinv.metric", "deepinv.models", "deepinv.optim", "deepinv.physics", "deepinv.sampling", "deepinv.training", "deepinv.transform", "deepinv.unfolded", "deepinv.utils", "Trainer", "CBSD68", "CMRxReconSliceDataset", "DIV2K", "FMD", "FastMRISliceDataset", "Flickr2kHR", "HDF5Dataset", "Kohler", "LidcIdriSliceDataset", "LsdirHR", "NBUDataset", "PatchDataset", "Set14HR", "SimpleFastMRISliceDataset", "Urban100HR", "generate_dataset", "PlaceholderDataset", "Rescale", "ToComplex", "Artifact2ArtifactLoss", "BaseLossScheduler", "EILoss", "FNEJacobianSpectralNorm", "InterleavedEpochLossScheduler", "InterleavedLossScheduler", "JacobianSpectralNorm", "Loss", "MCLoss", "MOEILoss", "MOILoss", "Neighbor2Neighbor", "Phase2PhaseLoss", "R2RLoss", "RandomLossScheduler", "ScoreLoss", "SplittingLoss", "StackedPhysicsLoss", "StepLossScheduler", "SupLoss", "SureGaussianLoss", "SurePGLoss", "SurePoissonLoss", "TVLoss", "DiscriminatorLoss", "DiscriminatorMetric", "GeneratorLoss", "SupAdversarialDiscriminatorLoss", "SupAdversarialGeneratorLoss", "UAIRGeneratorLoss", "UnsupAdversarialDiscriminatorLoss", "UnsupAdversarialGeneratorLoss", "ERGAS", "L1L2", "LPIPS", "LpNorm", "MAE", "MSE", "Metric", "NIQE", "NMSE", "PSNR", "QNR", "SSIM", "SpectralAngleMapper", "ADMUNet", "ArtifactRemoval", "AutoEncoder", "BM3D", "CSGMGenerator", "ConvDecoder", "DCGANDiscriminator", "DCGANGenerator", "DRUNet", "DeepImagePrior", "Denoiser", "DiffUNet", "DnCNN", "EPLLDenoiser", "ESRGANDiscriminator", "EquivariantDenoiser", "GSDRUNet", "ICNN", "MedianFilter", "MoDL", "NCSNpp", "PDNet_DualBlock", "PDNet_PrimalBlock", "PanNet", "PatchGANDiscriminator", "Reconstructor", "Restormer", "SCUNet", "SwinIR", "TGVDenoiser", "TVDenoiser", "TimeAgnosticNet", "TimeAveragingNet", "UNet", "VarNet", "WaveletDenoiser", "WaveletDictDenoiser", "to_complex_denoiser", "AmplitudeLoss", "AmplitudeLossDistance", "BaseOptim", "Bregman", "BregmanL2", "Bregman_ICNN", "BurgEntropy", "DPIR", "DataFidelity", "Distance", "EPLL", "FixedPoint", "IndicatorL2", "IndicatorL2Distance", "L1", "L12Prior", "L1Distance", "L1Prior", "L2", "L2Distance", "LogPoissonLikelihood", "LogPoissonLikelihoodDistance", "NegEntropy", "OptimIterator", "PatchNR", "PatchPrior", "PnP", "PoissonLikelihood", "PoissonLikelihoodDistance", "Potential", "Prior", "RED", "ScorePrior", "StackedPhysicsDataFidelity", "TVPrior", "Tikhonov", "WaveletPrior", "ZeroDistance", "ZeroFidelity", "optim_builder", "ADMMIteration", "CPIteration", "DRSIteration", "FISTAIteration", "GDIteration", "HQSIteration", "MDIteration", "PGDIteration", "SMIteration", "fStep", "gStep", "correct_global_phase", "spectral_methods", "GaussianMixtureModel", "bicgstab", "conjugate_gradient", "gradient_descent", "least_squares", "lsqr", "minres", "Blur", "BlurFFT", "CompressedSensing", "CompressiveSpectralImaging", "Decolorize", "DecomposablePhysics", "Demosaicing", "Denoising", "Downsampling", "DynamicMRI", "GammaNoise", "GaussianNoise", "Haze", "HyperSpectralUnmixing", "Inpainting", "LinearPhysics", "LogPoissonNoise", "MRI", "MRIMixin", "MultiCoilMRI", "NoiseModel", "Pansharpen", "PhaseRetrieval", "Physics", "PoissonGaussianNoise", "PoissonNoise", "Ptychography", "PtychographyLinearOperator", "RadioInterferometry", "RandomPhaseRetrieval", "SequentialMRI", "SinglePhotonLidar", "SinglePixelCamera", "SpaceVaryingBlur", "StackedLinearPhysics", "StackedPhysics", "StructuredRandom", "StructuredRandomPhaseRetrieval", "TimeMixin", "Tomography", "UniformGaussianNoise", "UniformNoise", "adjoint_function", "bicubic_filter", "bilinear_filter", "gaussian_blur", "sinc_filter", "IRadon", "Radon", "conv2d", "conv2d_fft", "conv3d_fft", "conv_transpose2d", "conv_transpose2d_fft", "conv_transpose3d_fft", "dst1", "histogram", "histogramdd", "multiplier", "multiplier_adjoint", "product_convolution2d", "Artifact2ArtifactSplittingMaskGenerator", "BaseMaskGenerator", "BernoulliSplittingMaskGenerator", "ConfocalBlurGenerator3D", "DiffractionBlurGenerator", "DiffractionBlurGenerator3D", "DownsamplingGenerator", "EquispacedMaskGenerator", "GainGenerator", "GaussianMaskGenerator", "GaussianSplittingMaskGenerator", "GeneratorMixture", "MotionBlurGenerator", "PSFGenerator", "Phase2PhaseSplittingMaskGenerator", "PhysicsGenerator", "ProductConvolutionBlurGenerator", "RandomMaskGenerator", "SigmaGenerator", "build_probe", "generate_shifts", "stack", "BaseSDE", "BaseSDESolver", "DDRM", "DPS", "DPSDataFidelity", "DiffPIR", "DiffusionSDE", "DiffusionSampler", "EulerSolver", "HeunSolver", "MonteCarlo", "NoisyDataFidelity", "PosteriorDiffusion", "SDEOutput", "SKRock", "ULA", "VarianceExplodingDiffusion", "VariancePreservingDiffusion", "test", "train", "AdversarialOptimizer", "AdversarialTrainer", "CPABDiffeomorphism", "Homography", "Reflect", "Rotate", "Scale", "Shift", "ShiftTime", "Transform", "Affine", "Euclidean", "PanTiltRotate", "Similarity", "BaseDEQ", "BaseUnfold", "DEQ_builder", "unfolded_builder", "AverageMeter", "ProgressMeter", "deepinv.utils.TensorList", "dirac_like", "get_data_home", "get_degradation_url", "get_freer_gpu", "get_image_url", "get_timestamp", "load_dataset", "load_degradation", "load_image", "load_url_image", "ones_like", "plot", "plot_curves", "plot_inset", "plot_ortho3D", "plot_parameters", "plot_videos", "rand_like", "randn_like", "save_videos", "zeros_like", "Radio interferometric imaging with deepinverse", "Advanced", "Computation times", "Imaging inverse problems with adversarial networks", "Adversarial Learning", "Computation times", "A tour of blur operators", "Image deblurring with custom deep explicit prior.", "Creating your own dataset", "Reconstructing an image using the deep image prior.", "Using huggingface dataset", "Single photon lidar operator for depth ranging.", "Saving and loading models", "3D diffraction PSF", "Random phase retrieval and reconstruction methods.", "Creating a forward operator.", "A tour of forward sensing operators", "Ptychography phase retrieval", "Remote sensing with satellite images", "Tour of MRI functionality in DeepInverse", "Training a reconstruction network.", "Image transforms for equivariance &amp; augmentations", "Basics", "Computation times", "Examples", "3D wavelet denoising", "Image deblurring with Total-Variation (TV) prior", "Image inpainting with wavelet prior", "Optimization", "Computation times", "Expected Patch Log Likelihood (EPLL) for Denoising and Inpainting", "Patch priors for limited-angle computed tomography", "Patch Priors", "Computation times", "DPIR method for PnP image deblurring.", "PnP with custom optimization algorithm (Condat-Vu Primal-Dual)", "Plug-and-Play algorithm with Mirror Descent for Poisson noise inverse problems.", "Regularization by Denoising (RED) for Super-Resolution.", "Vanilla PnP for computed tomography (CT).", "Plug-and-Play", "Computation times", "Building your custom MCMC sampling algorithm.", "Image reconstruction with a diffusion model", "Implementing DiffPIR", "Building your diffusion posterior sampling method using SDEs", "Implementing DPS", "Uncertainty quantification with PnP-ULA.", "Sampling", "Computation times", "Self-supervised MRI reconstruction with Artifact2Artifact", "Image transformations for Equivariant Imaging", "Self-supervised learning with Equivariant Imaging for MRI.", "Self-supervised learning from incomplete measurements of multiple operators.", "Self-supervised denoising with the Neighbor2Neighbor loss.", "Self-supervised denoising with the Generalized R2R loss.", "Self-supervised learning with measurement splitting", "Self-supervised denoising with the SURE loss.", "Self-supervised denoising with the UNSURE loss.", "Self-Supervised Learning", "Computation times", "Computation times", "Deep Equilibrium (DEQ) algorithms for image deblurring", "Learned Iterative Soft-Thresholding Algorithm (LISTA) for compressed sensing", "Learned iterative custom prior", "Learned Primal-Dual algorithm for CT scan.", "Unfolded Chambolle-Pock for constrained image inpainting", "Vanilla Unfolded algorithm for super-resolution", "Unfolded", "Computation times", "Community", "How to Contribute", "Finding Help", "DeepInverse: a PyTorch library for imaging with deep learning", "Quickstart", "Computation times", "User Guide", "Math Notation", "Utils", "Defining New Operators", "Functional", "Introduction", "Operators &amp; Noise", "Adversarial Networks", "Artifact Removal", "Denoisers", "Introduction", "Iterative Reconstruction (PnP, RED, etc.)", "Optimization", "Diffusion and MCMC Algorithms", "Specific Networks", "Unfolded Algorithms", "Pretrained Weights", "Datasets", "Training Losses", "Metrics", "Using Multiple GPUs", "Trainer", "Transforms"], "titleterms": {"1": [339, 341], "2": [339, 341], "3": [339, 341], "3d": [333, 339, 345], "4": 339, "5": 339, "6": 339, "A": [326, 336], "No": [3, 414], "The": [320, 363, 365], "Their": 401, "acceler": 339, "adjoint_funct": 217, "admmiter": 155, "admunet": 77, "advanc": [9, 321, 344, 417], "adversari": [2, 4, 8, 323, 324, 344, 402, 413], "adversarialoptim": 278, "adversarialtrain": 279, "affin": 288, "algorithm": [327, 329, 345, 346, 347, 351, 354, 355, 356, 357, 358, 361, 362, 363, 365, 366, 381, 382, 383, 384, 386, 406, 407, 408, 410], "all": 363, "ambientgan": 323, "amplitudeloss": 115, "amplitudelossdist": 116, "an": [329, 339, 347, 363, 406], "angl": 351, "api": 0, "appli": [330, 331], "approxim": 365, "arbitrari": 364, "architectur": [409, 410], "artifact": [4, 403], "artifact2artifact": 369, "artifact2artifactloss": 32, "artifact2artifactsplittingmaskgener": 236, "artifactremov": 78, "augment": 341, "autoencod": 79, "averagemet": 296, "base": [2, 3, 4, 5, 6, 9, 327, 328, 340, 345, 346, 347, 354, 355, 357, 371, 372, 373, 374, 376, 377, 381, 382, 383, 385, 386], "basedeq": 292, "baselossschedul": 33, "basemaskgener": 237, "baseoptim": 117, "basesd": 258, "basesdesolv": 259, "baseunfold": 293, "basic": [326, 342, 344], "benefit": 335, "bernoullisplittingmaskgener": 238, "bicgstab": 169, "bicubic_filt": 218, "bilinear_filt": 219, "block": 10, "blur": [175, 326, 327, 336, 346, 354], "blurfft": 176, "bm3d": 80, "bregman": [5, 118, 407], "bregman_icnn": 120, "bregmanl2": 119, "brigg": 320, "buffer": 330, "build": [361, 364], "build_prob": 255, "burgentropi": 121, "camera": 336, "carlo": [7, 362, 408], "cbsd68": 13, "chain": [7, 408], "chambol": 385, "check": 377, "class": [2, 3, 4, 5, 6, 9, 357, 361], "classic": [4, 404], "cmrxreconslicedataset": 14, "combin": 400, "commun": 389, "comparison": 334, "complex": 404, "compress": [336, 382, 383], "compressedsens": 177, "compressivespectralimag": 178, "comput": [322, 325, 336, 343, 349, 351, 353, 358, 360, 368, 379, 380, 388, 394], "condat": 355, "condit": [323, 402], "confoc": 333, "confocalblurgenerator3d": 239, "conjugate_gradi": 170, "constrain": 385, "construct": 334, "contribut": 390, "conv2d": 224, "conv2d_fft": 225, "conv3d_fft": 226, "conv_transpose2d": 227, "conv_transpose2d_fft": 228, "conv_transpose3d_fft": 229, "convdecod": 82, "convolut": [326, 333], "correct": 334, "correct_global_phas": 166, "cpabdiffeomorph": 280, "cpiter": 156, "creat": [328, 330, 331, 335, 345, 361, 362, 366], "csgm": 323, "csgmgener": 81, "ct": [358, 384], "custom": [7, 10, 327, 335, 355, 357, 361, 383, 384, 410], "data": [1, 5, 327, 328, 330, 332, 339, 340, 341, 345, 346, 347, 354, 355, 356, 357, 358, 363, 369, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 407, 408, 412], "datafidel": 123, "dataload": [328, 330], "dataset": [1, 323, 327, 328, 330, 340, 346, 347, 354, 355, 357, 371, 372, 373, 374, 376, 377, 381, 382, 383, 384, 385, 386, 412], "dcgandiscrimin": 83, "dcgangener": 84, "ddrm": 260, "deblur": [327, 346, 354, 381], "decolor": [179, 336], "decompos": 335, "decomposablephys": 180, "deep": [4, 10, 327, 329, 381, 392, 402, 404, 410], "deepimageprior": 86, "deepinv": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 298], "deepinvers": [320, 339, 392], "defin": [323, 327, 329, 332, 340, 355, 356, 361, 362, 365, 366, 369, 375, 381, 382, 383, 384, 385, 386, 398], "definit": [351, 357, 401], "degrad": [327, 328, 340, 346, 347, 354, 355, 357, 371, 372, 381, 382, 383, 384, 385, 386], "demo": 397, "demosa": [181, 336], "denois": [4, 87, 182, 334, 336, 341, 345, 350, 357, 362, 363, 364, 365, 373, 374, 376, 377, 404, 413], "depend": [365, 400], "depth": 331, "deq": 381, "deq_build": 294, "descent": [334, 337, 356], "descript": 397, "differenti": [7, 408], "diffpir": [263, 363], "diffract": [326, 333], "diffractionblurgener": 240, "diffractionblurgenerator3d": 241, "diffunet": 88, "diffus": [7, 362, 364, 365, 408], "diffusionsampl": 265, "diffusionsd": 264, "dip": 329, "dirac_lik": 299, "discrimin": 402, "discriminatorloss": 56, "discriminatormetr": 57, "displai": 337, "distanc": [5, 124], "distribut": [6, 401], "div2k": 15, "dncnn": 89, "downsampl": 183, "downsamplinggener": 242, "dp": [261, 365], "dpir": [122, 354], "dpsdatafidel": 262, "drsiter": 157, "drunet": 85, "dst1": 230, "dual": [355, 384], "dykstra": 345, "dynam": [339, 404], "dynamicmri": 184, "eiloss": 34, "em": 351, "epll": [125, 350, 351], "eplldenois": 90, "equat": [7, 408], "equilibrium": [10, 381, 410], "equispacedmaskgener": 243, "equivari": [341, 370, 371, 404], "equivariantdenois": 92, "erga": 64, "esrgandiscrimin": 91, "estim": 337, "etc": 406, "euclidean": 289, "eulersolv": 266, "evalu": [327, 346, 347, 354, 355, 356, 357, 358], "event": 389, "exampl": [12, 14, 17, 19, 23, 24, 26, 27, 28, 32, 34, 35, 39, 40, 42, 43, 44, 45, 48, 49, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 64, 76, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 110, 111, 112, 113, 117, 118, 121, 122, 123, 125, 127, 129, 133, 135, 138, 139, 140, 141, 142, 144, 145, 146, 147, 149, 151, 153, 154, 156, 159, 162, 164, 165, 166, 167, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 213, 214, 216, 220, 237, 238, 239, 240, 241, 243, 245, 246, 247, 248, 249, 251, 252, 253, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 299, 300, 301, 302, 303, 305, 306, 308, 310, 311, 312, 313, 314, 315, 318, 344, 362], "expect": 350, "explicit": 327, "explor": [339, 346, 347], "extens": 345, "fastmri": 339, "fastmrislicedataset": 17, "fidel": [5, 363, 384, 407, 408], "filter": 331, "final": 337, "find": 391, "fistaiter": 158, "fixedpoint": 126, "flickr2khr": 18, "fmd": 16, "fnejacobianspectralnorm": 35, "forward": [329, 331, 332, 335, 336, 340, 351, 355, 358, 361, 362, 366, 385], "from": [329, 330, 334, 336, 337, 361, 362, 366, 372], "fstep": [164, 355], "full": [3, 414], "function": [6, 339, 397, 399], "futur": 389, "gaingener": 244, "gammanois": 185, "gan": [323, 402], "gaussian_blur": 220, "gaussianmaskgener": 245, "gaussianmixturemodel": 168, "gaussiannois": 186, "gaussiansplittingmaskgener": 246, "gditer": 159, "gener": [1, 6, 7, 323, 326, 327, 328, 329, 331, 333, 334, 335, 337, 340, 346, 347, 354, 361, 362, 363, 366, 371, 372, 373, 374, 376, 377, 381, 382, 383, 385, 386, 400, 401, 412], "generate_dataset": 28, "generate_shift": 256, "generatorloss": 58, "generatormixtur": 247, "get": 339, "get_data_hom": 300, "get_degradation_url": 301, "get_freer_gpu": 302, "get_image_url": 303, "get_timestamp": 304, "gpu": 415, "gradient": [334, 337, 382, 383], "gradient_desc": 171, "groundtruth": 320, "gsdrunet": 93, "gstep": [165, 355], "guid": 395, "haze": 187, "hdf5dataset": 19, "help": 391, "heunsolv": 267, "histogram": 231, "histogramdd": 232, "homographi": 281, "how": 390, "hqsiter": 160, "huggingfac": 330, "hyperspectralunmix": 188, "icnn": 94, "imag": [1, 4, 7, 320, 323, 327, 328, 329, 334, 335, 336, 337, 338, 340, 341, 345, 346, 347, 350, 351, 354, 355, 357, 358, 361, 362, 366, 370, 371, 372, 373, 374, 376, 377, 381, 382, 383, 385, 386, 392, 402], "implement": [363, 365, 406], "import": 320, "incomplet": 372, "indicatorl2": 127, "indicatorl2dist": 128, "initi": 334, "inpaint": [189, 336, 347, 350, 385], "input": 337, "instal": 365, "interferometr": 320, "interleavedepochlossschedul": 36, "interleavedlossschedul": 37, "internet": [329, 330, 334, 336, 337, 361, 362, 366], "introduct": [400, 405, 413, 414], "invers": [323, 327, 346, 347, 354, 355, 356, 358, 363, 365], "involv": 357, "iradon": 222, "iter": [5, 345, 361, 382, 383, 384, 406, 407], "jacobianspectralnorm": 38, "knee": 371, "kohler": 20, "l1": 129, "l12prior": 130, "l1distanc": 131, "l1l2": 65, "l1prior": 132, "l2": 133, "l2distanc": 134, "langevin": 7, "learn": [2, 324, 344, 371, 372, 375, 377, 378, 382, 383, 384, 392, 404, 413], "least_squar": 172, "level": 377, "librari": [330, 392], "lidar": 331, "lidcidrislicedataset": 21, "like": 345, "likelihood": [350, 366], "limit": 351, "linear": [335, 400], "linearphys": 190, "list": 396, "lista": 382, "load": [327, 328, 329, 330, 332, 334, 336, 337, 338, 339, 340, 345, 346, 347, 350, 351, 354, 355, 356, 357, 358, 361, 362, 365, 366, 369, 371, 372, 373, 374, 376, 377, 381, 382, 383, 384, 385, 386], "load_dataset": 305, "load_degrad": 306, "load_imag": 307, "load_url_imag": 308, "log": [11, 350, 397], "logpoissonlikelihood": 135, "logpoissonlikelihooddist": 136, "logpoissonnois": 191, "loop": 351, "loss": [2, 39, 369, 373, 374, 375, 376, 377, 413], "low": [381, 386], "lpip": 66, "lpnorm": 67, "lsdirhr": 22, "lsqr": 173, "mae": 68, "markov": [7, 408], "match": 331, "math": 396, "mathemat": 396, "mcloss": 40, "mcmc": [361, 366, 408], "mditer": 161, "measur": [320, 329, 331, 334, 337, 338, 361, 362, 366, 372, 375, 382, 383], "medianfilt": 95, "method": [334, 354, 364, 405, 406, 408], "metric": [3, 70, 414], "microscop": 333, "minr": 174, "mirror": 356, "mixtur": 326, "mmse": 362, "model": [4, 5, 7, 323, 329, 331, 332, 337, 340, 346, 347, 350, 351, 354, 355, 356, 357, 358, 361, 362, 365, 366, 369, 375, 384, 385, 408], "modl": 96, "modul": 355, "moeiloss": 41, "moiloss": 42, "mont": [7, 362, 408], "montecarlo": 268, "motion": 326, "motionblurgener": 248, "mri": [192, 336, 339, 369, 371], "mrimixin": 193, "mse": 69, "multicoilmri": 194, "multipl": [345, 372, 415], "multipli": 233, "multiplier_adjoint": 234, "natur": 320, "nbudataset": 23, "ncsnpp": 97, "negentropi": 137, "neighbor2neighbor": [43, 373], "network": [2, 4, 323, 338, 339, 340, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 402, 404, 409, 413], "neural": [338, 339], "new": 398, "niqe": 71, "nmse": 72, "nois": [6, 329, 351, 356, 361, 362, 363, 366, 377, 401], "noisemodel": 195, "noisi": [373, 374, 376, 377, 408], "noisydatafidel": 269, "non": 404, "notat": 396, "od": 408, "ones_lik": 309, "oper": [6, 320, 326, 327, 329, 331, 332, 335, 336, 340, 345, 346, 347, 351, 354, 355, 357, 358, 361, 362, 366, 371, 372, 381, 382, 383, 384, 385, 386, 395, 398, 400, 401], "optim": [5, 327, 344, 346, 347, 348, 355, 407], "optim_build": 154, "optimiter": 138, "other": [1, 11, 397, 413], "our": 335, "overal": 334, "overlap": 337, "overview": [399, 404, 407, 412, 413], "own": 328, "packag": 320, "pan": [336, 338], "pannet": 100, "pansharpen": 196, "pantiltrot": 290, "paramet": [351, 358, 371, 372, 373, 374, 376, 377, 381, 382, 383, 384, 386, 400, 407], "particular": 357, "past": 389, "patch": [344, 350, 351, 352], "patchdataset": 24, "patchgandiscrimin": 101, "patchnr": [139, 351], "patchprior": 140, "path": [327, 328, 332, 340, 345, 346, 347, 354, 355, 356, 357, 358, 371, 372, 373, 374, 376, 377, 381, 382, 383, 384, 385, 386], "pattern": 320, "pdnet": 384, "pdnet_dualblock": 98, "pdnet_primalblock": 99, "pgditer": 162, "phantom": 384, "phase": [334, 337], "phase2phaseloss": 44, "phase2phasesplittingmaskgener": 250, "phaseretriev": 197, "photon": 331, "physic": [6, 198, 327, 337, 369, 400], "physicsgener": 251, "pixel": 336, "placeholderdataset": 29, "plai": [341, 344, 356, 359, 364], "plot": [11, 310, 329, 331, 346, 347, 351, 355, 356, 358, 361, 362, 366, 382, 383, 386, 397], "plot_curv": 311, "plot_inset": 312, "plot_ortho3d": 313, "plot_paramet": 314, "plot_video": 315, "plug": [341, 344, 356, 359, 364], "pnp": [141, 334, 354, 355, 356, 357, 358, 366, 386, 406], "pock": 385, "poisson": 356, "poissongaussiannois": 199, "poissonlikelihood": 142, "poissonlikelihooddist": 143, "poissonnois": 200, "popular": 408, "posterior": [7, 364, 408], "posteriordiffus": 270, "potenti": [5, 144, 407], "precondit": 361, "predefin": [5, 406, 407, 412], "prep": 369, "prepar": [337, 375], "pretrain": 411, "primal": [355, 384], "prior": [4, 5, 145, 320, 327, 329, 344, 346, 347, 351, 352, 357, 361, 366, 383, 384, 402, 407], "probabl": 401, "probe": 337, "problem": [320, 323, 327, 339, 345, 346, 347, 354, 355, 356, 357, 358, 363, 365], "process": 364, "product_convolution2d": 235, "productconvolutionblurgener": 252, "progressmet": 297, "proxim": [382, 383], "psf": 333, "psfgener": 249, "psnr": 73, "ptychographi": [201, 337], "ptychographylinearoper": 202, "put": 363, "pytorch": 392, "qnr": 74, "quantif": [366, 408], "quickstart": 393, "r2r": 374, "r2rloss": 45, "radio": 320, "radiointerferometri": 203, "radon": 223, "rand_lik": 316, "randn_lik": 317, "random": [334, 384], "randomlossschedul": 46, "randommaskgener": 253, "randomphaseretriev": 204, "rang": 331, "raw": [338, 339], "reconstruct": [327, 329, 334, 340, 351, 362, 369, 371, 372, 385, 395, 405, 406], "reconstructor": 102, "recov": 331, "red": [146, 357, 406], "refer": [3, 414], "reflect": 282, "regular": [2, 357, 363, 413], "remot": 338, "remov": [4, 403], "requir": 320, "rescal": 30, "resolut": [336, 357, 381, 386], "restorm": 103, "result": [327, 328, 329, 331, 332, 340, 345, 346, 347, 354, 355, 356, 357, 358, 361, 362, 366, 371, 372, 373, 374, 376, 377, 381, 382, 383, 384, 385, 386], "retriev": [334, 337], "revers": 364, "ri": 320, "rotat": 283, "routin": 399, "run": [329, 351, 361, 362, 366], "sampl": [7, 320, 344, 361, 362, 363, 364, 366, 367, 408], "sampler": [7, 361, 362, 366, 408], "satellit": 338, "save": [332, 385], "save_video": 318, "scale": 284, "scan": 384, "schedul": [2, 363, 365, 413], "scoreloss": 47, "scoreprior": 147, "scunet": 104, "sde": [364, 408], "sdeoutput": 271, "self": [2, 344, 369, 371, 372, 373, 374, 375, 376, 377, 378, 413], "sens": [336, 338, 382], "sequentialmri": 205, "set": [327, 337, 340, 346, 347, 351, 354, 355, 358, 363, 371, 372, 373, 374, 376, 377, 385], "set14hr": 25, "setup": [327, 328, 332, 334, 337, 340, 345, 346, 347, 354, 355, 356, 357, 358, 371, 372, 373, 374, 376, 377, 381, 382, 383, 384, 385, 386], "sharpen": [336, 338], "shift": 285, "shifttim": 286, "shuffl": 330, "sigmagener": 254, "signal": [331, 334], "similar": 291, "simpl": [9, 417], "simplefastmrislicedataset": 26, "simul": [320, 338], "sinc_filt": 221, "singl": [331, 336], "singlephotonlidar": 206, "singlepixelcamera": 207, "skrock": 272, "smiter": 163, "soft": 382, "solv": [320, 327, 338, 345, 346, 347, 354, 355, 358], "solver": 408, "space": 326, "spacevaryingblur": 208, "specif": 409, "spectral": 334, "spectral_method": 167, "spectralanglemapp": 76, "split": 375, "splittingloss": 48, "ssim": 75, "stack": 257, "stackedlinearphys": 209, "stackedphys": 210, "stackedphysicsdatafidel": 148, "stackedphysicsloss": 49, "standard": 361, "start": 339, "step": [363, 365], "steplossschedul": 50, "stochast": [7, 408], "stream": 330, "structuredrandom": 211, "structuredrandomphaseretriev": 212, "subsampl": 372, "summari": 411, "supadversarialdiscriminatorloss": 59, "supadversarialgeneratorloss": 60, "super": [336, 357, 386], "supervis": [2, 344, 369, 371, 372, 373, 374, 375, 376, 377, 378, 413], "suploss": 51, "sure": 376, "suregaussianloss": 52, "surepgloss": 53, "surepoissonloss": 54, "swinir": 105, "symbol": 396, "tensorlist": [11, 298, 397], "term": [384, 408], "test": [276, 340, 350, 351, 369, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 395], "tgvdenois": 106, "thi": 357, "threshold": 382, "tikhonov": 150, "time": [322, 325, 343, 349, 353, 360, 364, 368, 379, 380, 388, 394, 417], "timeagnosticnet": 108, "timeaveragingnet": 109, "timemixin": 213, "to_complex_denois": 114, "tocomplex": 31, "togeth": 363, "toi": [331, 335], "tomographi": [214, 336, 351, 358], "total": 346, "tour": [326, 336, 339], "train": [8, 277, 323, 339, 340, 351, 369, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 395, 413], "trainabl": 384, "trainer": [12, 416], "transform": [1, 9, 287, 330, 341, 370, 412, 417], "tv": 346, "tvdenois": 107, "tvloss": 55, "tvprior": 149, "uair": 323, "uairgeneratorloss": 61, "ula": [273, 361, 366], "uncertainti": [366, 408], "uncondit": 402, "unet": 110, "unfold": [10, 344, 382, 383, 384, 385, 386, 387, 410], "unfolded_build": 295, "uniformgaussiannois": 215, "uniformnois": 216, "unsupadversarialdiscriminatorloss": 62, "unsupadversarialgeneratorloss": 63, "unsur": 377, "up": [327, 337, 340, 346, 347, 354, 355, 358, 371, 372, 373, 374, 376, 377, 385], "urban100hr": 27, "us": [12, 14, 17, 19, 23, 24, 26, 27, 28, 32, 34, 35, 39, 40, 42, 43, 44, 45, 48, 49, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 64, 76, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 110, 111, 112, 113, 117, 118, 121, 122, 123, 125, 127, 129, 133, 135, 138, 139, 140, 141, 142, 144, 145, 146, 147, 149, 151, 153, 154, 156, 159, 162, 164, 165, 166, 167, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 213, 214, 216, 220, 237, 238, 239, 240, 241, 243, 245, 246, 247, 248, 249, 251, 252, 253, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 299, 300, 301, 302, 303, 305, 306, 308, 310, 311, 312, 313, 314, 315, 318, 329, 330, 335, 339, 345, 363, 364, 365, 415], "user": 395, "util": [4, 5, 11, 298, 395, 397, 404, 407], "vanilla": [358, 386], "vari": [326, 364], "varianceexplodingdiffus": 274, "variancepreservingdiffus": 275, "variat": 346, "varnet": 111, "verifi": 335, "video": [9, 417], "visual": [334, 337], "volum": 345, "vu": 355, "wavelet": [320, 345, 347], "waveletdenois": 112, "waveletdictdenois": 113, "waveletprior": 151, "weight": [320, 383, 386, 411], "widefield": 333, "your": [328, 361, 363, 364, 365], "zerodist": 152, "zerofidel": 153, "zeros_lik": 319}})